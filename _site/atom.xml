<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Ken Yang筆記</title>
 <link href="http://blog.kenyang.net/atom.xml" rel="self"/>
 <link href="http://blog.kenyang.net"/>
 <updated>2016-04-16T18:34:11+08:00</updated>
 <id>http://blog.kenyang.net</id>
 <author>
   <name>Ken Yang</name>
   <email>ken@kenyang.net</email>
 </author>

 
 <entry>
   <title>Setting up an HTTPS server with Node.js</title>
   <link href="http://blog.kenyang.net/2016/04/16/setting-up-an-https-server-with-nodejs"/>
   <updated>2016-04-16T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2016/04/16/setting-up-an-https-server-with-nodejs</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;這篇要講怎麼用Node.js建立一個HTTPS的server，如果你的certificate不是self-signed的，&lt;/br&gt;
那設定HTTPS並不難，產生CSR給CA provider，然後就會有certificate，把它放進去就好，&lt;/br&gt;
但如果是self-signed，那過程就有點麻煩，每次要弄的時候，都還是會有點忘記，所以乾脆把過程記錄下來好了。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-creating-a-private-key-and-csr&quot;&gt;1. Creating a private key and CSR&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;在create certificate之前，必須要先有&lt;code&gt;private key&lt;/code&gt;以及&lt;code&gt;CSR&lt;/code&gt; (certificate signing request)，&lt;/br&gt;
所以我們要先generate出private key以及CSR。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# generate private key&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl genrsa -des3 -passout pass:kenyang -out server.pass.key 2048
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsa -passin pass:kenyang -in server.pass.key -out server.key
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm server.pass.key

&lt;span class=&quot;c&quot;&gt;# generate csr&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl req -new -key server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-creating-a-certificate&quot;&gt;2. Creating a certificate&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;有了key和CSR以後，我們就可以issue一張certificate出來，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl x509 -req -days &lt;span class=&quot;m&quot;&gt;365&lt;/span&gt; -in server.csr -signkey server.key -out server.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-configuring-ssl-in-node-js&quot;&gt;3. Configuring SSL in Node.js&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;有了certificate以後，就可以把它放在Node.js中使用，&lt;/br&gt;
這裡我搭配的&lt;code&gt;express&lt;/code&gt;+&lt;code&gt;https&lt;/code&gt;這二個module，https這個module，default就有了，&lt;/br&gt;
所以我們只需要安裝&lt;code&gt;express&lt;/code&gt;就好。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install --save express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著就把下面的內容貼入到&lt;code&gt;index.js&lt;/code&gt;當中，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;express&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SERVER_CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server.key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;server.crt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;STATUS&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SERVER_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTPS sever started&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
靠&lt;code&gt;fs&lt;/code&gt;去讀取certificate，然後再餵給&lt;code&gt;createServer&lt;/code&gt;，這樣就完成了https server。&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting started with Kubernetes</title>
   <link href="http://blog.kenyang.net/2016/04/07/getting-started-with-kubernetes"/>
   <updated>2016-04-07T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2016/04/07/getting-started-with-kubernetes</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;Docker玩了一陣子，總覺得沒有玩一些container management的service好像少了點什麼，&lt;/br&gt;
剛好team裡用到&lt;a href=&quot;http://kubernetes.io/docs/&quot;&gt;Kubernetes&lt;/a&gt;，所以這裡就記錄一下怎麼使用&lt;a href=&quot;http://kubernetes.io/docs/&quot;&gt;Kubernetes&lt;/a&gt;。&lt;/br&gt;
然後這篇會把Kubernetes架在Google Cloud Platform上面，所以還得去安裝Google Cloud SDK。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-downloading-kubernetes&quot;&gt;1. Downloading Kubernetes&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;第一步驟要先安裝Kubernetes，安裝方式有好幾種，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tarball解開&lt;/li&gt;
&lt;li&gt;Build from source&lt;/li&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;Remote shell script &lt;/li&gt;
&lt;li&gt;用Google Cloud SDK安裝&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;各個的詳細步驟可以去&lt;a href=&quot;http://kubernetes.io/docs/getting-started-guides/binary_release/&quot;&gt;Kubernetes安裝頁面&lt;/a&gt;看，我自己是選擇透過Google Cloud SDK來安裝，所以首先要先安裝Google Cloud SDK。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;安裝Google Cloud SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud SDK這個tool讓你可以對Google Cloud Platform進行操作。安裝指令如下，Default installation path會在你的home目錄底下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://sdk.cloud.google.com &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著要restart shell和設定gcloud environment，&lt;code&gt;gcloud init&lt;/code&gt;這個指令會彈出browser要你login，以及要你輸入default zone，我是選asia-east1-a。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -l &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;安裝kubectl&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud components install kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-setup-google-cloud&quot;&gt;2. Setup Google Cloud&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;在這步驟要做幾件事情，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;註冊&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create project&lt;/li&gt;
&lt;li&gt;打開billing&lt;/li&gt;
&lt;li&gt;開啟Container Engine API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;Step 1. 註冊&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;Google Cloud&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;點了上面的連結至console以後，就發現其實是以前的Google App Engine+Google APIs的後台，&lt;/br&gt;
只不過好久沒用了，發現改版改好多..
然後又發現新註冊的user有免費300美金的quota可以使用，&lt;/br&gt;
舊有的用戶還沒有這300美金可以用，所以建議可以乾脆註冊新帳號使用比較好。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;Step 2: Create project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有了帳號以後，就去Create project，Create時的project名稱，&lt;/br&gt;
如果project名稱沒有重複的話，應該就會是你的&lt;code&gt;PROJECT_ID&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;Step 3: 打開billing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這一步驟就是&lt;a href=&quot;https://console.developers.google.com/billing&quot;&gt;點這個連結&lt;/a&gt;去打開Billing，進去以後要填寫信用卡資料，目的是將來要收費，&lt;/br&gt;不過如果你是新註冊的話，一開始先不用擔心這個問題，因為有300美金可以使用。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;strong&gt;Step 4: 開啟Container Engine API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接著要去Enable Container Engine API，&lt;a href=&quot;https://console.cloud.google.com/project/_/kubernetes/list&quot;&gt;點這個連結&lt;/a&gt;去enable，進去以後就選取剛剛create的project，然後按下Continue。(如下圖)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-08-enable-container-api.png&quot; alt=&quot;cmd&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-create-your-node-js-application&quot;&gt;3. Create your Node.js application&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著來寫一個簡單的Node.js application，等等會把這application包成docker image，&lt;/br&gt;
先create一個folder，然後建立一個server.js，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir hellonode-app
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hellonode-app
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
再把下面的內容貼入到server.js當中，下面的內容就是建立一個http server，且listen在8080 port上，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;4-create-and-push-a-docker-container-image&quot;&gt;4. Create and Push a Docker container image&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著要把上面的application變成一個docker image以及把image push上去，所以首先要先建立一個&lt;code&gt;Dockerfile&lt;/code&gt;，Dockerfile作用在之前的&lt;a href=&quot;http://blog.kenyang.net/2015/11/30/how-to-use-nodejs-mongodb-with-docker&quot;&gt;文章&lt;/a&gt;就有解釋過了，
&lt;/br&gt;
簡單說就是用來定義這個image的資訊。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM node:0.12
EXPOSE 8080
COPY server.js .
CMD node server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
有了&lt;code&gt;Dockerfile&lt;/code&gt;以後，就可以來build image了，記得把下面的&lt;code&gt;ken-kubernetes-lab&lt;/code&gt;換成你們自己的project id，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build -t gcr.io/ken-kubernetes-lab/hello-node:v1 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
build完以後，可以在自己local測試看看，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -d -p 8080:8080 gcr.io/ken-kubernetes-lab/hello-node:v1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著就可以把image push上去Google Container Registry，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud docker push gcr.io/ken-kubernetes-lab/hello-node:v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;5-create-a-cluster&quot;&gt;5. Create a cluster&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著去console，建立一個cluster，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-08-create-cluster.png&quot; alt=&quot;cmd&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
建完以後，就把cluster的info餵給kubectl，記得把&lt;code&gt;cluster-1&lt;/code&gt;改成你的cluster名稱。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud container clusters get-credentials cluster-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;6-create-a-pod&quot;&gt;6. Create a pod&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;pod&lt;/code&gt;在kubernetes的定義是&lt;code&gt;pods are the smallest deployable units of computing that can be created and managed in Kubernetes.&lt;/code&gt;，
&lt;/br&gt;
簡單說，如果你要在kubernetes的cluster裡面run起來&lt;code&gt;一組&lt;/code&gt;container，就得有一個pod，&lt;/br&gt;
&lt;code&gt;一組&lt;/code&gt;container的意思是，這個pod裡面由一個以上的container所組成。
&lt;/br&gt;&lt;/br&gt;
用kubectl run來建立一個pod:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl run hello-node --image&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gcr.io/ken-kubernetes-lab/hello-node:v1 --port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080
deployment &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello-node&amp;quot;&lt;/span&gt; created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上面的output所示，&lt;code&gt;kubectl run&lt;/code&gt;建立了一個&lt;code&gt;deployment&lt;/code&gt;，&lt;code&gt;deployment&lt;/code&gt;主要是用來建立或者scale一個pod的一種方式，以這個例子來說，deployment管理了1個pod replica，想看deployment的資訊，就打：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get deployments
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-node   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;           3d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;7-allow-external-traffic&quot;&gt;7. Allow external traffic&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;pod預設只能被內部access，如果想要讓外部存取，必須把&lt;code&gt;pod&lt;/code&gt; expose成一個&lt;code&gt;service&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl expose deployment hello-node --type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;LoadBalancer&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你會發現上面的指令，我們是expose deployment這個object出來，而不是pod，&lt;/br&gt;
如上面所說，deployment可能會管理多個pods，所以可以透過deployment來當作load balancer。
取得service ip的指令，請打:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get services hello-node
NAME         CLUSTER-IP       EXTERNAL-IP       PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    AGE
hello-node   10.123.244.242   130.211.247.198   8080/TCP   3d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;EXTERNAL_IP&lt;/code&gt;可能需要一點點時間才會顯示出來，所以如果&lt;code&gt;EXTERNAL_IP&lt;/code&gt;一開始是空白的，請等一下再試一次。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;8-scale-up-your-website&quot;&gt;8. Scale up your website&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;Kubernetes其中最強大的一點就是可以很輕鬆的scale你的application，
&lt;/br&gt;
假設你的application突然需要更多的capacity，你可以簡單地叫&lt;code&gt;deployment&lt;/code&gt;去建立新的replica:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl scale deployment hello-node --replicas&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現在你的application就有4個replicas，每一個獨立地在cluster中運作，且load balancer去serve traffic。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get deployments
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-node   &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;           3d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
hello-node-3344141985-j2zun   1/1       Running   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          2m
hello-node-3344141985-j70fh   1/1       Running   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          2m
hello-node-3344141985-lzynx   1/1       Running   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          3d
hello-node-3344141985-x3ycw   1/1       Running   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;9-roll-out-an-upgrade-to-your-website&quot;&gt;9. Roll out an upgrade to your website&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;假設你的application有bug fixes，Kubernetes也可以輕易地幫助你deploy新版本上去。&lt;/br&gt;
首先，先來改剛剛的&lt;code&gt;server.js&lt;/code&gt;，修改response message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello Kubernetes World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著可以build及publish新版本至registry:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build -t gcr.io/ken-kubernetes-lab/hello-node:v2 . 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud docker push gcr.io/ken-kubernetes-lab/hello-node:v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;push完成以後，我們就有一個v2版本的image可以使用，接下來只要透過&lt;code&gt;kubectl edit&lt;/code&gt;指令就可以進行update，
&lt;/br&gt;
這個指令會打開一個text editor，內容是一個deployment的yaml config，&lt;/br&gt;
我們只需要把&lt;strong&gt;&lt;code&gt;gcr.io/ken-kubernetes-lab/hello-node:v1&lt;/code&gt;&lt;/strong&gt;改成&lt;strong&gt;&lt;code&gt;gcr.io/ken-kubernetes-lab/hello-node:v2&lt;/code&gt;&lt;/strong&gt;就好。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl edit deployment hello-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;編輯完成以後，可以去看看pods有什麼變化:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                          READY     STATUS        RESTARTS   AGE
hello-node-3344141985-j2zun   1/1       Terminating   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          19m
hello-node-3344141985-j70fh   1/1       Terminating   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          19m
hello-node-3344141985-lzynx   1/1       Terminating   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          3d
hello-node-3344141985-x3ycw   1/1       Terminating   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          19m
hello-node-3422850722-b0niu   1/1       Running       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          13s
hello-node-3422850722-gu7c3   1/1       Running       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          19s
hello-node-3422850722-oaqw7   1/1       Running       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          19s
hello-node-3422850722-ria1t   1/1       Running       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          13s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;從output中會發現，deployment建立新的pod，把舊版的pod關掉了。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;10-delete&quot;&gt;10. Delete&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;由於只有300美金啊，雖然我開了三天也才花費五塊美金，不過沒在用還是關掉吧！&lt;/br&gt;
刪除Deployment時，也會一併刪除pod；刪除service會刪除load balancer。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl delete service,deployment hello-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後記得cluster也要刪除:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud container clusters delete cluster-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Heroku Redis: Connecting in Python</title>
   <link href="http://blog.kenyang.net/2016/02/15/heroku-redis-connecting-in-python"/>
   <updated>2016-02-15T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2016/02/15/heroku-redis-connecting-in-python</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;這篇要講怎麼在Heroku上，使用它的&lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-redis&quot;&gt;Heroku Redis&lt;/a&gt;，&lt;br&gt;
大致上分為三個步驟，分別為安裝，配置，寫code。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-installing-cli&quot;&gt;1. Installing CLI&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;第一步驟是要先安裝heroku-redis的command line tools，
但如果你不想要用command line，你也可以至heroku的後台裡面的Add-ons加一台redis。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku plugins:install heroku-redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-provisioning-the-add-on&quot;&gt;2. Provisioning the add-on&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著要配置一台Redis server，有二個比較特別的參數，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hobby-dev: 這個是這台server的&lt;a href=&quot;http://elements.heroku.com/addons/heroku-redis&quot;&gt;Plan &amp;amp; Pricing&lt;/a&gt;，hobby-dev是免費的。&lt;/li&gt;
&lt;li&gt;sushi: 你的heroku app name&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku addons:create heroku-redis:hobby-dev -a sushi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
當你成功配置一台redis以後，你可以透過下面的指令找到該台redis URL，&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku config &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep REDIS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-connecting-in-python&quot;&gt;3. Connecting in Python&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;要在Python中使用Redis，你必須安裝&lt;code&gt;redis&lt;/code&gt;這個package，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install redis
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著就可以用這個&lt;code&gt;redis&lt;/code&gt;這個package連結至redis server，&lt;br&gt;
下面的example是用Flask這個framework來做示範，分別有&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;這二個URL。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;redis&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;REDIS_URL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/get&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;no such key in Redis&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Ken Yang&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;set done&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;/br&gt;&lt;/h2&gt;

&lt;h3 id=&quot;4-testing-in-local-environment&quot;&gt;4. Testing in local environment&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;如果你想要在local測試，需要把REDIS_URL的參數寫在.env裡面才行。&lt;br&gt;
否則會找不到Redis在哪。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku config:get REDIS_URL -s  &amp;gt;&amp;gt; .env
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;heroku &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android Fingerprint API</title>
   <link href="http://blog.kenyang.net/2015/12/12/android-fingerprint-api"/>
   <updated>2015-12-12T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/12/12/android-fingerprint-api</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;Google在Android 6.0中，釋放了對&lt;a href=&quot;http://developer.android.com/intl/zh-tw/reference/android/hardware/fingerprint/FingerprintManager.html&quot;&gt;Fingerprint&lt;/a&gt;操作的API，&lt;br&gt;
而最近剛好也買了Nexus 6P，因此有了機會來玩看看。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-androidmanifest-xml&quot;&gt;1. AndroidManifest.xml&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;首先要在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中設定permission，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.permission.USE_FINGERPRINT&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-check-requirement&quot;&gt;2. Check Requirement&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著要檢查device上，是否有fingerprint reader，以及是否有設置了至少一枚fingerprint。下面這段code，主要檢查了三件事情：  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;isKeyguardSecure&lt;/strong&gt; : 是否有設定screen lock&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isHardwareDetected&lt;/strong&gt; : device是否有fingerprint reader&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasEnrolledFingerprints&lt;/strong&gt; : 是否有設定至少一枚指紋&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyguardManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationSignal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyguardManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEYGUARD_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isKeyguardSecure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;Secure lock screen hasn&amp;#39;t set up.\n&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Go to &amp;#39;Settings -&amp;gt; Security -&amp;gt; Fingerprint&amp;#39; to set up a fingerprint&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHardwareDetected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;No Fingerprint reader&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasEnrolledFingerprints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;Go to &amp;#39;Settings -&amp;gt; Security -&amp;gt; Fingerprint&amp;#39; and register at least one fingerprint&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-authenticate&quot;&gt;3. Authenticate&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;如果通過上述的檢查之後，就可以透過&lt;code&gt;FingerprintManager&lt;/code&gt;進行&lt;code&gt;Authenticate&lt;/code&gt;的動作，method call為：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CryptoObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;CancellationSignal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一共要帶入5個參數，分別為：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CryptoObject&lt;/code&gt; : Android 6.0中crypto objects的wrapper class，可以透過它讓authenticate過程更為secure，但也可以不使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CancellationSignal&lt;/code&gt; : 用來Cancel &lt;em&gt;authenticate&lt;/em&gt;的object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt; : 只是一個flag，且目前只能代入0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AuthenticationCallback&lt;/code&gt; : callback來接受authenticate成功與否，有三個callback method，

&lt;ul&gt;
&lt;li&gt;onAuthenticationError&lt;/li&gt;
&lt;li&gt;onAuthenticationFailed&lt;/li&gt;
&lt;li&gt;onAuthenticationSucceeded &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handler&lt;/code&gt; : optional的參數，如果有使用，FingerprintManager會透過它來傳遞訊息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;了解參數以後就可以開始進行&lt;strong&gt;authenticate&lt;/strong&gt;，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAuthenticationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;error &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAuthenticationFailed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;onAuthenticationFailed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAuthenticationSucceeded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;onAuthenticationSucceeded&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;這樣就完成了一個簡單的example，但這example並沒有使用&lt;code&gt;CryptoObject&lt;/code&gt;，所以如果你想要更安全一點，記得請加上&lt;code&gt;CryptoObject&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Install zsh and oh-my-zsh on Mac</title>
   <link href="http://blog.kenyang.net/2015/12/11/install-zsh-oh-my-zsh-on-mac"/>
   <updated>2015-12-11T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/12/11/install-zsh-oh-my-zsh-on-mac</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;今天把mac上面的default shell換成&lt;code&gt;zsh&lt;/code&gt;，其實主要是看上了&lt;code&gt;oh-my-zsh&lt;/code&gt;，所以才想換成zsh。&lt;br&gt;
過程有點複雜，所以還是紀錄一下怎麼做。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-install-oh-my-zsh&quot;&gt;1. Install oh-my-zsh&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;由於mac預設就有zsh了，所以不需要安裝，只需要把default shell改成zsh即可。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著就安裝&lt;code&gt;oh-my-zsh&lt;/code&gt;，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-clone-cobalt2&quot;&gt;2. Clone cobalt2&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;首先先去clone &lt;code&gt;cobalt2&lt;/code&gt;下來，&lt;code&gt;cobalt2&lt;/code&gt;是人家寫的theme，裡面主要有二個theme，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;cobalt2.itermcolors&lt;/strong&gt; : 給iTerm用的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cobalt2.zsh-theme&lt;/strong&gt;   : 給zsh用的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/wesbos/Cobalt2-iterm.git  
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Cobalt2-iterm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv cobalt2.zsh-theme ~/.oh-my-zsh/themes/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
然後打開iterm，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;點選&lt;code&gt;Preferences&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Profiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;+&lt;/code&gt;按鈕新增一個Profile&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Colors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Load Presets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;選擇&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到剛剛clone下來的&lt;code&gt;cobalt2.itermcolors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點左下角的&lt;code&gt;Other Actions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;選擇&lt;code&gt;Set as default&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-install-font&quot;&gt;3. Install font&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;由於oh-my-zsh中的theme，用了一些特殊符號，所以必須安裝額外的font，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/powerline/fonts.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fonts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著一樣在打開iterm，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;點選&lt;code&gt;Preferences&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Profiles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點&lt;code&gt;Change Font&lt;/code&gt; （&lt;strong&gt;Regular&lt;/strong&gt;和&lt;strong&gt;Non-ASCII&lt;/strong&gt;都要改)&lt;/li&gt;
&lt;li&gt;選擇&lt;code&gt;inconsolata for powerline&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;4-變更theme&quot;&gt;4. 變更Theme&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著就可以把theme改成剛剛下載的cobalt2&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
然後把ZSH_THEME換成cobalt2&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ZSH_THEME=&amp;quot;cobalt2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後source一下，就完成了。
&lt;code&gt;bash
$ source ~/.zshrc
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;5-客製化&quot;&gt;5. 客製化&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;最後一步是客製化，如果你還是不喜歡cobalt2的theme，&lt;br&gt;
你還是可以更改，只要去編輯&lt;code&gt;~/.oh-my-zsh/themes/cobalt2.zsh-theme&lt;/code&gt;就好，&lt;br&gt;
打開以後，看到最下面，應該會有下面幾個function。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;## Main prompt&lt;/span&gt;
build_prompt&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#prompt_status&lt;/span&gt;
  prompt_context
  prompt_dir
  prompt_git
  prompt_end
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PROMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%{%f%b%k%}$(build_prompt) &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到我把&lt;code&gt;prompt_status&lt;/code&gt;就註解掉，因為我不想要prompt上有icon出現。&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JCConf Taiwan 2015   Day 2</title>
   <link href="http://blog.kenyang.net/2015/12/05/jcconf-taiwan-2015-day-2"/>
   <updated>2015-12-05T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/12/05/jcconf-taiwan-2015---day-2</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;這篇只是紀錄Java Community Conference 2015的第二天筆記，&lt;br&gt;
今天聽了以下幾個session，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;阿里 JVM 的工作方向&lt;/li&gt;
&lt;li&gt;Universal Scala&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Deploy your own Spark cluster in 4 minutes using sbt&lt;/li&gt;
&lt;li&gt;Immutable Infrastructure：觀念與實作 &lt;/li&gt;
&lt;li&gt;JDK8 JIT 行為和效能分析&lt;/li&gt;
&lt;li&gt;自己的JVM自己救 - 解救 OOM 實務經驗談 &lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;1-阿里-jvm-的工作方向&quot;&gt;1. 阿里 JVM 的工作方向&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;主要在說他為什麼從facebook回中國阿里雲，&lt;br&gt;
在fb調校php，在阿里雲調校jvm，&lt;br&gt;
在講在阿里雲裡的JVM心路歷程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;趙海平&lt;/li&gt;
&lt;li&gt;work @阿里雲&lt;/li&gt;
&lt;li&gt;previous work @FB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Coroutine&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like wait,notify in Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Java young generation, old generation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-universal-scala&quot;&gt;2. Universal Scala&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;在講怎麼用scala在frontend與backend上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Walter Chang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is universal?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isomorphic&lt;/li&gt;
&lt;li&gt;run the same code on both client and server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Functional language&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure functions &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;immutable 優點&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no need to handle synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;val is immutable (like final in Java)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var i: Int = 123&lt;/li&gt;
&lt;li&gt;var i = 123&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;var is mutable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;case class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Scala.js&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compile &lt;code&gt;Scala&lt;/code&gt; to &lt;code&gt;javascript&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example code&lt;/strong&gt;
- &lt;a href=&quot;https://github.com/weihsiu/universal.git&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-deploy-your-own-spark-cluster-in-4-minutes-using-sbt&quot;&gt;3. Deploy your own Spark cluster in 4 minutes using sbt.&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;介紹他們的tool（spark-deployer）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pishen Tsai&lt;/li&gt;
&lt;li&gt;Works @KKBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tool: spark-deployer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KKBOX/spark-deployer&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SBT plugin&lt;/li&gt;
&lt;li&gt;productively used in KKBOX&lt;/li&gt;
&lt;li&gt;100% scala&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Current Solutions to deploy Spark cluster&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;spark-ec2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缺點 

&lt;ul&gt;
&lt;li&gt;command 太多&lt;/li&gt;
&lt;li&gt;需要裝&lt;code&gt;sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要裝&lt;code&gt;ec2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;slow startup time (~20mins)&lt;/li&gt;
&lt;li&gt;一小時算一次錢，三分之一錢花在deploy上&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;要用spark-ec2的flow

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-spark-ec2-flow.jpg&quot; alt=&quot;flow&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;spark-ec2的command

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-spark-ec2-cmd.jpg&quot; alt=&quot;command&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;amazon emr (elastic map reduce)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缺點

&lt;ul&gt;
&lt;li&gt;command 太多&lt;/li&gt;
&lt;li&gt;需要裝&lt;code&gt;sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要裝&lt;code&gt;emr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;spark version is old&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;要用Amazon emr的flow

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-aws-emr-flow.jpg&quot; alt=&quot;flow&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;emr的cmd

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-aws-emr-cmd.jpg&quot; alt=&quot;cmd&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;spark-deployer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;優點

&lt;ul&gt;
&lt;li&gt;只需要安裝&lt;code&gt;sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fast and parallel startup (~4mins)&lt;/li&gt;
&lt;li&gt;Dynamic scale out&lt;/li&gt;
&lt;li&gt;Flexible design &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用Spark deployer的flow

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-spark-deployer-flow.jpg&quot; alt=&quot;flow&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用Spark deployer的cmd

&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/assets/2015-12-05-spark-deployer-cmd.jpg&quot; alt=&quot;cmd&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;sbt&lt;/li&gt;
&lt;li&gt;AWS_ACCESS_KEY_ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;4-immutable-infrastructure：觀念與實作&quot;&gt;4. Immutable Infrastructure：觀念與實作&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;葉秉哲&lt;/li&gt;
&lt;li&gt;Works @gogolook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;改題目&lt;/strong&gt; -&amp;gt; immutable infrastructure觀念與實作（建議）&lt;/p&gt;

&lt;p&gt;因為talk是在下午第一場，怕大家看code太想睡覺，所以就不講detail實作&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;演算法的領域也說，immutable 的東西會比 mutable 的東西來得好設計&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;why immutable objects&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simpler   to understand&lt;/li&gt;
&lt;li&gt;iherently thread-safe&lt;/li&gt;
&lt;li&gt;offer higher security than mutable objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;immutable object&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;java hotswap&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jdk 1.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Christian Posta said:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;don&amp;#39;t hotdeploy/redeploy/migrate your java service in production at runtime.&lt;br&gt;
do have a very trong focus on your delivery pipeline/automation/testing to quickly make change to your app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What&amp;#39;s an immutable infrastructure&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;quote from Docker 大神&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;re-create images each time you change a line of code.&lt;br&gt;
prevent modifications of running images.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why immutable infrastructure?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplify change management

&lt;ul&gt;
&lt;li&gt;hard to keep or restore &amp;quot;desired state&amp;quot; in place&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enforce &lt;code&gt;dev/prod&lt;/code&gt; parity

&lt;ul&gt;
&lt;li&gt;configure &amp;amp; test &lt;code&gt;infra&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; deployed to production environment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Reason about apps at a higher level

&lt;ul&gt;
&lt;li&gt;... than just &lt;code&gt;deployable pacakages&lt;/code&gt; containing the code (jar/war/zip/msi)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why &lt;code&gt;NOT&lt;/code&gt; immutable infrastructure?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost may be too high&lt;/li&gt;
&lt;li&gt;DevOps maturity level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;講者把image視為一種&lt;code&gt;母體&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
主要分為以下三種，  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VM image&lt;/li&gt;
&lt;li&gt;Container image&lt;/li&gt;
&lt;li&gt;Unikernel image

&lt;ul&gt;
&lt;li&gt;對現有container技術有一個比較激進的改良&lt;/li&gt;
&lt;li&gt;傳統的vm，架構在hypervisor上，也打包一個os在裡面&lt;/li&gt;
&lt;li&gt;docker不打包，但會共用底下os的東西，有安全性考量&lt;/li&gt;
&lt;li&gt;所以有了&lt;code&gt;container per VM&lt;/code&gt;，但還是太肥了。&lt;/li&gt;
&lt;li&gt;把作業系統也看成lib，不會把所有os通通包進來，只抽取它要的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://boxfuse.com/&quot;&gt;boxfuse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;母體 =&amp;gt; 增生 =&amp;gt; 替換 =&amp;gt; 自動化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;5-jdk8-jit-行為和效能分析&quot;&gt;5. JDK8 JIT 行為和效能分析&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;這個session是Jserv在講，&lt;br&gt;
聽過Jserv演講過幾次，&lt;br&gt;
也曾經在去旁聽過，他在台大講的Android Open Source，&lt;br&gt;
給我的印象就是高手、講話很快、講話很有梗的。&lt;br&gt;
其實我原本要去聽別場的&lt;code&gt;MySQL Connector/J&lt;/code&gt;，但一方面覺得實在太累了，&lt;br&gt;
懶得換room，又想輕鬆一點，聽一下Jserv講講笑話，&lt;br&gt;
Jserv一樣講得很專業，但真的是不同領域，幾乎都聽不懂。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jserv&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;topic&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How JIT works?&lt;/li&gt;
&lt;li&gt;How to monitor the JIT?&lt;/li&gt;
&lt;li&gt;How to figure out performance problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;jserv自己準備的共筆&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jcconf.hackpad.com/R0-13PeQD5hpDx#:h=JDK8-JIT-%E8%A1%8C%E7%82%BA%E5%92%8C%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90&quot;&gt;url&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;hotspot&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; template based interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jserv Said:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;作業我自己改，門我自己開，助教負責笑&lt;br&gt;&lt;/li&gt;
&lt;li&gt;台灣什麼東西都可以靠北&lt;/li&gt;
&lt;li&gt;靠北JVM&lt;/li&gt;
&lt;li&gt;怕沒人寫hackpad共筆，所以我自己寫&lt;/li&gt;
&lt;li&gt;在聯發科工作的時候，大家都是看安兔兔的benchmark買手機&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;JVM如何支援動態語言&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;invokedynamic

&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;java裡的method都是&lt;code&gt;ivnokevirtual&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;匿名class本質上會生出另一個class，inner class，和lambda不一樣&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;6-自己的jvm自己救-解救-oom-實務經驗談&quot;&gt;6. 自己的JVM自己救 - 解救 OOM 實務經驗談&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;這場我聽到放空了，不過前半段內容，大致上我都是先前就知道的。&lt;br&gt;
例如：stack, heap差別...etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shallow heap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retained heap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;參加完，不能說在知識上收穫很多，&lt;br&gt;
但反而是一種開眼界的感覺，會覺得人外有人，天外有天，&lt;br&gt;
覺得自己還得更加努力才行。&lt;/p&gt;

&lt;p&gt;還想推薦一下MySQL的speaker (Ivan Tu)，雖然沒有去聽他的talk，&lt;br&gt;
但在休息時間時，去到MySQL攤位，都會聽到他很熱情地講解。&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JCConf Taiwan 2015   Day 1</title>
   <link href="http://blog.kenyang.net/2015/12/04/jcconf-taiwan-2015-day-1"/>
   <updated>2015-12-04T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/12/04/jcconf-taiwan-2015---day-1</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-12-04-ticket.jpg&quot; alt=&quot;Ticket&quot;&gt;&lt;/p&gt;

&lt;p&gt;這篇只是紀錄Java Community Conference 2015的第一天筆記，&lt;br&gt;
今天聽了以下幾個session，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JRuby&lt;/li&gt;
&lt;li&gt;Asynchronous and Non-blocking in Scala&lt;/li&gt;
&lt;li&gt;使用zookeeper打造軟體式負載平衡&lt;/li&gt;
&lt;li&gt;workshop動手玩Java專案建置工具：以Gradle與Docker為例&lt;/li&gt;
&lt;li&gt;Akka Cluster in Java&lt;/li&gt;
&lt;li&gt;使用Java的Future/Promise API來撰寫非同步程式&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;1-jruby&quot;&gt;1. JRuby&lt;/h3&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Charles Oliver Nutter&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mailto:headius@headius.com&quot;&gt;headius@headius.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;blog.headius.com&lt;/li&gt;
&lt;li&gt;works at RedHat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ruby&quot;&gt;ruby&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;everything is Object. no primitive integer.&lt;/li&gt;
&lt;li&gt;invokeinterface

&lt;ul&gt;
&lt;li&gt;Runnable.run();&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;invokespecial

&lt;ul&gt;
&lt;li&gt;super.equals();&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;invokevirtual&lt;br&gt;&lt;/li&gt;
&lt;li&gt;invokestatic

&lt;ul&gt;
&lt;li&gt;System.currentMill();&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;invokedynamic

&lt;ul&gt;
&lt;li&gt;*Released in Java7&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby == Unix, but java == java everywhere

&lt;ul&gt;
&lt;li&gt;Ruby has getpwd(), getpid()...etc.&lt;/li&gt;
&lt;li&gt;but java has no these capability.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JNI 

&lt;ul&gt;
&lt;li&gt;Speaker doesn&amp;#39;t like it.&lt;/li&gt;
&lt;li&gt;you need to implement a feature for each platform (win, mac, linux)

&lt;ul&gt;
&lt;li&gt;ex: if you want to get pid() in java.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JNR

&lt;ul&gt;
&lt;li&gt;Speaker use JNR.&lt;/li&gt;
&lt;li&gt;there are many impelmentations in JNR.&lt;/li&gt;
&lt;li&gt;POSIX posix = POSIXFactory.getPostfix(xxxxx);&lt;br&gt;&lt;/li&gt;
&lt;li&gt;posix.getpid()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;project-panama&quot;&gt;Project panama&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Panama in JVM for java 9, api in java 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why-use-jvm&quot;&gt;why use JVM?&lt;/h4&gt;

&lt;p&gt;someone ask why not use standard ruby?
author answer: hard to implement JIT.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2-asynchronous-and-non-blocking-in-scala&quot;&gt;2. Asynchronous and Non-blocking in Scala&lt;/h3&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;I/O is very slow, so we need aysnc and non-blocking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nio&quot;&gt;NIO&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;not use thread to do operation. have a subsystem will handle it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pure-function&quot;&gt;pure function&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;no side effects&lt;/li&gt;
&lt;li&gt;no write db or file&lt;/li&gt;
&lt;li&gt;the output will be the same at each time&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;val-vs-var&quot;&gt;val vs var&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;val is immutable&lt;/li&gt;
&lt;li&gt;var is mutable&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;case-object&quot;&gt;case object&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;singleton in Java. there is no static in Scala.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;3-使用zookeeper打造軟體式負載平衡&quot;&gt;3. 使用zookeeper打造軟體式負載平衡&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;這個session主要在介紹zookeeper，由於時間很短，只有15分鐘。&lt;br&gt;
所以都是講很high level，並沒有講到detail的實作。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;4-workshop動手玩java專案建置工具：以gradle與docker為例&quot;&gt;4. workshop動手玩Java專案建置工具：以Gradle與Docker為例&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;這個session在介紹他們team是怎麼用&lt;code&gt;docker&lt;/code&gt;建立test env，&lt;br&gt;
然後再透過&lt;code&gt;Geb&lt;/code&gt;去進行automation，&lt;br&gt;
主要提供了以下二個docker images讓我們練習測試，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;client：vvoyer/docker-selenium-firefox-chrome&lt;/li&gt;
&lt;li&gt;main：groovy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由於我對於&lt;code&gt;docker&lt;/code&gt;算是瞭解，因此這個session沒有全部聽完就先去趕場了。&lt;br&gt;
簡單的說，整個流程就是先透過docker叫起&lt;code&gt;client&lt;/code&gt;，&lt;br&gt;
之後再叫起&lt;code&gt;main&lt;/code&gt;來對&lt;code&gt;client&lt;/code&gt;進行測試。&lt;/p&gt;

&lt;h3 id=&quot;resource&quot;&gt;Resource&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TrunkWorkshop/jcconf-2015-java-docker&quot;&gt;Git repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackpad.com/JCConf-Taiwan-2015-Workshop-lKcJEMyjraR&quot;&gt;Hackpad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-swarm&quot;&gt;docker-swarm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;簡化docker指令&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;geb&quot;&gt;geb&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://learngeb.readbook.tw/&quot;&gt;http://learngeb.readbook.tw/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;functional test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;5-akka-cluster-in-java&quot;&gt;5. Akka Cluster in Java&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jiayun/akka_samples&quot;&gt;Git repo for Akka cluster example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;6-使用java的future-promise-api來撰寫非同步程式&quot;&gt;6. 使用Java的Future/Promise API來撰寫非同步程式&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;前陣子也剛好在研究&lt;code&gt;CompletableFuture&lt;/code&gt;，&lt;br&gt;
所以這是今天最有共鳴的一場session，&lt;/p&gt;

&lt;h3 id=&quot;speaker&quot;&gt;Speaker&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;koji&lt;/li&gt;
&lt;li&gt;work at Line (located at Japan)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;傳統做法開thread&quot;&gt;傳統做法開thread&lt;/h4&gt;

&lt;p&gt;thread缺點  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;需要配合synchronized, wait, notify, join&lt;br&gt;&lt;/li&gt;
&lt;li&gt;不同thread如何存取同變數&lt;/li&gt;
&lt;li&gt;如何控管&lt;/li&gt;
&lt;li&gt;不易組合和再利用&lt;/li&gt;
&lt;li&gt;組合各種非同步方法，會變成callback hell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;講者說：這個年代請不要再直接使用thread api&lt;/p&gt;

&lt;h4 id=&quot;future&quot;&gt;Future&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一個等待結果的容器&lt;/li&gt;
&lt;li&gt;get會卡住！！&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;completablefuture&quot;&gt;CompletableFuture&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;類似有callback概念，做完動作以後，通知我，我再繼續做想做的事情&lt;/li&gt;
&lt;li&gt;get會丟exception，可以用join &lt;/li&gt;
&lt;li&gt;supplyAsync可以指定executorService，如果沒給，就會用forkjoin裡的tool。&lt;/li&gt;
&lt;li&gt;盡量要給！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CF&amp;lt;CF&amp;lt;string&amp;gt;&amp;gt; c&lt;/code&gt; 不好，要get 2次 ex: &lt;code&gt;c.get().get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;請用.thenCompose, 回傳也是completeablefutre的時候，就不用get 2次，像是scala的flatmap，&lt;/li&gt;
&lt;li&gt;優點

&lt;ul&gt;
&lt;li&gt;event driven&lt;/li&gt;
&lt;li&gt;容易組合 (easy to compose)&lt;/li&gt;
&lt;li&gt;控制權還給呼叫者&lt;/li&gt;
&lt;li&gt;減少thread的浪費，沿用thread繼續做之類的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;缺點

&lt;ul&gt;
&lt;li&gt;future/promise的混合，不少語言都分開坐 &lt;/li&gt;
&lt;li&gt;爆多的方法數量 60+&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注意

&lt;ul&gt;
&lt;li&gt;雖然有future，但cancel跟future不一樣，completablefutre不能interrupt。&lt;/li&gt;
&lt;li&gt;不能取消正在執行的工作&lt;/li&gt;
&lt;li&gt;盡量使用Async語尾的API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;7-other&quot;&gt;7. Other&lt;/h3&gt;

&lt;hr&gt;

&lt;h4 id=&quot;攤位sudo&quot;&gt;攤位sudo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;yvette lin 曾經做過創投&lt;/li&gt;
&lt;li&gt;就專業的人力資源公司，但focus on RD&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位mysql&quot;&gt;攤位mysql&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;speaker很專業&lt;/li&gt;
&lt;li&gt;詢問了master與master的架構時，當replication發生error時，通常得取捨一台，必定有資料會遺失，該怎麼辦？

&lt;ul&gt;
&lt;li&gt;回答：透過讓&lt;code&gt;master&lt;/code&gt;等待的機制，然後取回binlog回來至&lt;code&gt;slave&lt;/code&gt;，partially updated&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;還介紹了MySQL Enterprise Monitor

&lt;ul&gt;
&lt;li&gt;有圖形化介面讓admin看究竟哪些sql command花最久&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;還賺到了一隻MySQL的海豚玩偶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-12-04-mysql-dophin.jpg&quot; alt=&quot;Ticket&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;攤位微軟&quot;&gt;攤位微軟&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;介紹Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位kxxxx-banking&quot;&gt;攤位Kxxxx banking&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;在做財務管理系統&lt;/li&gt;
&lt;li&gt;在徵人，要&lt;code&gt;java&lt;/code&gt;，前端用&lt;code&gt;extJS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位ruckus&quot;&gt;攤位ruckus&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;主要做無線網路設備&lt;/li&gt;
&lt;li&gt;也是Java&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位safari-book-online&quot;&gt;攤位safari book online&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;線上遊覽書籍之類的網站 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.safaribooksonline.com/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;晚上的lightning-show&quot;&gt;晚上的lightning show&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ruckus的人出來送價值6000元的ap，很幸運地被我同事拿到&lt;/li&gt;
&lt;li&gt;中鋼的人來分享他們內部系統心路歷程&lt;/li&gt;
&lt;li&gt;linkedin員工來分享在那工作的第一個月 （其實是fliptop的員工，但被linkedin收購）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;foods-and-drinks&quot;&gt;Foods and Drinks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;大概是我參加過所有conf吃最好的吧，晚上還有烤山豬肉可以吃&lt;/li&gt;
&lt;li&gt;飲料是金色三麥贊助&lt;/li&gt;
&lt;li&gt;茶也是知名廠商&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a iSCSI target on Ubuntu</title>
   <link href="http://blog.kenyang.net/2015/12/01/create-a-iscsi-target-on-ubuntu"/>
   <updated>2015-12-01T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/12/01/create-a-iscsi-target-on-ubuntu</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;
這篇會介紹如何在Ubuntu上，建立一個iSCSI Target Server，&lt;br&gt;
提供給別人測試使用。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;install-tgt&quot;&gt;Install tgt&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;首先要先安裝tgt這個package。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get install tgt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-virtual-disks&quot;&gt;Create virtual disks&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;這裡會用&lt;code&gt;dd&lt;/code&gt;來建立幾個假的block device，&lt;br&gt;
待會就把devices加入到iSCSI中。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/iscsi-disk1 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/iscsi-disk2 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-targets&quot;&gt;Create targets&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;這裡建立了2個target，分別為，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iqn.2015-07.net.kenyang:ken.iscsi.1&lt;/li&gt;
&lt;li&gt;iqn.2015-07.net.kenyang:ken.iscsi.2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op new --mode target --tid &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -T iqn.2015-07.net.kenyang:ken.iscsi.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op new --mode target --tid &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -T iqn.2015-07.net.kenyang:ken.iscsi.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-lun&quot;&gt;Create LUN&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;然後替上面的2個target各加入一個LUN。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --mode logicalunit --op new --tid &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; --lun &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -b /var/tmp/iscsi-disk1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --mode logicalunit --op new --tid &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; --lun &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -b /var/tmp/iscsi-disk2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;enable-the-target-to-accept-any-initiators&quot;&gt;Enable the target to accept any initiators&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;如果你想要讓你的target，&lt;br&gt;
可以讓任何人連，不需要密碼，&lt;br&gt;
就可以用下面的指令。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --mode target --tid &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -I ALL
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --mode target --tid &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; -I ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-user&quot;&gt;Create user&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;如果你想要讓你的target，有credential才能連，&lt;br&gt;
那就要create user，以及把user bind在某個target上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --mode account --op new --user safesync --password safesync
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tgtadm --mode account --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --tid &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; --user safesync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;show-configuration&quot;&gt;Show configuration&lt;/h4&gt;

&lt;hr&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ tgtadm --lld iscsi --mode target --op show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to use NodeJS &amp; MongoDB with Docker?</title>
   <link href="http://blog.kenyang.net/2015/11/30/how-to-use-nodejs-mongodb-with-docker"/>
   <updated>2015-11-30T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/11/30/how-to-use-nodejs--mongodb-with-docker</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;這篇會講如何在Docker上部署一個NodeJS+MongoDB的application，&lt;br&gt;
所以會分二個部分來講，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在Docker上部署MongoDB&lt;/li&gt;
&lt;li&gt;在Docker上部署NodeJS+Express&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-在docker上部署mongodb&quot;&gt;1. 在Docker上部署MongoDB&lt;/h3&gt;

&lt;p&gt;要在Docker上部署MongoDB，首先要先在local machine上建立一個folder，&lt;br&gt;
這個folder是待會要mapping到container裡面的volume，&lt;br&gt;
然後MongoDB上的data都會存在這個volume上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir ~/monogo-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-a-container&quot;&gt;Create a container&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;接著就可以把MongoDB的image抓下來以及run。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull mongo:latest
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -v ~/mongo-data:/data &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
             --name ken-mongo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             mongo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             mongod --smallfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;connect-to-a-container&quot;&gt;Connect to a container&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;那麼怎麼連進去這個MongoDB呢？&lt;br&gt;
有二種方式，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過另外一個container，用&lt;code&gt;link&lt;/code&gt;的方法&lt;/li&gt;
&lt;li&gt;透過&lt;code&gt;docker exec&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們先講第二種方法，&lt;br&gt;
因為第一種方法，待會會透過NodeJS的container來示範。&lt;br&gt;
我們透過&lt;code&gt;exec&lt;/code&gt;，然後用參數&lt;code&gt;-it&lt;/code&gt;與ken-mongo進行互動，&lt;br&gt;
進去以後在再試試看create db以及新增一筆資料至table student之中。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it ken-mongo bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;use school
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;db.student.insert&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;ken&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;db.student.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-在docker上部署nodejs-express&quot;&gt;2. 在Docker上部署NodeJS+Express&lt;/h3&gt;

&lt;p&gt;首先先建立一個folder，用來放置source code以及json等檔案。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-app
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd test&lt;/span&gt;-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;package-json&quot;&gt;Package.json&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;接著在&lt;code&gt;test-app&lt;/code&gt;這個folder底下，建立一個&lt;code&gt;package.json&lt;/code&gt;，&lt;br&gt;
&lt;code&gt;package.json&lt;/code&gt;是用來定義這個app的dependcies以及一些基本資料。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;node-centos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;private&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Node.js on CentOS using docker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ken Yang &amp;lt;ken@kenyang.net&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;express&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3.2.4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;mongoose&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.2.8&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;從上面的&lt;code&gt;package.json&lt;/code&gt;中，我們在&lt;code&gt;dependencies&lt;/code&gt;裡有二個packages，&lt;br&gt;
分別是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;express&lt;/code&gt;  : Web framework&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mongoose&lt;/code&gt; : MongoDB client driver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;schema-js&quot;&gt;Schema.js&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;接著一樣在&lt;code&gt;test-app&lt;/code&gt;底下，建立一個&lt;code&gt;Schema.js&lt;/code&gt;，&lt;br&gt;
&lt;code&gt;Schema.js&lt;/code&gt;是用來定義你的MongoDB的schema。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mongoose&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Student&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;index-js&quot;&gt;Index.js&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;接著一樣在&lt;code&gt;test-app&lt;/code&gt;底下，建立一個&lt;code&gt;index.js&lt;/code&gt;，&lt;br&gt;
&lt;code&gt;index.js&lt;/code&gt;就是待會這個app的進入點。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mongoose&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./schema&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Student&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mongodb://db:27017&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mongodb://xxx.xxx.xxx.xxx:27017&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello world\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/insert&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Running on http://localhost:&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的範例有個比較重要的地方，需要說明一下，&lt;br&gt;
首先看到&lt;code&gt;mongoose.connect( &amp;#39;mongodb://db:27017&amp;#39; );&lt;/code&gt;，&lt;br&gt;
我們是connect至&lt;code&gt;db&lt;/code&gt;這個host去，&lt;br&gt;
這個&lt;code&gt;db&lt;/code&gt;是怎麼來的？&lt;br&gt;
是待會會透過&lt;code&gt;--link&lt;/code&gt;的指令指定的，&lt;br&gt;
一旦你指定了，就會在container中的&lt;code&gt;/etc/hosts&lt;/code&gt;裡面增加一筆record。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;dockerfile&quot;&gt;DockerFile&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;接著建立&lt;code&gt;DockerFile&lt;/code&gt;，&lt;br&gt;
&lt;code&gt;DockerFile&lt;/code&gt;就像是&lt;code&gt;makefile&lt;/code&gt;一樣，用來定義如何build這個image。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;FROM    centos:centos6

# Enable Extra Packages for Enterprise Linux (EPEL) for CentOS
RUN     yum install -y epel-release
# Install Node.js and npm
RUN     yum install -y nodejs npm

# Install app dependencies
COPY package.json /src/package.json
RUN cd /src; npm install

# Bundle app source
COPY . /src

ENV NODE_ENV dev

EXPOSE  8080
CMD [&amp;quot;node&amp;quot;, &amp;quot;/src/index.js&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裡面比較需要注意的是， &lt;code&gt;ENV NODE_ENV dev&lt;/code&gt;，&lt;br&gt;
這個是用來設置環境變數，因為我們設定了&lt;code&gt;dev&lt;/code&gt;，&lt;br&gt;
所以在&lt;code&gt;index.js&lt;/code&gt;中，才會去configure dev。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;build-image-amp-run&quot;&gt;Build image &amp;amp; Run&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;有了&lt;code&gt;DockerFile&lt;/code&gt;以後，就可以來build以及run了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker build -t ken-yang/centos-nodejs:v1 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
Build完以後，就可以用下面的指令去把container run起來。&lt;br&gt;
注意&lt;code&gt;--link ken-mongo:db&lt;/code&gt;，&lt;br&gt;
意思就是把現在正在running的&lt;code&gt;ken-mongo&lt;/code&gt;與現在這個新的container連起來。&lt;br&gt;
以及給它一個alias &lt;code&gt;db&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             --name ken-node &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             -p 80:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             --link ken-mongo:db &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             ken-yang/centos-nodejs:v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;test&quot;&gt;Test&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;最後用&lt;code&gt;curl&lt;/code&gt;來發request測試，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -X POST -d &lt;span class=&quot;s1&quot;&gt;&amp;#39;name=kenyang&amp;#39;&lt;/span&gt; 192.168.99.100/insert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後可以再去看是否有新增成功，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker -exec -it ken-mongo bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;db.students.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to resize a LVM partition?</title>
   <link href="http://blog.kenyang.net/2015/11/27/how-to-extendreduce-lvm"/>
   <updated>2015-11-27T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/11/27/how-to-extendreduce-lvm</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;&lt;/p&gt;

&lt;p&gt;這篇算是延續&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;的主題，假設VG裡面還有free space尚未用到，&lt;br&gt;
那麼過一段時間以後，該怎麼把它拿出來用?&lt;br&gt;
所以這篇主要會講到下面2個主題：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extend&lt;/li&gt;
&lt;li&gt;Shrink&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-extend&quot;&gt;1. Extend&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;Extend會講二種方法，分別為，  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1-1. Extend from &lt;code&gt;VG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1-2. Extend from &lt;code&gt;new disk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-extend-from-pv&quot;&gt;1-1. Extend from PV&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;第一種是延續&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;，&lt;br&gt;
從既有的VG中，把Free PE加入到LV中，&lt;br&gt;
以&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;來看，你的VG應該還會剩下60GB。&lt;br&gt;
可以用下面的指令&lt;code&gt;vgs&lt;/code&gt;去看VG中剩下多少free PE，&lt;br&gt;
最後一欄的&lt;code&gt;VFree&lt;/code&gt;就是指剩下的free PE，&lt;br&gt;
以我的機器為範例，裡面還有829.99G，&lt;br&gt;
以及我有5個LV。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ vgs
  VG        #PV #LV #SN Attr   VSize    VFree
  ubuntu-vg   1   5   0 wz--n- 1019.76g 829.99g

$ lvs
  LV     VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert
  db     ubuntu-vg -wi-ao  83.92g
  log    ubuntu-vg -wi-ao  19.07g
  root   ubuntu-vg -wi-ao  66.75g
  swap_1 ubuntu-vg -wi-ao 976.00m
  tmp    ubuntu-vg -wi-ao  19.07g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;

&lt;p&gt;假設我要讓&lt;code&gt;tmp&lt;/code&gt;這個LV加大100G，我們可以透過以下二個指令完成，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;lvresize&lt;/li&gt;
&lt;li&gt;resize2fs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/br&gt;
使用方式如下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lvresize -L +100G /dev/mapper/ubuntu--vg-tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
完成上述指令以後，可以再透過&lt;code&gt;lvs&lt;/code&gt;來看一下tmp這個LV是否真的有加大100G。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lvs
  LV     VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert
  db     ubuntu-vg -wi-ao  83.92g
  log    ubuntu-vg -wi-ao  19.07g
  root   ubuntu-vg -wi-ao  66.75g
  swap_1 ubuntu-vg -wi-ao 976.00m
  tmp    ubuntu-vg -wi-ao 119.07g

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;df -h /tmp/
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/ubuntu--vg-tmp   19G   44M   18G   1% /tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
根據上面的output，你會發現&lt;code&gt;LV&lt;/code&gt;真的有加大100G，&lt;br&gt;
可是&lt;code&gt;df&lt;/code&gt;中的filesystem size並沒有變動，&lt;br&gt;
因為少用了&lt;code&gt;resize2fs&lt;/code&gt;。&lt;br&gt;
&lt;code&gt;resize2fs&lt;/code&gt;作用就是把filesystem變大。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;resize2fs /dev/mapper/ubuntu--vg-tmp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;119G&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後一個是size的參數，其實可以不用加，&lt;br&gt;
如果不加，就是用整個LV可以用的空間。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-extend-from-new-disk&quot;&gt;1-2. Extend from new disk&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;第二種Extend的方法是把新disk來加入至lv中。&lt;br&gt;
其實步驟跟上述差不多，只是多了一些準備作業，&lt;br&gt;
準備作業如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;新增 &lt;code&gt;PV&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;新PV&lt;/code&gt; 加入至 &lt;code&gt;VG&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先你要有一顆硬碟，&lt;br&gt;
然後用&lt;code&gt;lsblk&lt;/code&gt;找到該block device的名稱，&lt;br&gt;
我機器上的新硬碟就是sdb。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsblk -d
NAME MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
fd0    2:0    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;     4K  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; disk
sda    8:0    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;  1020G  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; disk
sdb    8:16   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;   200G  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;在新增一個&lt;code&gt;PV&lt;/code&gt;前，&lt;br&gt;
必須先format disk成LVM的格式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fdsik /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後請按照下面的步驟去create，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;按下&lt;code&gt;n&lt;/code&gt;以建立新的partition&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;p&lt;/code&gt;選擇primary partition&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;1&lt;/code&gt;選擇partition number&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;enter&lt;/code&gt;選擇Default first sector&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;enter&lt;/code&gt;選擇Default last sector&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;t&lt;/code&gt;改變partition type&lt;/li&gt;
&lt;li&gt;輸入&lt;code&gt;8e&lt;/code&gt;, 8e為LVM的代碼&lt;/li&gt;
&lt;li&gt;按下&lt;code&gt;w&lt;/code&gt;儲存寫入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完成以後你就有一個新的partition了，名稱應該為&lt;code&gt;sdb1&lt;/code&gt;，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fdisk -l /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
這時候就可以用&lt;code&gt;pvcreate&lt;/code&gt;來新增一個PV，&lt;br&gt;
然後再用&lt;code&gt;pvs&lt;/code&gt;看看是否有成功。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; pvcreate /dev/sdb1

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pvs
  PV         VG        Fmt  Attr PSize    PFree
  /dev/sda5  ubuntu-vg lvm2 a-   1019.76g 629.99g
  /dev/sdb1            lvm2 a-    200.00g 200.00g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著就可以用&lt;code&gt;vgextend&lt;/code&gt;這個指令，&lt;br&gt;
把剛剛新增的&lt;code&gt;PV&lt;/code&gt;加入至原有的&lt;code&gt;ubuntu-vg&lt;/code&gt;當中，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vgextend ubuntu-vg /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
然後一樣用&lt;code&gt;vgs&lt;/code&gt;去看看&lt;code&gt;Free PE&lt;/code&gt;，應該會多了200g。&lt;br&gt;
然後就可以用上面的&lt;code&gt;lvresize&lt;/code&gt;以及&lt;code&gt;resize2fs&lt;/code&gt;去Extend某個LV了。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-shrink&quot;&gt;2. Shrink&lt;/h3&gt;

&lt;hr&gt;

&lt;p&gt;接著要來講Shrink的部分，&lt;br&gt;
其實Shrink也是透過&lt;code&gt;lvresize&lt;/code&gt;以及&lt;code&gt;resize2fs&lt;/code&gt;來完成。&lt;br&gt;
但Shrink和Extend有以下幾點的差別：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不能online shrinking&lt;/li&gt;
&lt;li&gt;要先縮filesytem，再縮LVM&lt;/li&gt;
&lt;li&gt;Data有可能會遺失&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那因為不能online shrinking，所以我們要先umount，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;umount /tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
接著才可以shrink filesystem，&lt;br&gt;
透過&lt;code&gt;resize2fs&lt;/code&gt;去把&lt;code&gt;tmp&lt;/code&gt;縮到19G。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;resize2fs /dev/mapper/ubuntu--vg-tmp 19G
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;最後才是去shrink LV，一樣是用&lt;code&gt;lvresize&lt;/code&gt;去做，&lt;br&gt;
過程中會show warning，告訴你資料可能會遺失，是否真的要做shrink？&lt;br&gt;
如果沒有什麼疑慮，就按下&lt;code&gt;y&lt;/code&gt;吧！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lvresize -L -100G /dev/mapper/ubuntu--vg-tmp
  WARNING: Reducing active logical volume to 19.07 GiB
  THIS MAY DESTROY YOUR DATA &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;filesystem etc.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Do you really want to reduce tmp? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;: y
  Reducing logical volume tmp to 19.07 GiB
  Logical volume tmp successfully resized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;
最後在mount起來，以及用&lt;code&gt;df&lt;/code&gt;去看，&lt;br&gt;
應該會發現&lt;code&gt;tmp&lt;/code&gt;只剩下19G了！&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mount /tmp

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;df -h /tmp
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/ubuntu--vg-tmp   19G   44M   18G   1% /tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do not allocate all the LVM space with preseed</title>
   <link href="http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed"/>
   <updated>2015-11-27T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;
使用Preseed file分割LVM時，&lt;br&gt;
並無法做到只使用某部分的VG就好，&lt;br&gt;
舉例來說，假設你有一個100G的硬碟，&lt;br&gt;
然後preseed file如下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;d-i partman-auto/expert_recipe string  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      boot-root ::                                                  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; root &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; / &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                               &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /var/log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我們分別給每個lv的大小為：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt; : 20G&lt;/li&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt;  : 20G&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可能會以為，剩下的60G不會被加到LV裡面，&lt;br&gt;
但其實剩下的60G會通通被放到log裡面去。  &lt;/p&gt;

&lt;p&gt;不過有比較tricky的解法，可以參考下面的Preseed file，&lt;br&gt;
我們多增加了一個LV，叫做&lt;code&gt;to_be_free&lt;/code&gt;，&lt;br&gt;
然後把所有的free space都指派給&lt;code&gt;to_be_free&lt;/code&gt;，&lt;br&gt;
最後在&lt;code&gt;late_command&lt;/code&gt;裡，用&lt;code&gt;lvremove&lt;/code&gt;把&lt;code&gt;to_be_free&lt;/code&gt;砍掉，&lt;br&gt;
這樣就可以做到把某部分space歸還了。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;d-i partman-auto/expert_recipe string  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      boot-root ::                                                  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; root &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; / &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                               &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20480&lt;/span&gt; ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /var/log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; -1 ext4                                          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; to_be_free &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /to_be_free &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

d-i preseed/late_command string &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
umount /target/to_be_free/ &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
lvremove -f /dev/*/*to_be_free &amp;gt; /dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
sed -i &lt;span class=&quot;s1&quot;&gt;&amp;#39;/to_be_free/d&amp;#39;&lt;/span&gt; /target/etc/fstab &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何把Google Blogger搬到Github pages</title>
   <link href="http://blog.kenyang.net/2015/11/26/move-blogger-to-github"/>
   <updated>2015-11-26T00:00:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/11/26/move-blogger-to-github</id>
   <content type="html">&lt;p&gt;&lt;font size=3&gt;
最近一直很想從Google Blogger中離家出走，因為在blogger寫筆記實在太麻煩了，&lt;br&gt;
每一個筆記的format每次都調得好累，&lt;br&gt;
且我很常在local寫一份markdown，&lt;br&gt;
這樣等於我要寫二次..  &lt;/p&gt;

&lt;p&gt;所以就動起了念頭要搬到一個支援markdown格式的地方。&lt;br&gt;
那我選的是github pages，然後搭配著jekyll這個tool去做publish。&lt;br&gt;
所以這篇會圍繞在下面的主題，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立github repo&lt;/li&gt;
&lt;li&gt;用jekyll-bootstrap建立一個template&lt;/li&gt;
&lt;li&gt;用jekyll-import把blogger資料匯出與匯入&lt;/li&gt;
&lt;li&gt;安裝jekyll&lt;/li&gt;
&lt;li&gt;安裝jekyll-paginate&lt;/li&gt;
&lt;li&gt;整合Google Adsense&lt;/li&gt;
&lt;li&gt;整合comment system&lt;/li&gt;
&lt;li&gt;整合Google Analytics&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;1-建立github-repo&quot;&gt;1. 建立github repo&lt;/h2&gt;

&lt;p&gt;首先要先去&lt;a href=&quot;https://github.com/new&quot;&gt;github&lt;/a&gt;的網站建立一個新的repo，&lt;br&gt;
repo名稱為&lt;code&gt;your_name.github.io&lt;/code&gt;，&lt;br&gt;
所以我的就是&lt;code&gt;ken-yang.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt; &lt;/p&gt;

&lt;h2 id=&quot;2-jekyll-bootstrap&quot;&gt;2. jekyll-bootstrap&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;jekyll-bootstrap&lt;/a&gt;是一個線上工具，&lt;br&gt;
可以讓你快速地建立一個template，&lt;br&gt;
然後這個template是以boostrap為基底。&lt;br&gt;
使用方式如下（記得把&lt;code&gt;USERNAME&lt;/code&gt;換成你的&lt;code&gt;your_name&lt;/code&gt;)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@github.com:USERNAME/USERNAME.github.ui.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著你就可以去&lt;code&gt;USERNAME.github.io&lt;/code&gt;看看，應該會有default的index。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt; &lt;/p&gt;

&lt;h2 id=&quot;3-jekyll-import-（匯出與匯入）&quot;&gt;3. jekyll-import （匯出與匯入）&lt;/h2&gt;

&lt;p&gt;接著我們要把原本在google blogger上的資料轉出來，&lt;br&gt;
這裡使用&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;這個tool。
安裝&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;之前，&lt;br&gt;
如果你是用MAC，請先安裝xcode，&lt;br&gt;
如果是用linux，請先安裝make。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n jekyll-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝成功以後，去google blogger的後台把文章通通export出來。&lt;br&gt;
然後再terminal執行下面的指令，&lt;br&gt;
記得把&lt;code&gt;/path/to/blog-MM-DD-YYYY.xml&lt;/code&gt;換成對應的位置。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -rubygems -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;require &amp;quot;jekyll-import&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    JekyllImport::Importers::Blogger.run({&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;source&amp;quot;                =&amp;gt; &amp;quot;/path/to/blog-MM-DD-YYYY.xml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;no-blogger-info&amp;quot;       =&amp;gt; false, # not to leave blogger-URL info (id and old URL) in the front matter&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;replace-internal-link&amp;quot; =&amp;gt; false, # replace internal links using the post_url liquid tag.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    })&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著會產生二個資料夾，分別為&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_posts&lt;/code&gt; 放文章的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_draft&lt;/code&gt; 放草稿的地方&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接著就把_posts底下的資料搬移至剛剛的git project底下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cp _posts/* USERNAME.github.ui.git/_posts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-安裝jekyll&quot;&gt;4. 安裝jekyll&lt;/h2&gt;

&lt;p&gt;接著安裝&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;，&lt;br&gt;
jekyll主要功用為:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在local preview你的post&lt;/li&gt;
&lt;li&gt;render post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝方式一樣是透過gem，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝成功就可以用jekyll去preview你的posts，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後會在你的local起一個web server，&lt;br&gt;
網址是&lt;code&gt;http://localhost:4000&lt;/code&gt;，&lt;br&gt;
在執行&lt;code&gt;serve&lt;/code&gt;的當下就會幫我們render post了，&lt;br&gt;
接著就可以把所有的changed push回去github上。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add . 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cm -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;add posts&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後一樣去&lt;code&gt;USERNAME.github.io&lt;/code&gt;看看，會有原本在blogger上的posts了！&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-安裝jekyll-paginate&quot;&gt;5. 安裝jekyll-paginate&lt;/h2&gt;

&lt;p&gt;jekyll-paginate功用就是分頁，如果你不想要你的首頁就把所有的post通通列出來，&lt;br&gt;
那麼就可以安裝這個plugin，  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著打開&lt;code&gt;_config.yml&lt;/code&gt;，然後加入下面三行，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gems: [jekyll-paginate]
paginate: 3
paginate_path: &amp;quot;/blog/page:num&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後有一個比較tricky的地方，&lt;br&gt;
如果你的首頁是index.md，pagenate是無法幫你gen出來，&lt;br&gt;
必須是index.html，但很簡單，你只要把&lt;code&gt;mv index.md  index.html&lt;/code&gt;即可，&lt;br&gt;
mv完成以後，接著打開&lt;code&gt;index.html&lt;/code&gt;，&lt;br&gt;
然後把下面的code貼入。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% for post in paginator.posts %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;color: #F22430&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ post.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width: 100%; border-bottom: 1px solid #E7E7E7;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date_to_long_string }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {{ post.excerpt }}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myButton&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ post.url | prepend: site.baseurl }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.more }} &lt;span class=&quot;ni&quot;&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Pagination links --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% if paginator.previous_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ paginator.previous_page_path }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page_number &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page: {{ paginator.page }} of {{ paginator.total_pages }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% if paginator.next_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ paginator.next_page_path }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;next &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著就在重新render一次。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成以後，在&lt;code&gt;_site/blog/&lt;/code&gt;底下，就會有很多&lt;code&gt;pageX&lt;/code&gt;的資料夾，&lt;br&gt;
接著就可以通通在push回去github上。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-整合adsense&quot;&gt;6. 整合Adsense&lt;/h2&gt;

&lt;p&gt;這裡用adsense當作廣告source，&lt;br&gt;
首先先去adsense網站上申請，這裡就不教怎麼申請了，&lt;br&gt;
申請完以後，會給你一串javascript，&lt;br&gt;
把它複製起來，然後建立一個新的html檔案。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim _includes/adsense.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後把剛剛adsense給的那串javascript貼進去，如下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- id10t_top --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ins&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;adsbygoogle&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;display:block&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-client=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca-pub-xxxxxxxxxxxx&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1161208442&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;auto&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著我們就可以在想要放廣告的page裡面，include &lt;code&gt;adsense.html&lt;/code&gt;這個file，&lt;br&gt;
假設我們想要在首頁放廣告，那麼就是打開 &lt;code&gt;index.html&lt;/code&gt; ，&lt;br&gt;
然後在適當的地方貼入下面的code，  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% include adsense.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著一樣重新render一次就完成了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-整合comment-system&quot;&gt;7. 整合Comment system&lt;/h2&gt;

&lt;p&gt;jekyll裡面內建了很多的comment system，有disqus、facebook...etc.&lt;br&gt;
這裡我選擇了&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;，因為預設也是使用它。&lt;br&gt;
那首先要先去&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;上註冊，&lt;br&gt;
註冊非常簡單，也不需要認證。&lt;br&gt;
註冊完成以後就會取得一個&lt;code&gt;short name&lt;/code&gt;，&lt;br&gt;
有了&lt;code&gt;short name&lt;/code&gt;以後，就打開&lt;code&gt;_config.yml&lt;/code&gt;，&lt;br&gt;
然後找到&lt;code&gt;comments&lt;/code&gt;這個key，然後把你的&lt;code&gt;short name&lt;/code&gt;填入即可。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;comments :
  provider : disqus
  disqus :
    short_name : your_short_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成以後，一樣重新render就完成了。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-整合google-analytics&quot;&gt;8. 整合Google Analytics&lt;/h2&gt;

&lt;p&gt;jekyll也有內建analytics的功能，其實跟上面的comment system差不多，&lt;br&gt;
一樣填入analytics id即可。&lt;br&gt;
但我發現jekyll的analytics 好像比較舊。&lt;br&gt;
所以我就不用它內建的，我就用與adsense的方式一樣，&lt;br&gt;
先create一個&lt;code&gt;analytics.html&lt;/code&gt;，接著把下面的code貼入，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GoogleAnalyticsObject&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;//www.google-analytics.com/analytics.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ga&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;UA-xxxxxx-1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;send&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pageview&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在我想要track的地方，貼入下面的code，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% include analytics.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在重新render就完成了！&lt;br&gt;
最後只要把你的cname指向username.github.io，&lt;br&gt;
以及在目錄底下建立一個名稱為&lt;code&gt;CNAME&lt;/code&gt;的file，填入你的domain就好了。&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setup Linux Multipath in Ubuntu</title>
   <link href="http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu"/>
   <updated>2015-08-13T15:07:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;這篇要講Linux Multipath，&lt;br /&gt;為了使用Linux Multipath，所以用了multipath-tool這個package，&lt;br /&gt;multipath-tool提供了二個功能，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. input/output fail-over&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. load balancing for block device&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Prerequisite&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;開始之前先，準備下面所需要的環境，&lt;br /&gt;1. 1台server上有2張網卡(eth0, eth1)&lt;br /&gt;2. iSCSI target x1&lt;br /&gt;理論上，server上的2張網卡應接在不同的swtich上，抑或在不同的網段上。&lt;br /&gt;目的在於某一條線路斷時，才不會影響另外一條。&lt;br /&gt;但為了測試可以先都放在同個網段上。&lt;br /&gt;&lt;br /&gt;假設，&lt;br /&gt;eth0 IP為172.16.131.134&lt;br /&gt;eth1 IP為172.16.131.135&lt;br /&gt;iSCSI IP為172.16.131.138&lt;br /&gt;&lt;br /&gt;整體的網路架構可以參考此張圖，&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s1600/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s400/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; width=&quot;263&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Installation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著安裝我們需要的package，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install open-iscsi&lt;br /&gt;apt-get install multipath-tools&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. multipath configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著來設定multipah，先create一個config file，（你也可以從/usr/share/doc/multipath-tools/examples/multipath.conf.synthetic這裏複製至/etc/multipah.conf底下）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ vim /etc/multipath.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，參數的說明可以看這（&lt;a href=&quot;https://help.ubuntu.com/lts/serverguide/multipath-dm-multipath-config-file.html&quot;&gt;點我&lt;/a&gt;）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;defaults {&lt;br /&gt;     user_friendly_names yes&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;devices {&lt;br /&gt;     device {&lt;br /&gt;          polling_interval 5&lt;br /&gt;          path_selector &quot;round-robin 0&quot;&lt;br /&gt;          path_grouping_policy group_by_prio&lt;br /&gt;          prio rdac&lt;br /&gt;          path_checker rdac&lt;br /&gt;          hardware_handler &quot;1 rdac&quot;&lt;br /&gt;          failback immediate&lt;br /&gt;          features &quot;2 pg_init_retires 50&quot;&lt;br /&gt;          no_path_retry 30&lt;br /&gt;          rr_min_io 100&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. iSCSI configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著我們要設定iSCSI，讓我們在login某target時，&lt;br /&gt;可以透過不同的NIC同時進行login，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m iface -I eth0 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth1 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth0 --op=update -n iface.net_ifacename -v eth0&lt;br /&gt;$ iscsiadm -m iface -I eth1 --op=update -n iface.net_ifacename -v eth1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著要把reverse path filtering關掉，&lt;br /&gt;否則其中一張網卡登入target時的packet會被ignore，&lt;br /&gt;所以要去編輯/etc/sysctl.conf，&lt;br /&gt;加入下面兩行。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;net.ipv4.conf.eth0.rp_filter=2&lt;br /&gt;net.ipv4.conf.eth1.rp_filter=2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後執行下面指令讓conf生效。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ sysctl -p&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Login iSCSI&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先先discovery該iSCSI，看該iSCSI上有哪些target，&lt;br /&gt;可以發現一模一樣的target卻顯示了2筆，這是因為剛剛前面我們設定了2張nic了！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m discovery -t st -p 172.16.131.138:3260&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著login該target，會發現login了二次，且這二次分別是透過eth0以及eth1去完成。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m node -T iqn.2015-07.net.kenyang:ken.iscsi --login&lt;br /&gt;&lt;br /&gt;Logging in to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Logging in to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Login to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;Login to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;顯示multipath的topology，&lt;br /&gt;會發現有2個blcok device，&lt;br /&gt;因為我們登入了2次，所以該target在我們server上被視為2個block device，分別為sdb, sdc。&lt;br /&gt;然後再透過device mapper的概念去把它aggregate成一個/dev/mapper/mpath1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ multipath -ll&lt;br /&gt;&lt;br /&gt;mpath1 (xxxxxxxxxxxxxxxxxxx) dm-6 EQLOGIC,100E-00&lt;br /&gt;size=60G features=&#39;0&#39; hwhandler=&#39;0&#39; wp=rw&lt;br /&gt;`-+- policy=&#39;round-robin 0&#39; prio=1 status=active&lt;br /&gt; |- 7:0:0:0 sdb 8:16 active ready running&lt;br /&gt; `- 8:0:0:0 sdc 8:32 active ready running&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Format block device&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後一步就要把該block device mount起來使用，&lt;br /&gt;但mount之前要先fdisk以及mkfs，要注意我們的對象不是sdb,sdc，&lt;br /&gt;而是mpatch1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;fdisk /dev/mapper/mpath1&lt;br /&gt;mkfs.ext4 /dev/mapper/mpath1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成以後就可以mount起來使用看看。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mount /dev/mapper/mpath1 /storage/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Apache Kafka: Distributed messaging system.</title>
   <link href="http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging"/>
   <updated>2015-06-25T17:32:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;Apache Kafka是一個分散式的訊息處理framework，&lt;br /&gt;透過publish來發佈message，以及subscribe來訂閱取得message。&lt;br /&gt;從架構上來看，Kafka可以分為下面幾種角色，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. producer:   發佈(publish)message to topic&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. consumer:   訂閱(subscribe)topic以取得message&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. broker:     簡單的說就是server，由一台以上的broker組成一個cluster&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. topic:      message的分類&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5. zookeeper:  嚴格來說，zookeeper不算是Kafka的一部分，但Kafka卻得倚靠zookeeper來做到sync。&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-PvOMN32b-LA/VYfNp-L3GVI/AAAAAAAAFlg/upzpVGdl1sk/s1600/producer_consumer.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-PvOMN32b-LA/VYfNp-L3GVI/AAAAAAAAFlg/upzpVGdl1sk/s1600/producer_consumer.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;了解Kafka的每一個角色以後，&lt;br /&gt;接下來要講怎麼安裝跟使用。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install Kafka&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，先安裝Kafka，這裡選的版本是0.8.2。&lt;br /&gt;Kafka的安裝很簡單，只有一個tarball，解開就好。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://apache.stu.edu.tw/kafka/0.8.2.0/kafka_2.10-0.8.2.0.tgz&lt;br /&gt;tar xvzf kafka_2.10-0.8.2.0.tgz&lt;br /&gt;cd kafka_2.10-0.8.2.0/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Start zookeeper&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝完以後，在開始之前，&lt;br /&gt;要先啟動zookeeper，原因是前面有說過，&lt;br /&gt;Kafka倚靠zookeeper做message的sync。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/zookeeper-server-start.sh config/zookeeper.properties &amp;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;啟動以後，可以透過下面指令去觀察一下，&lt;br /&gt;應該會看到2隻java在LISTEN，&lt;br /&gt;有一隻的port預設一定是2181，預設值放在config/zookeeper.properties裡面。&lt;br /&gt;這個port是給等等的其他broker連上來用的。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;netstat -tnlp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Start Kafka server(broker)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著啟動三個kafka server，讓這三台server變成一個cluster，&lt;br /&gt;為什麼要跑三台？因為Kafka還有replication的功能，所以順便玩一下。&lt;br /&gt;然後我只有一台機器，所以我會讓這三台通通run在同一台上面。&lt;br /&gt;在啟動之前，要先“複製“and“編輯”一個config檔案，&lt;br /&gt;&lt;br /&gt;首先，先複製config，因為有三台，但是預設的config只有一個，所以要多複製二個出來。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cp config/server.properties config/server-2.properties&lt;br /&gt;cp config/server.properties config/server-3.properties&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後去編輯config/server-2.properties以及server-3.properties這二個檔案，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;# The id of the broker. This must be set to a unique integer for each broker.&lt;br /&gt;broker.id=1&lt;br /&gt;&lt;br /&gt;# The port the socket server listens on&lt;br /&gt;port=9092&lt;br /&gt;&lt;br /&gt;# A comma seperated list of directories under which to store log files&lt;br /&gt;log.dirs=/tmp/kafka-logs&lt;br /&gt;&lt;/pre&gt;只要改broker.id, port, log.dirs這三個key，&lt;br /&gt;這三個都要是unique的value，所以就都往上+1吧，&lt;br /&gt;例如server-2.properties的例子就是，&lt;br /&gt;broker.id=1&lt;br /&gt;port=9093&lt;br /&gt;log.dirs=/tmp/kafka-logs-2&lt;br /&gt;&lt;br /&gt;編輯完以後就分別啟動這三台broker吧。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-server-start.sh config/server.properties &amp;&lt;br /&gt;bin/kafka-server-start.sh config/server-2.properties &amp;&lt;br /&gt;bin/kafka-server-start.sh config/server-3.properties &amp;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Create a topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;有了server以後，接著要create一個topic，&lt;br /&gt;你可以試著把replication的value改成4，你應該會失敗了，&lt;br /&gt;且error msg應該是【4 larger than available brokers: 3】，因為我們剛剛只有start三台broker，所以無法複製四份。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著你可以去查詢這個topic的資訊，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;應該會看到下面的資訊，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;Topic:test PartitionCount:1 ReplicationFactor:3 Configs:&lt;br /&gt; Topic: test Partition: 0 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1&lt;br /&gt;&lt;/pre&gt;ReplicationFactor是3份，&lt;br /&gt;Replicate在0, 1, 2這三台broker上面，&lt;br /&gt;topic的leader是broker 2，leader負責partition的read and write。&lt;br /&gt;Isr的意思是有哪些broker正在sync，簡單的說可以知道哪些broker是活著的。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Publish: send message to topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要開始寫訊息到topic裡面，&lt;br /&gt;透過kafka提供的shell可以進行測試，執行以後，就可以直接輸入你要輸入的訊息，&lt;br /&gt;輸入完以後，按下ctrl+C就可以離開。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test&lt;br /&gt;...&lt;br /&gt;test message 1&lt;br /&gt;test message 2&lt;br /&gt;^C &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Subscribe: get message from topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要讀取訊息，&lt;br /&gt;kafka一樣有提供shell script讓我們使用，&lt;br /&gt;應該就可以看到上一步驟所輸入的訊息了。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Advance&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這一步只是要觀察一下replication有無成功，&lt;br /&gt;我們可以去stop該topic的leader，&lt;br /&gt;以我的例子來說，test leader是broker 2，&lt;br /&gt;所以我就去把broker 2關掉，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ jobs&lt;br /&gt;[1]   Running            bin/zookeeper-server-start.sh config/zookeeper.properties &amp;&lt;br /&gt;[2]   Running            bin/kafka-server-start.sh config/server.properties &amp;&lt;br /&gt;[3]-  Running            bin/kafka-server-start.sh config/server-1.properties &amp;&lt;br /&gt;[4]+  Running            bin/kafka-server-start.sh config/server-2.properties &amp;&lt;br /&gt;$ fg 4&lt;br /&gt;$ ^C&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著我們可以先去看該topic的leader會有什麼變化，應該會發現leader變別台broker了，&lt;br /&gt;而且Isr會只剩下0,1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;此時我們一樣在去consume message，message應該還是會保存的完整無缺。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;下一篇應該寫kafka+spark streaming吧！？&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>How to run a simple Apache Spark application? (Ubuntu 12.04)</title>
   <link href="http://blog.kenyang.net/2015/06/17/how-to-run-simple-apache-spark"/>
   <updated>2015-06-17T10:18:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/06/17/how-to-run-simple-apache-spark</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;因緣際會下，得稍微摸一下Apache Spark，&lt;br /&gt;說實在，在粗淺地摸完Spark以後，我還是想不太出他的應用面。&lt;br /&gt;Anyway，這篇主要分為3個section，&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;如何安裝Spark&lt;/li&gt;&lt;li&gt;如何使用&lt;/li&gt;&lt;li&gt;如何寫個Spark application&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install JDK&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先要先講安裝，&lt;br /&gt;安裝spark之前，要先安裝java+scala，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-add-repository ppa:webupd8team/java&lt;br /&gt;apt-get update&lt;br /&gt;apt-get install oracle-java7-installer&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Install scala&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要安裝scala，這裡安裝的版本是2.11.6。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://www.scala-lang.org/files/archive/scala-2.11.6.tgz&lt;br /&gt;mkdir /usr/local/src/scala&lt;br /&gt;tar xvf scala-2.11.6.tgz -C /usr/local/src/scala/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;安裝完以後，要把scala的路徑加入到PATH環境變數中&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;export SCALA_HOME=/usr/local/src/scala/scala-2.11.6&quot; &gt;&gt; .bashrc&lt;br /&gt;echo &quot;export PATH=\$SCALA_HOME/bin:\$PATH&quot; &gt;&gt; .bashrc&lt;br /&gt;. .bashrc&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Install Spark&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後就安裝spark，安裝會需要一段時間。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://www.apache.org/dist/spark/spark-1.4.0/spark-1.4.0.tgz&lt;br /&gt;tar xvf spark-1.4.0.tgz&lt;br /&gt;cd spark-1.4.0&lt;br /&gt;sbt/sbt assembly&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Spark Interactive Shell&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝完以後，可以進入spark的interactive shell模式做個簡單的測試，&lt;br /&gt;進入interactive mode，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./bin/spark-shell&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;大概會花個10秒做init，進入以後，&lt;br /&gt;會看到scala的prompt字樣，這裏就可以對spark進行操作了。&lt;br /&gt;下面有二個例子，都是對README.md去做操作，&lt;br /&gt;分別為找出含&quot;apache&quot;的句子，&lt;br /&gt;以及找出有幾個&quot;apache&quot;的字。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;scala&gt; val textFile = sc.textFile(&quot;README.md&quot;)&lt;br /&gt;scala&gt; textFile.count()&lt;br /&gt;scala&gt; val results = textFile.filter(line =&gt; line.contains(&quot;apache&quot;)) // search apache&lt;br /&gt;scala&gt; results.count()&lt;br /&gt;scala&gt; results.collect()  // find out those lines contain apache&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Start a Spark cluster&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;好了，剛剛都是自爽模式，&lt;br /&gt;接著我們要啟動一個spark cluster，&lt;br /&gt;這個cluster可以讓很多個worker(slave)加入，&lt;br /&gt;讓他們去執行工作。&lt;br /&gt;&lt;br /&gt;啟動cluster的指令如下：&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-master.sh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;啟動完以後，你可以用netstat -tnlp去看一下，&lt;br /&gt;你會發現有3個java bind住的connection，&lt;br /&gt;預設分別為7077、8080、6066&lt;br /&gt;7077就是這個cluster的port，將來worker要加入就得指定這個port，&lt;br /&gt;8080是這個spark的web management UI。&lt;br /&gt;所以你就可以打開browser，然後去看看web UI．&lt;br /&gt;這時候你的worker數量應該是0。&lt;br /&gt;如果想要加入一個worker，得透過下面的指令，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-slave.sh spark://ubuntu:7077 # change ubuntu to your hostname&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;此時再去web UI看，應該就看到有一個worker存在。&lt;br /&gt;上面是透過二個指令去分別啟動master and slave，&lt;br /&gt;其實你也可以透過下面一個指令就去啟動master, slave，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-all.sh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Connecting an Application to the Cluster&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;有了一個spark cluster以後，&lt;br /&gt;我們就可以把application掛上去，&lt;br /&gt;我們可以透過前面使用的spark-shell，把這個shell run在cluster上。&lt;br /&gt;只要加入--master這參數即可。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./bin/spark-shell --master spark://ubuntu:7077 # change ubuntu to your hostname&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;進去以後，你一樣可以執行上面的example玩玩看。&lt;br /&gt;同時你也可以去web UI上看看，會在&quot;Running Applications&quot;裡面看到這個shell。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Writing an Application&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;上一步也算是自爽模式，&lt;br /&gt;我想應該不可能透過shell mode去做你想做的事情，&lt;br /&gt;應該還是要寫個application，&lt;br /&gt;所以這一步驟就是要寫一個很簡單的classs，&lt;br /&gt;然後build它，再把它掛到cluster上執行。&lt;br /&gt;&lt;br /&gt;開始之前，先來設定一下spark的環境變數，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;export SK_HOME=/root/spark-1.4.0&quot; &gt;&gt; .bashrc&lt;br /&gt;. .bashrc&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後改這隻script，（$SK_HOME/build/sbt-launch-lib.bash）&lt;br /&gt;因為我在build的時候，有發生路徑的問題。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim $SK_HOME/build/sbt-launch-lib.bash&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打開這檔案以後，找到這幾行，&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;SBT_VERSION=`awk -F &quot;=&quot; &#39;/sbt\.version/ {print $2}&#39; ./project/build.properties`&lt;br /&gt;...&lt;br /&gt;JAR=build/sbt-launch-${SBT_VERSION}.jar&lt;br /&gt;&lt;/pre&gt;換成下面這幾行，其實也只是變成絕對路徑。&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;SBT_VERSION=`awk -F &quot;=&quot; &#39;/sbt\.version/ {print $2}&#39; $SK_HOME/project/build.properties`&lt;br /&gt;...&lt;br /&gt;JAR=$SK_HOME/build/sbt-launch-${SBT_VERSION}.jar&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成以後，先來create幾個資料夾，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p ./spark-app/src/main/scala/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就可以寫一個簡單的class，&lt;br /&gt;這class上面差不多，也是用來算count，&lt;br /&gt;記得該class一定要放置在src/main/scala底下。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cd ./spark-app&lt;br /&gt;vim src/main/scala/SimpleApp.scala&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;class內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;/* SimpleApp.scala */&lt;br /&gt;import org.apache.spark.SparkContext&lt;br /&gt;import org.apache.spark.SparkContext._&lt;br /&gt;import org.apache.spark.SparkConf&lt;br /&gt;&lt;br /&gt;object SimpleApp {&lt;br /&gt;  def main(args: Array[String]) {&lt;br /&gt;    val logFile = &quot;/root/spark-1.4.0/README.md&quot;&lt;br /&gt;    val conf = new SparkConf().setAppName(&quot;Simple Application&quot;)&lt;br /&gt;    val sc = new SparkContext(conf)&lt;br /&gt;    val logData = sc.textFile(logFile, 2).cache()&lt;br /&gt;    val numApache = logData.filter(line =&gt; line.contains(&quot;apache&quot;)).count()&lt;br /&gt;    println(&quot;Line with apache: %s &quot;.format(numApache))&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;而在開始build之前，要寫一下這個app的dependency，&lt;br /&gt;放置在sparka-app底下就好。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim simple.sbt&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;name := &quot;Simple Project&quot;&lt;br /&gt;&lt;br /&gt;version := &quot;1.0&quot;&lt;br /&gt;&lt;br /&gt;scalaVersion := &quot;2.11.6&quot;&lt;br /&gt;&lt;br /&gt;libraryDependencies += &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;1.4.0&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就可以開始build，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$SPARK_HOME/build/sbt package&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;build完以後，&lt;br /&gt;會發現spark-app底下多了二個folder（project, target)，&lt;br /&gt;而我們要的jar檔會放在target底下，&lt;br /&gt;我們就可以把這jar交付給spark執行。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$SPARK_HOME/bin/spark-submit --class &quot;SimpleApp&quot; --master spark://ubuntu:7077 target/scala-2.11/simple-project_2.11-1.0.jar&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;應該會看到下面的字樣，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;Line with apache: 9 15/06/17 02:55:34 INFO TaskSetManager: Finished task 1.0 in stage 2.0 (TID 5) in 32 ms on 172.16.131.140 (2/2)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;最後在web UI裡面的&quot;Completed Applications&quot;會看到我們剛剛執行的那個item。&lt;br /&gt;基本上這樣就完成了簡單的spark application。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>How to create a customized Ubuntu ISO?</title>
   <link href="http://blog.kenyang.net/2015/04/13/how-to-create-customized-ubuntu-iso"/>
   <updated>2015-04-13T10:36:00+08:00</updated>
   <id>http://blog.kenyang.net/2015/04/13/how-to-create-customized-ubuntu-iso</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;這篇要講怎麼客製化你自己想要的ubuntu ISO，&lt;br /&gt;會講解一些&lt;a href=&quot;http://en.wikipedia.org/wiki/Preseed&quot;&gt;preseed&lt;/a&gt;的參數，&lt;br /&gt;preseed file是debian系列的automation config，而redhat系列就是用kickstart，&lt;br /&gt;debian系列就是根據preseed file去進行安裝．&lt;br /&gt;因此ubuntu也是用preseed，當然ubuntu也可以用kickstart，只是“似乎”支援沒有那麼好!?&lt;br /&gt;題外話，雖然說preseed file是debian的標準格式，&lt;br /&gt;但有一點要記得，debian自己本身的preseed file，並不是每一個command，ubuntu都能接受！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Download ubuntu ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，你要有一個ubuntu的ISO，&lt;br /&gt;這裏我選用ubuntu 12.04的ISO，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://releases.ubuntu.com/12.04.5/ubuntu-12.04.5-server-amd64.iso&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Mount the ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要把ISO內的東西，先mount起來，接著再copy出來，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /mnt/tmp /mnt/iso&lt;br /&gt;mount -o loop ./ubuntu-12.04.5-server-amd64.iso /mnt/tmp&lt;br /&gt;rsyn -av /mnt/tmp /mnt/iso&lt;br /&gt;umount /mnt/tmp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Add boot menu option&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;因為要客製化你自己的ISO，&lt;br /&gt;所以我們要在boot menu中，新增一個屬於我們自己的menu，&lt;br /&gt;首先先開啟這個isolinux/txt.cfg檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim /mnt/iso/isolinux/txt.cfg&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打開以後應該會看到下面的內容，&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-VdB_0wKMjWA/VSo0ZnuY9hI/AAAAAAAAFjY/2TZzIfVE7Is/s1600/Screen%2BShot%2B2015-04-12%2Bat%2B4.56.41%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-VdB_0wKMjWA/VSo0ZnuY9hI/AAAAAAAAFjY/2TZzIfVE7Is/s640/Screen%2BShot%2B2015-04-12%2Bat%2B4.56.41%2BPM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;我們就在label install之前新增一筆boot menu，&lt;br /&gt;內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;label YourCustomizedISO&lt;br /&gt;    menu label ^Customized ISO&lt;br /&gt;    kernel /install/vmlinuz&lt;br /&gt;    append  file=/cdrom/preseed/customized.seed initrd=/install/initrd.gz quiet --&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Add pressed file&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要新增一個客製化的preseed file，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim /mnt/iso/preseed/customized.seed&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，這份preseed讓你可以不用輸入任何按鍵就進行自動安裝！&lt;br /&gt;我覺得還蠻淺顯易懂的，每個section都有標註是在做什麼，&lt;br /&gt;比較值得注意的是『Advance command』這個section，&lt;br /&gt;這section裡面放的是，『安裝完ubuntu以後，要做些什麼事情。』&lt;br /&gt;但是如果你想要在『安裝之前』或者『partition之前或者之後』做些事情，都是可以的。&lt;br /&gt;只不過這個example，我們是在『安裝完ubuntu以後』。&lt;br /&gt;&lt;br /&gt;『preseed/late_command』就是『安裝完ubuntu以後』的意思。&lt;br /&gt;不過這邊可能大家會覺得很奇怪，為什麼在late_command中，&lt;br /&gt;一開始要cp至/target目錄？/target目錄又是什麼？&lt;br /&gt;大家在安裝ubuntu的時候，可以change console一下，這時候cd至/target底下，&lt;br /&gt;你會發現其實裡面就是你真正ubuntu安裝的位置！&lt;br /&gt;那/target外面的東西是誰的呢(bin, lib, etc,....)？&lt;br /&gt;其實是busybox的，所以你一定得把你想要的東西搬到/target裡面，&lt;br /&gt;這樣在你安裝完以後，該東西才會存在。&lt;br /&gt;接著還有另一段奇怪的command：in-target，&lt;br /&gt;『in-target』，簡單的說就是chroot /target而已，&lt;br /&gt;你也可以用chroot /target去取代『in-target』。&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;####### Localization #######&lt;br /&gt;d-i debian-installer/locale string en_US&lt;br /&gt;d-i debian-installer/language string en&lt;br /&gt;d-i debian-installer/country string US&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;####### Keyboard selection #######&lt;br /&gt;d-i console-setup/ask_detect boolean false&lt;br /&gt;d-i console-setup/layoutcode string us&lt;br /&gt;d-i console-setup/modelcode string pc105&lt;br /&gt;d-i kbd-chooser/method string us&lt;br /&gt;d-i keyboard-configuration/layout string USA&lt;br /&gt;d-i keyboard-configuration/variant string USA&lt;br /&gt;&lt;br /&gt;####### Network configuration #######&lt;br /&gt;#d-i netcfg/choose_interface select auto&lt;br /&gt;d-i netcfg/choose_interface select eth0&lt;br /&gt;d-i netcfg/get_hostname string ubuntu&lt;br /&gt;d-i netcfg/get_domain string&lt;br /&gt;# configure the network manually&lt;br /&gt;#d-i netcfg/disable_autoconfig boolean true&lt;br /&gt;# configure the network automatically&lt;br /&gt;d-i netcfg/get_nameservers string 8.8.8.8&lt;br /&gt;d-i netcfg/get_ipaddress string 172.16.131.138&lt;br /&gt;d-i netcfg/get_netmask string 255.255.255.0&lt;br /&gt;d-i netcfg/get_gateway string 172.16.131.2&lt;br /&gt;d-i netcfg/confirm_static boolean true&lt;br /&gt;&lt;br /&gt;####### Apt setup #######&lt;br /&gt;d-i apt-setup/security-updates boolean false&lt;br /&gt;d-i apt-setup/restricted boolean false&lt;br /&gt;d-i apt-setup/universe boolean false&lt;br /&gt;d-i apt-setup/backports boolean false&lt;br /&gt;d-i apt-setup/security boolean false&lt;br /&gt;d-i mirror/http/proxy string&lt;br /&gt;&lt;br /&gt;####### Base system installation #######&lt;br /&gt;d-i debian-installer/splash boolean false&lt;br /&gt;d-i base-installer/install-recommends boolean true&lt;br /&gt;d-i base-installer/kernel/altmeta string lts-saucy&lt;br /&gt;&lt;br /&gt;####### Clock and time zone setup #######&lt;br /&gt;d-i clock-setup/utc boolean true&lt;br /&gt;d-i clock-setup/utc-auto boolean true&lt;br /&gt;d-i time/zone string UTC&lt;br /&gt;&lt;br /&gt;####### Boot loader installation #######&lt;br /&gt;d-i finish-install/reboot_in_progress note&lt;br /&gt;d-i grub-installer/only_debian boolean true&lt;br /&gt;d-i grub-installer/with_other_os boolean true&lt;br /&gt;&lt;br /&gt;####### Partitioning using LVM #######&lt;br /&gt;d-i partman-auto-lvm/guided_size string max&lt;br /&gt;d-i partman-auto/choose_recipe select atomic&lt;br /&gt;d-i partman-auto/method string lvm&lt;br /&gt;d-i partman-lvm/confirm boolean true&lt;br /&gt;d-i partman-lvm/confirm boolean true&lt;br /&gt;d-i partman-lvm/confirm_nooverwrite boolean true&lt;br /&gt;d-i partman-lvm/device_remove_lvm boolean true&lt;br /&gt;d-i partman/choose_partition select finish&lt;br /&gt;d-i partman/confirm boolean true&lt;br /&gt;d-i partman/confirm_nooverwrite boolean true&lt;br /&gt;d-i partman/confirm_write_new_label boolean true&lt;br /&gt;&lt;br /&gt;####### User #######&lt;br /&gt;d-i passwd/root-login boolean true&lt;br /&gt;d-i passwd/root-password password 1234&lt;br /&gt;d-i passwd/root-password-again password 1234&lt;br /&gt;d-i user-setup/allow-password-weak boolean true&lt;br /&gt;# create user or not&lt;br /&gt;d-i passwd/make-user boolean false&lt;br /&gt;#d-i user-setup/encrypt-home boolean false&lt;br /&gt;#d-i passwd/user-fullname string ken&lt;br /&gt;#d-i passwd/username string ken&lt;br /&gt;#d-i passwd/user-password password 123456&lt;br /&gt;#d-i passwd/user-password-again password 123456&lt;br /&gt;&lt;br /&gt;####### Package selection #######&lt;br /&gt;d-i pkgsel/include string openssh-server vim&lt;br /&gt;d-i pkgsel/install-language-support boolean false&lt;br /&gt;d-i pkgsel/update-policy select none&lt;br /&gt;d-i pkgsel/upgrade select none&lt;br /&gt;&lt;br /&gt;tasksel tasksel/first multiselect standard, ubuntu-server&lt;br /&gt;&lt;br /&gt;####### Advance command #######&lt;br /&gt;d-i preseed/late_command string \&lt;br /&gt;cp /cdrom/preseed/setup-something.bash /target/tmp/setup-something.bash &amp;&amp; in-target chmod +x /tmp/setup-something.bash &amp;&amp; in-target /bin/bash /tmp/setup-something.bash&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Make an ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上面的步驟後，&lt;br /&gt;剩下最後一步就完成了，&lt;br /&gt;把剛剛copy出來的內容，在包成一個ISO就好了。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkisofs -r -R -J -T -v -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -z -iso-level 4 -c isolinux/isolinux.cat -o custom.iso /mnt/iso&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;大概等個20秒以後，就會看到一個custom.iso，就代表你成功了！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;</content>
 </entry>
 
 <entry>
   <title>MogileFS: Distributed filesystem</title>
   <link href="http://blog.kenyang.net/2014/11/24/mogilefs-distributed-filesystem"/>
   <updated>2014-11-24T10:37:00+08:00</updated>
   <id>http://blog.kenyang.net/2014/11/24/mogilefs-distributed-filesystem</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/mogilefs/&quot;&gt;MogileFS&lt;/a&gt;是分散式檔案系統(DFS)的一種，&lt;br /&gt;在MogileFS中，主要分成2個角色，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. tracker: 記錄有哪些storage&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. storage node: 單純放檔案的角色&lt;br /&gt;其實還有第三個角色，是tracker的DB，&lt;br /&gt;這db角色是用來存放storage在哪裡、有幾個storage等資訊，&lt;br /&gt;以及每個檔案類型要replicate幾份等等之類的資訊，&lt;br /&gt;不過我會把tracker&#39;s DB和tracker本身歸類在一起，&lt;br /&gt;因為它們兩個一定得在同檯機器上，而且缺一不可，&lt;br /&gt;但tracker和storage不一定要在同檯機器上面！&lt;br /&gt;&lt;br /&gt;如果說為什麼要用mogilefs的話，大概有以下2個原因吧，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. 自動作replicate&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. application level，不需要特別的kernel module（setup簡單)&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install mogilefs&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝mogilefs方式大概有三種，用cpan, apt, 拿source自己build，&lt;br /&gt;個人偏好用apt-get安裝，&lt;br /&gt;這裡選擇在ubuntu 14.04上安裝，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install python-software-properties&lt;br /&gt;add-apt-repository ppa:saz/mogilefs&lt;br /&gt;apt-get update&lt;br /&gt;apt-get install mogilefsd mogstored mogilefs-utils&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣就完成安裝，接下來要setup mogilefs,&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Setup mogilefs tracker&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;前面有說到有tracker就一定要有db，&lt;br /&gt;所以請先安裝好mysql，安裝好以後就執行下面的command，&lt;br /&gt;記得把password換成你想要使用的密碼！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mysql&gt; CREATE DATABASE mogilefs;&lt;br /&gt;mysql&gt; CREATE USER &#39;mogilefs&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;&lt;br /&gt;mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,ALTER ON mogilefs.* TO &#39;mogilefs&#39;@&#39;%&#39;;&lt;br /&gt;mysql&gt; flush privileges;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著要編輯/etc/mogilefs/mogilefsd.conf這個檔案，&lt;br /&gt;這個檔案，其實只有在tracker的角色上才需要去編輯，&lt;br /&gt;意思是說如果你有三檯機器，那麼只有其中一檯才需要去設定這個檔案！&lt;br /&gt;只要改下面兩個設定就好，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;db_pass = password&lt;br /&gt;listen = 10.0.0.172:7001&lt;br /&gt;&lt;/pre&gt;db_pass就是上一步驟你所輸入的密碼，&lt;br /&gt;listen就是這個tracker要listen在哪個ip以及哪一個port上面！&lt;br /&gt;&lt;br /&gt;接著使用下面的command進行db setup，&lt;br /&gt;一樣記得把password換成跟上面一樣的！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogdbsetup --dbhost=10.0.0.172:7001 --dbname=mogilefs --dbuser=mogilefs --dbpassword=password&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著編輯.mogilefs.conf，這檔案會記錄著你的tracker在哪裡，&lt;br /&gt;然後mogilefs會去問這tracker所有storage的資訊．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;trackers = 10.0.0.172:7001&quot; &gt; ~/.mogilefs.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Setup mogilefs storage node&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;tracker的目的在於記錄著有哪些storage可以用，&lt;br /&gt;所以在完成setup tracker以後，接著就要來setup storage，&lt;br /&gt;首先，先增加一個store host，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm --trackers=10.0.0.172:7001 host add store1 --ip=10.0.0.172 --status=alive&lt;br /&gt;&lt;/pre&gt;--trackers：指定加在哪個tracker上&lt;br /&gt;store1：是你的host name，&lt;br /&gt;--ip：就是那一顆storage在哪裡&lt;br /&gt;&lt;br /&gt;那麼有了host以後，&lt;br /&gt;就要有device，一個host裡面可以有很多個device，&lt;br /&gt;可以把device想像成local disk、NFS...etc.&lt;br /&gt;所以接著要告訴host有哪些device，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm --trackers=10.0.0.172:7001 device add store1 1 --status=alive&lt;br /&gt;&lt;/pre&gt;比較特別參數是“1”，&lt;br /&gt;1的意思是device 1，&lt;br /&gt;&lt;br /&gt;再來還要增加一個domain，等等後面會說明這domain的用途&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm domain add ken-storage&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成增加一個device了，&lt;br /&gt;接著mogilefs store會去找那個device，&lt;br /&gt;所以接著要去create folder，之後檔案都會放在那folder裡面，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /var/mogdata/dev1&lt;br /&gt;chown mogstored /var/mogdata/dev1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣storage也設定完成了，&lt;br /&gt;那麼該怎麼知道有設定成功？&lt;br /&gt;可以透過mogadm check指令去看，&lt;br /&gt;如果是成功的話，應該會看到下面的畫面，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@ip-10-0-0-172:~# mogadm check&lt;br /&gt;Checking trackers...&lt;br /&gt;  10.0.0.172:7001 ... OK&lt;br /&gt;&lt;br /&gt;Checking hosts...&lt;br /&gt;  [ 1] store1 ... OK&lt;br /&gt;&lt;br /&gt;Checking devices...&lt;br /&gt;  host device         size(G)    used(G)    free(G)   use%   ob state   I/O%&lt;br /&gt;  ---- ------------ ---------- ---------- ---------- ------ ---------- -----&lt;br /&gt;  [ 1] dev1             7.324      1.480      5.844  20.21%  writeable   N/A&lt;br /&gt;  ---- ------------ ---------- ---------- ---------- ------&lt;br /&gt;             total:     7.324      1.480      5.844  20.21%&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test using command line&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;測試之前，請先建立一個tmp file（hello.txt）&lt;br /&gt;上傳檔案，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogupload  --file=&quot;./hello.txt&quot; --domain=ken-storage --key=&quot;first-file&quot;&lt;br /&gt;&lt;/pre&gt;下載檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogfetch --key=&quot;first-file&quot; --file=&quot;./output-file&quot; --domain=ken-storage&lt;br /&gt;&lt;/pre&gt;刪除檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogdelete --key=&quot;first-file&quot;  --domain=ken-storage&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Advance: Replication &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上面的基本操作以後，&lt;br /&gt;並沒有發揮mogilefs replicate的功能，&lt;br /&gt;那要做到replication也很簡單，&lt;br /&gt;記得上面我們有add domain嗎？&lt;br /&gt;domain其實有點難解釋，可以把它想像成像是AWS S3的bucket，&lt;br /&gt;而這bucket下有許多policy，&lt;br /&gt;所以我們現在就要替這這bucket(domain)加replicate的policy，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm class add ken-storage txt --mindevcount=2&lt;br /&gt;&lt;/pre&gt;這指令的意思是，當檔案的class是txt時，請replicate 2份！&lt;br /&gt;&lt;br /&gt;完成replication設定以後，&lt;br /&gt;因為前面的設定都只有一個device，&lt;br /&gt;只有一個deivce情況下，mogilefsd是不會進行replication的，&lt;br /&gt;所以我們得再增加一個device，&lt;br /&gt;建議你不要在同一檯機器上多增加一個device，畢竟沒有太大意義，&lt;br /&gt;你在同一檯機器上做replication....?&lt;br /&gt;如果這檯機器掛了，檔案就通通不見了，&lt;br /&gt;所以會建議你在第二檯機器上增加一個device，&lt;br /&gt;第二檯機器上就單純是storage node的角色了，&lt;br /&gt;所以只需要做下面設定，記得把ip換成第二檯的ip！（只要改10.0.0.199的部分）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;trackers = 10.0.0.172:7001&quot; &gt; ~/.mogilefs.conf&lt;br /&gt;mogadm --trackers=10.0.0.172:7001 host add store2 --ip=10.0.0.199 --status=alive&lt;br /&gt;mogadm --trackers=10.0.0.172:7001 device add store2 2 --status=alive&lt;br /&gt;mkdir -p /var/mogdata/dev2&lt;br /&gt;chown mogstored /var/mogdata/dev2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Test Replication&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;其實跟第四步驟是一樣的，只是多一個參數--class，&lt;br /&gt;這class就和上一步驟所填寫的一樣即可．這樣hello.txt就會被複製到另外一檯機器上去！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogupload  --file=&quot;./hello.txt&quot; --domain=ken-storage --key=&quot;first-file&quot; --class=txt&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;如果replication失敗，那麼在db裡面的table file_to_replication將會有那筆資料，&lt;br /&gt;你也可以透過/var/log/syslog看是什麼error message，&lt;br /&gt;我自己使用的mogilefs版本，就有遇到一個&lt;a href=&quot;http://www.php-oa.com/2013/11/01/mogilefs-job-replicate-died.html&quot;&gt;syscal module的版本問題&lt;/a&gt;，&lt;br /&gt;透過&lt;a href=&quot;http://www.php-oa.com/2013/11/01/mogilefs-job-replicate-died.html&quot;&gt;連結&lt;/a&gt;的中的方法去解決的！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Advance: Integrate it with application &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;當然有了mogilefs以後，不可能都透過command line去操作呀，&lt;br /&gt;如果我想要整合在我的application裡怎麼辦？&lt;br /&gt;其實也很簡單，看你用什麼language，至少我用的language(java, python)都有相關的lib可以使用，&lt;br /&gt;這裡使用pyhton來作為說明，&lt;br /&gt;用&lt;a href=&quot;https://github.com/AloneRoad/pymogile&quot;&gt;pymogile&lt;/a&gt;來作為操作mogile的lib，&lt;br /&gt;安裝pymogile，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;git clone https://github.com/AloneRoad/pymogile.git&lt;br /&gt;cd pymogile/&lt;br /&gt;python setup.py install&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;下面是一個簡單的example用pymogile操作mogilefs，&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;from pymogile import Client, MogileFSError&lt;br /&gt;&lt;br /&gt;datastore = Client(domain=&#39;ken-storage&#39;, trackers=[&#39;10.0.0.172:7001&#39;])&lt;br /&gt;key_id=&#39;replicate&#39;&lt;br /&gt;&lt;br /&gt;def upload_file():&lt;br /&gt;    fp = datastore.new_file(key_id)&lt;br /&gt;    fp.write(&#39;test&#39;)&lt;br /&gt;    fp.close()&lt;br /&gt;&lt;br /&gt;def get_path():&lt;br /&gt;    print datastore.get_paths(key_id)&lt;br /&gt;&lt;br /&gt;def get_data():&lt;br /&gt;    print datastore.get_file_data(key_id)&lt;br /&gt;&lt;br /&gt;upload_file()&lt;br /&gt;get_path()&lt;br /&gt;get_data()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
 </entry>
 
 <entry>
   <title>Create local package repository on Ubuntu</title>
   <link href="http://blog.kenyang.net/2014/10/23/create-local-package-repository-on"/>
   <updated>2014-10-23T17:14:00+08:00</updated>
   <id>http://blog.kenyang.net/2014/10/23/create-local-package-repository-on</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;先前有講過&lt;a href=&quot;http://blog.kenyang.net/2014/09/how-to-build-your-own-debian-package.html&quot;&gt;如何建立自己的debian package&lt;/a&gt;，&lt;br /&gt;這裡要講怎麼建立一個local的repository，&lt;br /&gt;讓這repository可以在internet上供人使用．&lt;br /&gt;其實這概念跟apt-mirror有點像，只不過deb source是來自於自己罷了．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Create your debian package&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這一步驟就去參考&lt;a href=&quot;http://blog.kenyang.net/2014/09/how-to-build-your-own-debian-package.html&quot;&gt;這篇文章吧&lt;/a&gt;，&lt;br /&gt;當然你也可以用ubuntu既有的debian package．（只不過我覺得那不如就用apt-mirror就好）&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Install apache&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;既然你要成為一個repository server，&lt;br /&gt;那麼就要安裝web server，這裡就選apache吧．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install apache2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Setup&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;先create一個folder在apache default目錄下（ex: /var/www)，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /var/www/debian&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;把你要給人使用的debian package搬到上面建立的目錄下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mv *.deb /var/www/debian&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就替你的debian package建立index，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cd /var/www&lt;br /&gt;dpkg-scanpackages debian /dev/null | gzip -9c &gt; debian/Packages.gz&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣就完成了！&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就把你的repo加到list裡面去吧，如果要給別人用，或者在別檯機器上用，&lt;br /&gt;記得把127.0.0.1換成public ip．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;deb http://127.0.0.1 debian/&quot; &gt;&gt; /etc/apt/sources.list&lt;br /&gt;apt-update&lt;br /&gt;apt-install your-deb-package&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
 </entry>
 
 <entry>
   <title>Android In-app billing (IAB) version 3</title>
   <link href="http://blog.kenyang.net/2014/10/16/android-in-app-billing-iab-version-3"/>
   <updated>2014-10-16T16:19:00+08:00</updated>
   <id>http://blog.kenyang.net/2014/10/16/android-in-app-billing-iab-version-3</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;這篇要講怎麼整合IAB，&lt;br /&gt;IAB就是讓user可以在你的app中購買商品．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Download billing service library&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;開啓Android SDK Manager，&lt;br /&gt;找到最下面的 Extras，安裝Google Play Billing Library，&lt;br /&gt;安裝完以後，在您Android SDK 目錄中會有該 Library，位置如下：&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;$SDK_PATH/extras/google/play_billing/in-app-billing-v03&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Create new package&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著在這一步要在你的project下建立一個新的package，&lt;br /&gt;點選 File &amp;gt; New &amp;gt; Package, 名稱為com.android.vending.billing&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Copy necessary files&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;在這一步驟要複製一些必要的檔案至project中，&lt;br /&gt;1. IInAppBillingService.aidl，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;這個檔案放在$SDK_PATH/extras/google/play_billing/in-app-billing-v03底下，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;把IInAppBillingService.aidl，複製到我們剛剛create的package中，&lt;br /&gt;2. *.java&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Google幫我們寫好了很多的wrapper，可以很方便地使用IAB，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;這wrapper會幫我們處理一些bind service的動作，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;透過這些wrapper可以輕易地整合IAB，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;檔案路徑如下：&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;$SDK_PATH/extras/google/play_billing/samples/TrivialDrive/src/com/example/android&lt;br /&gt;/trivialdrivesample/util&lt;br /&gt;&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;把這底下所有的.java複製到你的project當中，並且要把package名稱改成自己的&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Add permission&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著要在AndroidManifest.xml中加入下面這個權限，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;com.android.vending.BILLING&amp;quot;&amp;gt;&lt;br /&gt;&amp;lt;/uses-permission&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Upload apk&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;因為要購買一個商品，這商品在新増之前，&lt;br /&gt;你一定要有一個apk是有BILLING權限的，&lt;br /&gt;否則是不能新增一個商品．&lt;br /&gt;所以在這步驟要先上傳上去，你可以上傳以後再把它變成draft就好，&lt;br /&gt;當然！你也可以通通寫完code再丟上去測試．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Add product&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;上傳apk以後，接著就可以去developer console新增product了，&lt;br /&gt;1. 先到自己的developer console &lt;br /&gt;2. 點選自己的app &lt;br /&gt;3. 點選左邊的In-app Products &lt;br /&gt;4. 點選Add new product&lt;br /&gt;5. 輸入Product ID（這id等等code裡面會用到）&lt;br /&gt;6. 最後填寫product的資訊&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Get public key&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;由於在跟Google Play溝通時，&lt;br /&gt;需要一把public key，&lt;br /&gt;這把key一樣在developer console上，&lt;br /&gt;1. 先到自己的developer console &lt;br /&gt;2. 點選自己的app &lt;br /&gt;3. 點選左邊的Services &amp;amp; APIs&lt;br /&gt;key就會在畫面之中，如下圖！&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-juHaFVdxJtE/VD9hQRnFPSI/AAAAAAAAFhI/8k_Ou03qUOU/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B2.08.36%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-juHaFVdxJtE/VD9hQRnFPSI/AAAAAAAAFhI/8k_Ou03qUOU/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B2.08.36%2BPM.png&quot; height=&quot;164&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8. Implement&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-1. Setup&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;首先要先setup IabHelper，&lt;br /&gt;在setup時就要把剛剛哪組public_key帶進去，&lt;br /&gt;但由於Google有強烈的建議，不要直接hard code public key，&lt;br /&gt;至少要用個xor encrypt的方式，或者用拆解字串的方式存放public key，&lt;br /&gt;xor encrypt就是你先用xor去encrypt你的public key，&lt;br /&gt;之後把encrypt過後的public key放在你的project中，&lt;br /&gt;要用的時候再拿出來decrypt，decrypt完以後，應該就會是原先的public key了，&lt;br /&gt;接著再判斷一下那組public key是否有包含“某部份”真正public key，&lt;br /&gt;有的話才真的是你的public key，&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    private IabHelper mHelper;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate(Bundle savedInstanceState) {&lt;br /&gt;&lt;br /&gt;        String base64EncodedPublicKey = xorDecrypt(PUBLIC_KEY, &quot;key_password&quot;);&lt;br /&gt;&lt;br /&gt;        if (!base64EncodedPublicKey&lt;br /&gt;                .contains(&quot;eFESRE6ijsRAp3TgWhY1zDwWwo1EqxQgt+f&quot;)) {&lt;br /&gt;            throw new RuntimeException(&quot;This is not my key&quot;);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        mHelper = new IabHelper(this, base64EncodedPublicKey);&lt;br /&gt;&lt;br /&gt;        mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {&lt;br /&gt;            public void onIabSetupFinished(IabResult result) {&lt;br /&gt;                Log.d(TAG, &quot;Setup finished.&quot;);&lt;br /&gt;                if (!result.isSuccess()) {&lt;br /&gt;                    Log.d(TAG, &quot;Problem setting up In-app Billing: &quot; + result);&lt;br /&gt;                }&lt;br /&gt;&lt;br /&gt;                if (mHelper == null)&lt;br /&gt;                    return;&lt;br /&gt;                &lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static String xorDecrypt(String input, String key) {&lt;br /&gt;        byte[] inputBytes = Base64.decode(input, Base64.DEFAULT);&lt;br /&gt;        int inputSize = inputBytes.length;&lt;br /&gt;&lt;br /&gt;        byte[] keyBytes = key.getBytes();&lt;br /&gt;        int keySize = keyBytes.length - 1;&lt;br /&gt;&lt;br /&gt;        byte[] outBytes = new byte[inputSize];&lt;br /&gt;        for (int i = 0; i &amp;lt; inputSize; i++) {&lt;br /&gt;            outBytes[i] = (byte) (inputBytes[i] ^ keyBytes[i % keySize]);&lt;br /&gt;        }&lt;br /&gt;        return new String(outBytes);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-2 購買商品&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;購買商品要透過launchPurchaseFlow， &lt;br /&gt;launchPurchaseFlow有五個參數， &lt;br /&gt;1. activity &lt;br /&gt;2. product id，就是剛剛上面在developer console新增的那組 &lt;br /&gt;3. request code，onActivityResult時會回傳回來 &lt;br /&gt;4. listener，購買狀態的listener，用來接收購買成功與否 &lt;br /&gt;5. string，可以是空的，可以想像成是補充說明的意思，一樣在購買之後會回傳回來 &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    if (mHelper != null) {&lt;br /&gt;        mHelper.launchPurchaseFlow(this,&lt;br /&gt;                SKU_PREMIUM,&lt;br /&gt;                10001,&lt;br /&gt;                mPurchaseFinishedListener,&lt;br /&gt;                &quot;bGoa+V7g/yqDXvKRqq+JTFn4uQZbPiQJo4pf9RzJ&quot;);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener = new IabHelper.OnIabPurchaseFinishedListener() {&lt;br /&gt;        public void onIabPurchaseFinished(IabResult result, Purchase purchase) {&lt;br /&gt;            if (result.isFailure()) {&lt;br /&gt;                Log.e(TAG, &quot;Error purchasing: &quot; + result);&lt;br /&gt;                return;&lt;br /&gt;            } else if (purchase.getSku().equals(SKU_PREMIUM)) {&lt;br /&gt;                Toast.makeText(getApplicationContext(), &quot;buy success&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                Log.d(TAG, &quot;Success purchasing:&quot;);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    };&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-3 查詢是否有購買&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;在購買成功以後，android會把購買的結果cache在機器上， &lt;br /&gt;以便快速地查詢， 查詢要透過queryInventoryAsync， &lt;br /&gt;queryInventoryAsync有二個參數， &lt;br /&gt;1. 是否要query product detail（ex: price） &lt;br /&gt;2. listener  &lt;br /&gt;其實第一個參數不一定要， &lt;br /&gt;但是當你在沒有網路的情況下， 你的request一定都會是fail， &lt;br /&gt;以至於你無法判斷這個user是否有購買了商品，&lt;br /&gt;且如果你加了第一個參數，你就無法得到商品的detail資訊． &lt;br /&gt;所以使用者要自己衡量一下何時該用．  &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    mHelper.queryInventoryAsync(false,mGotInventoryListener);&lt;br /&gt;    QueryInventoryFinishedListener mGotInventoryListener = new QueryInventoryFinishedListener() {&lt;br /&gt;        public void onQueryInventoryFinished(IabResult result, Inventory inventory) {&lt;br /&gt;&lt;br /&gt;            if (result.isFailure()) {&lt;br /&gt;                // handle error here&lt;br /&gt;            } else {&lt;br /&gt;                // does the user have the premium upgrade?&lt;br /&gt;                boolean mIsPremium = inventory.hasPurchase(SKU_PREMIUM);&lt;br /&gt;                if (mIsPremium) {&lt;br /&gt;                    Toast.makeText(getApplicationContext(), &quot;buy&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                }else {&lt;br /&gt;                    Toast.makeText(getApplicationContext(), &quot;no buy&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    };&lt;br /&gt;&lt;/pre&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-4 Error handling&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;最後一步驟，如果你launchPurchaseFlow了第一次，然後取消！ &lt;br /&gt;隨即馬上launchPurchaseFlow第二次，絕對會crash， &lt;br /&gt;原因是因為在onActivityResult中要做點處理， &lt;br /&gt;我覺得這很tricky，因為在官網上並沒有提到！ &lt;br /&gt;是去看他的example code才發現的！ &lt;br /&gt;最後也要記得destroy這個helper．  &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    @Override&lt;br /&gt;    protected void onActivityResult(int requestCode, int resultCode, Intent data) {&lt;br /&gt;        Log.d(TAG, &quot;onActivityResult handled by IABUtil.1&quot;);&lt;br /&gt;        // Pass on the activity result to the helper for handling&lt;br /&gt;        if (mHelper!=null &amp;amp;&amp;amp; !mHelper.handleActivityResult(requestCode, resultCode, data)) {&lt;br /&gt;            Log.d(TAG, &quot;onActivityResult handled by IABUtil.2&quot;);&lt;br /&gt;            // not handled, so handle it ourselves (here&#39;s where you&#39;d&lt;br /&gt;            // perform any handling of activity results not related to in-app&lt;br /&gt;            // billing...&lt;br /&gt;            super.onActivityResult(requestCode, resultCode, data);&lt;br /&gt;        } else {&lt;br /&gt;            Log.d(TAG, &quot;onActivityResult handled by IABUtil.&quot;);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onDestroy() {&lt;br /&gt;        super.onDestroy();&lt;br /&gt;        if (adView != null) {&lt;br /&gt;            adView.destroy();&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        if (mHelper != null)&lt;br /&gt;            mHelper.dispose();&lt;br /&gt;        mHelper = null;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;9. Test&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;要測試IBA真的是件麻煩的事情， &lt;br /&gt;要做兩件事， &lt;br /&gt;1. create test account &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因為你用自己的developer account測，會永遠無法購買， &#39;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;會跟你說publisher cannot purchase this item. &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以要去到developer console中的setting裡面加一組test account， &lt;br /&gt;2. Export Signed Application &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因為你無法用debug key去build app， &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用debug key build出來的app是無法測試的... &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以得用production key sign出來的app才可以測試． &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;接著再把sign好的apk裝在手機上就可以測試了！         &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
 </entry>
 
 <entry>
   <title>Android Backup service API  (backup internal database)</title>
   <link href="http://blog.kenyang.net/2014/10/13/android-backup-service-api-backup"/>
   <updated>2014-10-13T11:22:00+08:00</updated>
   <id>http://blog.kenyang.net/2014/10/13/android-backup-service-api-backup</id>
   <content type="html">&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;這篇要講Android自己的&lt;a href=&quot;http://developer.android.com/training/cloudsync/backupapi.html&quot;&gt;backup service&lt;/a&gt;，&lt;br /&gt;其實使用起來蠻簡單的，&lt;br /&gt;主要分成下面4個步驟，&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Register for Android Backup Service&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;首先要先去註冊一個API Key，先到這個&lt;a href=&quot;https://developer.android.com/google/backup/signup.html?csw=1&quot;&gt;網站&lt;/a&gt;，&lt;br /&gt;進去以後輸入你的package name，接著就會給你一組API key．&lt;br /&gt;這樣就註冊完成．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Configuration&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;完成上面的註冊以後，接著要對你的project做configuration，&lt;br /&gt;先開啟你的AndroidManifest.xml，&lt;br /&gt;先在application element加上一個android:backupAgent這個attribute，&lt;br /&gt;這個attribute的名字，就是待會你新增的class名稱，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;application android:label=&amp;quot;MyApp&amp;quot;&lt;br /&gt;             android:backupAgent=&amp;quot;ExpenseBackupAgent&amp;quot;&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著在application之中，加入下段的meta data，&lt;br /&gt;記得把xxxxxxxxxx換成你剛剛註冊的API Key，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;meta-data android:name=&amp;quot;com.google.android.backup.api_key&amp;quot;&lt;br /&gt;android:value=&amp;quot;xxxxxxxxxxxxxxxxxxx&amp;quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Backup internal database&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著新增一個Class，這個Class要繼承BackupAgentHelper，&lt;br /&gt;記得這Class名稱要跟你manifest.xml中的一樣！&lt;br /&gt;這裡要題外話一下，其實你也可以繼承BackupAgent，&lt;br /&gt;當你如果需要做到更複雜的backup時，&lt;br /&gt;例如你不想backup整份file，你只想backup某個&quot;部分&quot;的data，&lt;br /&gt;這時候你只能透過BackupAgent去做到，&lt;br /&gt;而BackupAgentHelper其實也只是BackupAgent的一個wrapper，&lt;br /&gt;讓你更輕易的backup和restore罷了．&lt;br /&gt;回到主題，先新增一個class繼承BackupAgentHelper，內容如下，&lt;br /&gt;在onCreate裡面用到了FileBackupHelper，&lt;br /&gt;最原始的FileBackupHelper是真的用來backup某個file，&lt;br /&gt;但因為我們這裡要backup db，&lt;br /&gt;所以我們要override掉getFilesDir，&lt;br /&gt;在getFilesDir中去拿db的路徑，&lt;br /&gt;然後透過FileBackupHelper去做backup！&lt;br /&gt;只要透過下面的code就可以幫你自動backup和restore了！&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class ExpenseBackupAgent extends BackupAgentHelper {&lt;br /&gt;    private static final String DB_NAME = &quot;expense&quot;; // db名稱&lt;br /&gt;    private static final String TAG = ExpenseBackupAgent.class&lt;br /&gt;            .getCanonicalName();&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate() {&lt;br /&gt;        Log.e(TAG, &quot;backu db&quot;);&lt;br /&gt;        FileBackupHelper dbs = new FileBackupHelper(this, DB_NAME);&lt;br /&gt;        addHelper(&quot;dbs&quot;, dbs);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public File getFilesDir() {&lt;br /&gt;        final File f = getDatabasePath(DB_NAME);&lt;br /&gt;        return f.getParentFile();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;雖然說backup和restore都是自動的，&lt;br /&gt;那麼要怎麼主動的去request backup？&lt;br /&gt;那就要用BackupManager了，&lt;br /&gt;透過dataChanged，會去幫你queue這個backup的job，&lt;br /&gt;為什麼是說queue呢？因為backup不會馬上執行的！&lt;br /&gt;都是批次的執行！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;BackupManager bm = new BackupManager(this);&lt;br /&gt;bm.dataChanged();&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;上面說到了Backup都是批次執行，不是即時的，那我該怎測試呢？&lt;br /&gt;要透過adb了，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;adb shell bmgr backup packagename  # 等於dataChanged&lt;br /&gt;adb shell bmgr run                 # 立即去trigger backup job&lt;br /&gt;adb uninstall packagename          # 先刪掉app&lt;br /&gt;&lt;/pre&gt;最後再安裝一次你的app，&lt;br /&gt;打開以後應該會發現你的資料都還在！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
 </entry>
 
 
</feed>
