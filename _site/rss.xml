<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Ken Yang筆記</title>
        <description>Ken Yang筆記 - Ken Yang</description>
        <link>http://blog.kenyang.net</link>
        <atom:link href="http://blog.kenyang.net/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Sun, 11 Jun 2017 19:25:58 +0800</lastBuildDate>
        <pubDate>Sun, 11 Jun 2017 19:25:58 +0800</pubDate>
        <ttl>60</ttl>


        <item>
                <title>What's MySQL partition</title>
                <description>
&lt;p&gt;efefe&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this is a code
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ssfwefijawefowejo
最近在面試幾個candidate，都說自己有MySQL tuning的經驗，
但進一步問下去，發現連MySQL怎麼用BTree放index，或者怎麼使用partition or sharding都不了解，所以打算來寫一系列的MySQL文章，這篇就先挑簡單的partition來寫。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this is a code
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-whats-partition-and-why&quot;&gt;1. What’s Partition and Why?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;簡單說，Partition是將你的table，根據你的配置去divide成好幾個part；最重要的是，資料都是在同一個DB裡面，這對application來說，可以無感的使用它，卻又享有它的優點。&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;那麼為何要用partition呢？partition的優點在於：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Partition Pruning&lt;/code&gt;：基於已經知道資料在哪個partition的條件下，讓你的SQL operation變快，這包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;select, insert, update ,delete&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;刪除資料&lt;/code&gt;：當你的table很大時，刪除是非常耗時的一件工作，有了partition以後，你可以直接drop該partition，且時間上可以快上非常多。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-when-to-use-partition&quot;&gt;2. When to use partition?&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;而使用partition的時機點，取決於資料量的大小，如果當你的資料只有幾千筆時，其實做partition的意義就不大了。
&amp;lt;/br&amp;gt;
不過partition也不是萬靈丹，當你的資料量成長到一定的數量時，可能也意味著你的application使用人數也成長了，當你所有的操作都在同一個DB上時，partition也是救不了你的application，所以才會有進階的做法，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;sharding&lt;/code&gt;，但&lt;code class=&quot;highlighter-rouge&quot;&gt;sharding&lt;/code&gt;就比較複雜了，不管是對application還是replication來說，所以這就等下一篇有機會再寫吧。
&amp;lt;/br&amp;gt;
簡單說，基於下面的條件你就可以使用partition：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你的table很大&lt;/li&gt;
  &lt;li&gt;如果你知道你一定會去查詢會被partition的column&lt;/li&gt;
  &lt;li&gt;如果你想要快速的刪除歷史資料&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-horizontal-vs-vertical&quot;&gt;3. Horizontal vs Vertical&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Partition分為兩種類型：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Horizontal：同一個row資料可以存在不同的partition上&lt;/li&gt;
  &lt;li&gt;Vertical：不同的column存在不同的partition上&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目前MySQL只支援horizontal partition。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-types-of-mysql-partition&quot;&gt;4. Types of MySQL partition&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;而上面有說到，你可以配置你想要MySQL怎麼擺放你的資料，而配置的種類如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Key(column)：deleted by partition not works&lt;/li&gt;
  &lt;li&gt;Hash(INT expression)：deleted by partition not works&lt;/li&gt;
  &lt;li&gt;RANGE(INT expression) or RANGE COLUMNS()&lt;/li&gt;
  &lt;li&gt;LIST(INT expression) or LIST COLUMNS()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下來會ㄧ一說明各個的差別。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;4-1-key-partitioning&quot;&gt;4-1. Key partitioning&lt;/h4&gt;

&lt;p&gt;如果你是使用key partitioning的話，MySQL會用它自己的hash function算出你這筆資料要放哪裡。&amp;lt;/br&amp;gt;
key的用法為&lt;code class=&quot;highlighter-rouge&quot;&gt;key(column)&lt;/code&gt;，裡面必須為table中的某個欄位，範例如下：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PARTITIONS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的範例，就會根據data的create_time，去divide出10個partition，然後當塞入資料時，會決定要放置到哪個partition。
有二點要注意，key只能使用column當作判斷指標，不能使用expression，以及如果使用key的話，無法根據partition進行刪除。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;4-2-hash-partitioning&quot;&gt;4-2. Hash partitioning&lt;/h4&gt;

&lt;p&gt;Hash的用法為&lt;code class=&quot;highlighter-rouge&quot;&gt;HASH(INT expression)&lt;/code&gt;，裡面一定要是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Int&lt;/li&gt;
  &lt;li&gt;expression且是回傳Int，如&lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH(now())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;MONTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PARTITIONS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的範例，就會根據data的create_time，去divide出12個partition。然後HASH一樣無法根據partition進行刪除。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;4-3-list-partitioning&quot;&gt;4-3. LIST partitioning&lt;/h4&gt;

&lt;p&gt;LIST的用法為&lt;code class=&quot;highlighter-rouge&quot;&gt;LIST(INT expression)&lt;/code&gt;，參數也一定要是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Int&lt;/li&gt;
  &lt;li&gt;expression且是回傳Int，如&lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH(now())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DAYOFWEEK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pWed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pThu&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的範例，就會根據data的DAYOFWEEK(create_time)，去divide出4個partition。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;4-4--range-partitioning&quot;&gt;4-4.  Range partitioning&lt;/h4&gt;

&lt;p&gt;Range的用法為&lt;code class=&quot;highlighter-rouge&quot;&gt;Range(INT expression)&lt;/code&gt;，參數也一定要是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Int&lt;/li&gt;
  &lt;li&gt;expression且是回傳Int，如&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR(now())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;YEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2017&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2018&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2019&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的範例，就會根據data的YEAR(create_time)，簡單說，就是會根據年份去divide出4個partition。
&amp;lt;/br&amp;gt;
使用Range，有二點要注意，必須由低往高去設定，以及會無法insert超出range的資料。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;5-manage-partition&quot;&gt;5. Manage partition&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;上面已經說明怎麼去設置不同type of partition了，接著要說明怎麼&lt;code class=&quot;highlighter-rouge&quot;&gt;新增&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;刪除&lt;/code&gt; partition，&lt;/p&gt;

&lt;h4 id=&quot;5-1-drop-partition&quot;&gt;5-1. Drop partition&lt;/h4&gt;

&lt;p&gt;前面有說到，當table資料量很大時，delete會是一個很耗時的工作，但可以透過drop partition的方式達到相同目的，
當然前提是你知道你的資料在哪個partition上。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5-2-add-partition&quot;&gt;5-2. Add partition&lt;/h4&gt;

&lt;p&gt;由於一開始在建立range or list partition時，不一定會一次建好所有的partition，
以上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt;範例來說，我們也只建立了近3年的資料，但如果到了2020以後，就會無法&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;了，
所以勢必得動態add partition。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2020&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;6-partition-pruning&quot;&gt;6. Partition Pruning&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著要講partition的其中一個優點，就是partition pruning，先建立二張table，一張有partition，另外一張則沒有，
然後依樣塞入一些年份不同的資料。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;YEAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2017&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2018&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2019&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATETIME&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;然後我們可以用MySQL的&lt;code class=&quot;highlighter-rouge&quot;&gt;explain&lt;/code&gt;去觀察select這2張table時，會有什麼變化，以下面的例子來看，
可以發現當查詢有partition的table時，也只去scan 7 rows，且直接從partition p2017, p2018去獲取資料；
反之去查詢沒有partition的table時，是整張table都掃了一次，才找到要的資料。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+-------------+-------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+-------------+-------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_partioned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2018&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+-------------+-------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------------+------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------------+------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_no_partioned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------------+------------+------+---------------+------+---------+------+------+----------+-------------+
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
但是要做到partition pruning，根據不同的配置是有不同的條件的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PARTITION BY KEY(id)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WHERE id = ‘xxxx’;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PARTITION BY HASH(MONTH(create_time))&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WHERE create_time = ‘12’;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PARTITION BY LIST(DAYOFWEEK(create_time))&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WHERE create_time = DAYOFWEEK(now());&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PARTITION BY RANGE(YEAR(create_time))&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;WHERE create_time = now();&lt;/li&gt;
      &lt;li&gt;WHERE create_time between now() AND now() + interval 1 year;&lt;/li&gt;
      &lt;li&gt;WHERE create_time &amp;gt; now();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;7-sub-partition&quot;&gt;7. Sub partition&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;sub partition就是可以讓你在partition中再一次地切割，不過sub partition有先限制，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只有&lt;code class=&quot;highlighter-rouge&quot;&gt;RANGE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LIST&lt;/code&gt;是可以使用sub partition的&lt;/li&gt;
  &lt;li&gt;sub partition type只能是&lt;code class=&quot;highlighter-rouge&quot;&gt;HASH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;KEY&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下面的例子來看，我們主要的partition是以RANGE(id)為主，然後有四個partition（p0,p1,p2,p3），每個底下又根據KEY(name)各切了2個，所以這例子來看，總共有2x4=8個partitions。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SUBPARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SUBPARTITIONS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MAXVALUE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
查詢時，可以直接下&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0sp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;8-conclusion&quot;&gt;8. Conclusion&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;上面是partition的基本知識，這裡彙整一些重點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;partition不是萬靈丹，當用戶數多時，還是得考慮sharding其他方式&lt;/li&gt;
  &lt;li&gt;如果你的table很大，可以考慮使用&lt;/li&gt;
  &lt;li&gt;如果你一定會查詢會被partition的column，可以考慮使用&lt;/li&gt;
  &lt;li&gt;如果你想要快速的刪除歷史資料，可以考慮使用&lt;/li&gt;
  &lt;li&gt;Type of KEY and HASH不能根據partition去刪除資料&lt;/li&gt;
  &lt;li&gt;只有RANGE and LIST可以使用sub partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2017/06/11/whats-mysql-partition</link>
                <guid>http://blog.kenyang.net/2017/06/11/whats-mysql-partition</guid>
                <pubDate>Sun, 11 Jun 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Getting started with webpack</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

最近在看Vue.js，很多文章都是搭配著Webpack來說明，所以也順便研究了一下webpack，
這篇會說明[webpack](https://webpack.js.org/)的優點、以及用途。

&amp;lt;/br&amp;gt;

---
### 1. What's webpack?
---

什麼是[webpack](https://webpack.js.org/)呢？其實官網用一張圖片說明的很清楚，圖片上有幾個title，分別為:

1. bundle your assests
1. bundle your scripts
1. bundle your images
1. bundle your styles

一句話簡單說，可以想像成`打包工具` （但當然不僅於此，否則不會這麼紅）。


&amp;lt;/br&amp;gt;

&lt;!--more--&gt;

---
### 2. Install webpack
---

官網提供了三種的安裝方式，分別為：

1. Local Installation
2. Global Installation (我使用這種）
3. Bleeding Edge

&amp;lt;/br&amp;gt;

#### Local Installation

```bash
npm install webpack --save-dev

npm install webpack@&lt;version&gt; --save-dev
```

官方是最建議用第一種的Local Installation，
但因為是install在local node\_modules底下，即便你在此project folder底下，打`webpack`指令，也是會找不到，但如果你是使用npm script在你的project中的話，就不用太擔心，因為npm會去你的node_modules底下找webpack。

```javascript
&quot;scripts&quot; : {
    &quot;start&quot;: &quot;webpack --config mywebpack.config.js&quot;
}
```

&amp;lt;/br&amp;gt;


#### Global Installation

第二種是官方不推薦使用的Global方式，原因是你會被鎖死在某一個webpack版本，然後假設你有多個project，那有可能就會造成一些error。 

```bash
npm install webpack -g
```

&amp;lt;/br&amp;gt;

#### Bleeding Edge

第三種就是geek在用的，如果想體驗新版本的話就使用此方式。

```bash
npm install webpack/webpack#&amp;lt;tagname/branchname&amp;gt;
```

&amp;lt;/br&amp;gt;

---
### 3. How to bundle?
---

安裝完成以後，要來使用`webpack`來bundle一個project，首先要先建立三個檔案，分別為index.html、app.js以及util.js。

**utils.js**

```javascript
var div = document.createElement(&quot;div&quot;)
div.innerHTML=&quot;Hello worl Ken!&quot;;
document.body.appendChild(div);
```

util.js會去建立一個div element，然後把它塞入body之中。&amp;lt;/br&amp;gt;

**app.js**

```javascript
document.getElementById('app').innerHTML=&quot;Your first webpack pacakge&quot;;
require(&quot;./util.js&quot;);
```

app.js會去找到id為app的element，然後把它塞入字串。

**index.html**

```html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;body&gt;
        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
        &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
```

你會發現index.html中，使用的js是bundle.js，卻不是先前建立的任何一隻js！因為bundle.js就是透過webpack bundle出來的js file。&amp;lt;/br&amp;gt;
有了檔案以後，接下來就可以透過`webpack`來bundle，如果成功的話，就會看到bundle的過程，以及有哪幾隻檔案。

```bash
$ webpack app.js bundle.js
Hash: dc7cbcef87369e1a8e24
Version: webpack 2.2.1
Time: 79ms
    Asset     Size  Chunks             Chunk Names
bundle.js  2.78 kB       0  [emitted]  main
   [0] ./util.js 104 bytes {0} [built]
   [1] ./app.js 87 bytes {0} [built]
```

&amp;lt;/br&amp;gt;

webpack會從app.js中去resolve dependency，把相關的js都bundle至bundle.js當中，而每個js都會被視為一個module，webpack會給每個module一個id，然後透過`__webpack_require__`去呼叫其他module，

完成以後，就可以打開`index.html`，就會看到對應的文字了。

&amp;lt;/br&amp;gt;


---
### 4. Configuration (webpack.config.js)
---

如果我每次改一次檔案就要打一次build指令，然後又都那麼長，是不是很煩？不用擔心，哪一種工具會沒提供configuration？不管是json or yaml，所以webpack也有提供。根據上面的指令，所對應的configuration會長的像下面一樣，

**webpack.config.js**

```javascript
var Webpack = require(&quot;webpack&quot;);
module.exports = {
    entry: [&quot;./app.js&quot;],
    output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
    module: {
        loaders: [{
            test: /\.css$/,
            loader: &quot;style-loader!css-loader&quot;
        }]
    }
}
```

先說明一下上面的每一個參數用意：

1. `entry` : 就是我們javascript的進入點
2. `output` : bundle出來後的檔案位置和檔案名稱
3. `module` : 定義如何處理module的邏輯，以上面例子來說，`test: /\.css$/`意思是，如果檔案為.css結尾的，就使用style-loader和css-loader來去轉換它

了解各個參數的意思以後，就可以直接在資料夾下，輸入`webpack`就可以build了，不需要再打很長串的指令。

```bash
webpack -p
```

&amp;lt;/br&amp;gt;

---
### 5. What's loader?
---

`webpack`本身只能處理javascript的文件，其他靜態的檔案是沒有能力處理的，如果想要處理其他類型的檔案，譬如說css，那就要透過`loader`去將css轉換成js module，這樣我們就能用`require`的方式去使用css。



&amp;lt;/br&amp;gt;

---
### 6. How to use loader?
---

loader在npm上，有很多種，有html template、css、i18n、url-loader、json等等之類的。&amp;lt;/br&amp;gt;
我會以css loader和url-loader來做說明，
&amp;lt;/br&amp;gt;

#### css-loader style-loader


首先先安裝`css-loader`和`style-loader`，

```bash
$ npm install css-loader style-loader --save-dev
```

&amp;lt;/br&amp;gt;
然後來撰寫我們的style.css，

```css
div {
    color: red;
}
```

然後在`app.js`中，引用這個css，

```javascript
document.getElementById('app').innerHTML=&quot;first webpack pacakge&quot;;
require(&quot;./util.js&quot;);
require(&quot;./style.css&quot;);
```

接著把loader的設定加入至`webpack.config.js`，然後重新build一次，


**webpack.config.js**

```javascript
var Webpack = require(&quot;webpack&quot;);
module.exports = {
    entry: [&quot;./app.js&quot;],
    output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
    module: {
        loaders: [{
            test: /\.css$/,
            loader: &quot;style-loader!css-loader&quot;
        }]
    }
}
```

```bash
webpack -p
```

再打開index.html，就會發現你的字體顏色變紅色了

&amp;lt;/br&amp;gt;

#### url-loader

我覺得這是一個超強大的loader，他可以根據你的需求，把一些圖片轉成base64，這樣就可以減輕一些loading！首先先來安裝`url-loader`，


```bash
npm install url-loader --save-dev
```

安裝完之後，來編輯`style.css`，在裡面設定image，

```css
#content {
    background-image: url(img/bg.png);
}
```

然後在`index.html`中，加入對應的`id`，

```html
&amp;lt;!DOCTYPE html&amp;gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;content&quot;&gt;&lt;/div&gt; 
    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
```

然後一樣要在`webpack.config.js`中加入url-loader的設定，

```javascript
var Webpack = require(&quot;webpack&quot;);
module.exports = {
    entry: [&quot;./app.js&quot;],
    output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: &quot;style-loader!css-loader&quot; },
            { test: /\.(png|jpg)$/, loader: 'url-loader?limit=40000' }
        ]
    }
}
```

最後再來build一次，

```bash
webpack -p
```

build完以後，打開`index.html`以及browser developer mode，會發現該張圖片已經變成base64編碼。


&amp;lt;/br&amp;gt;

---
### 7. webpack-dev-server
---

這應該是我覺得webpack這屌的東西了，`webpack-dev-server`是一個小型的Node.js Express server，一旦你啟動了`webpack-dev-server`，&amp;lt;/br&amp;gt;
它會根據你的`config`去bundle，然後host一個HTTP Server，你可以透過此server看到你的html。&amp;lt;/br&amp;gt;
最強的是！它會去幫你monitor你所有檔案，一旦有變更，都會是live reload，譬如說你改了css某個值，&amp;lt;/br&amp;gt;
然後馬上跑去browser看，會發現它已經變更了！完全不用自己手動refresh！&amp;lt;/br&amp;gt;

使用方式很簡單，首先先安裝，

```bash
npm install webpack-dev-server -g
```

安裝完以後，在放置`webpack.config.js`的folder底下，輸入指令，

```bash
webpack-dev-server
```

如果成功應該會看到一長串的內容，包含跟你說server的port等等相關資訊。
webpack就先講到這了，有進階應用的話再來補充。

&amp;lt;/br&amp;gt;







&amp;lt;/font&amp;gt;
&lt;/version&gt;&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2017/02/18/getting-started-with-webpack</link>
                <guid>http://blog.kenyang.net/2017/02/18/getting-started-with-webpack</guid>
                <pubDate>Sat, 18 Feb 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Update Node.js version</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

Node.js updates quickly. Fortunately, there are a ton of tools for updating Node.js easily.

1. nvm
2. n

Today, I'm gonna use `n` to update `Node.js`.



&amp;lt;/br&amp;gt;

&lt;!--more--&gt;

---
### 1. Install n
---

```bash
$ npm install -g n
```

&amp;lt;/br&amp;gt;

---
### 2. Update Node.js to stable version
---

```bash
$ n stable
```

You can replace the `stable` with whataver version you want.

&amp;lt;/br&amp;gt;

---
### 3. Check what versions are installed
---

```bash
$ n
```



&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2017/02/07/update-nodejs-version</link>
                <guid>http://blog.kenyang.net/2017/02/07/update-nodejs-version</guid>
                <pubDate>Tue, 07 Feb 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Getting started with Kafka in Node.js</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

之前有講過[Kafka的用途以及如何安裝](http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging)，這篇會講如何用`Node.js`去連結`Kafka`，至於安裝Kafka的部分就請去[上一篇](http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging)來看。


&amp;lt;/br&amp;gt;

---
### 1. Create a topic
---

首先，先用CLI去建立一個topic，這topic等等會被Node.js subcribe。

```bash
$ cd $YOUR_PATH/kafka_2.11-0.10.1.0
$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic open
```

可以用下面的指令去看topic是否建立成功：

```bash
$ bin/kafka-topics.sh --list --zookeeper localhost:2181
```

&amp;lt;/br&amp;gt;


&lt;!--more--&gt;


---
### 2. Install kafka-node
---

這一步驟要安裝kafka的Node.js module，這裡選用的是`kafka-node`（其實選擇也不多）。

```bash
$ mkdir /opt/kafka-test
$ cd /opt/kafka-test
$ npm install kafka-node --no-optional --save
```

&amp;lt;/br&amp;gt;

---
### 3. Connect to Zookeeper and Send message (Producer.js)
---

接著就可以在Node.js中使用`kafka-node`，首先要先connect到你自己的Zookeeper，再來就可以對我們剛剛建立的topic進行傳送訊息。&amp;lt;/br&amp;gt;
傳訊息是透過`producer.send`這方式，成功以後我會去做`client.close()`的動作，因此這隻node.js每次執行完就會關閉了。

```javascript
var kafka = require('kafka-node'),
    Producer = kafka.Producer,
    client = new kafka.Client('${YOUR_HOST}:2181'),
    producer = new Producer(client),
    payloads = [
        { topic: 'open', messages: ['hello world from nodejs'] }
    ];

producer.on('ready', function () {
    producer.send(payloads, function (err, data) {
        console.log(err || data);
        client.close();
    });
});

producer.on('error', function (err) {})
```

&amp;lt;/br&amp;gt;

---
### 4. Connecto to Kafka Server and Receiver message (Consumer.js)
---

接著就是implement `consumer.js`，基本上跟上面的Producer沒有太大差別，比較需要說明的參數是`autoCommit`，一旦設為true，在你的consumer收到這則message時，就會被標記已讀的概念，接下來其他的consumer就不會再收到。

```javascript
var kafka = require('kafka-node'),
    Consumer = kafka.Consumer,
    client = new kafka.Client('${YOUR_HOST}:2181'),
    consumer = new Consumer(
        client,
        [
            { topic: 'open', partition: 0 }
        ],
        {
            autoCommit: true
        }
    );

consumer.on('message', function (message) {
    console.log(message);
});

```

&amp;lt;/br&amp;gt;

這裡我有踩到一個雷，由於我是把Kafka放在EC2上，然後EC2綁了一個elastic IP，但我的consumer並不是放在EC2上，而是放在某個local VM裡面，在連接的時候，一直遇到下面的error message，解決方式很簡單，只要在你的`/etc/hosts`裡面增加一筆mapping就好了。

```
Error: getaddrinfo ENOTFOUND ip-xxx-xxx-xxx-xxx ip-xxx-xxx-xxx-xxx:9092
```

&amp;lt;/br&amp;gt;

---
### 5. Testing
---

先在放置consumer.js的機器上執行它，

```bash
$ node consumer.js
```

接下來就執行producer.js，由於上面第三步驟有提到，在send完以後會把close client，所以執行完producer以後，這隻js就會被關閉。可以一直不斷執行這隻檔案，你會在consumer那台機器上不斷看到訊息傳遞過來。

```bash
$ node producer.js
```

&amp;lt;/br&amp;gt;

---
### 6. Advance
---

kafka server在連zookeeper時，default的IP and Port是存在`config/server.properties`裡面的`zookeeper.connect`。
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
由於我的EC2 ram很小，所以在launch Kafka時，一直發生OOM，解決方式是去`bin/kafka-server-start.sh`改`KAFKA_HEAP_OPTS`，

```
if [ &quot;x$KAFKA_HEAP_OPTS&quot; = &quot;x&quot; ]; then
    export KAFKA_HEAP_OPTS=&quot;-Xmx500M -Xms500M&quot;
fi
```






&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2017/02/07/getting-started-with-kafka-in-nodejs</link>
                <guid>http://blog.kenyang.net/2017/02/07/getting-started-with-kafka-in-nodejs</guid>
                <pubDate>Tue, 07 Feb 2017 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Remotely open door using Raspberry Pi</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

由於上一篇寫了一個Telegram Bot，最近就在幫它加feature，

1. 出build時會通知
2. 開會時會通知
3. 11:30提醒要吃飯了

總覺得少了點什麼，於是就想說來做個機器人自動開門。&amp;lt;/br&amp;gt;
在開始之前，先準備以下材料：

1. Raspberry Pi 3: 1台
2. 杜邦線: 至少4條
3. 麵包板: 1塊
3. 漆包線: 可有可無
4. 一顆勇敢的心（因為你可能用壞，導致整個公司的人被反鎖）

下圖為完成品，

![Ticket](http://localhost:4000/assets/2016-09-14-finish.jpg)


&amp;lt;/br&amp;gt;

&lt;!--more--&gt;

---
### 1. 拆開電源座
---

大部分的公司，門旁邊應該都有一個開關，不管是感應式的或者是按鈕式的也好，只要一trigger，門就會打開。&amp;lt;/br&amp;gt;
也就是說開關一定接著門的trigger，所以我們要做man in the middle hack...LOL...&amp;lt;/br&amp;gt;
所以首先要把電源拆掉，然後拿出來（如下圖），

![Ticket](http://localhost:4000/assets/2016-09-14-1.jpg)

拿出來以後會看到有二條線接在電源開關上，分別為一紅一黑，把這二條線從開關中拔出來，&amp;lt;/br&amp;gt;
然後你要先找出你的正極跟負極分別為哪一條，我的黑色是正，紅色是負。

&amp;lt;/br&amp;gt;

---
### 2. 接線 （backward compatible）
---

為了讓原本的開關也可以正常work，所以我們必須把上面拆出來的電源線接在麵包板上，然後在接另外2條杜邦線，&amp;lt;/br&amp;gt;
一頭接在開關上面，另一頭接在麵包板上面，如下圖。

![Ticket](http://localhost:4000/assets/2016-09-14-3.png)

&amp;lt;/br&amp;gt;

---
### 3. 接上Raspberry Pi 3
---

接著要再接上2條杜邦線，一頭接在Pi上的GPIO，另一頭一樣接在麵包板上，&amp;lt;/br&amp;gt;
如果不知道接在哪個Pin腳，可以[Google一下Raspberry Pi 3的GPIO圖](https://www.google.com.tw/search?q=raspberry+3+gpio&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwiJl-jJ3o7PAhXEj5QKHdpyC3QQ_AUICCgB&amp;amp;biw=1920&amp;amp;bih=916)，&amp;lt;/br&amp;gt;
我自己是接在Pin 7 and 6上面，正極在7，負極在6，如下圖。然後分別把它接在對應的麵包板位置上。

![Ticket](http://localhost:4000/assets/2016-09-14-4.jpg)

&amp;lt;/br&amp;gt;

---
### 4. 寫Code
---

最後就要來寫code，我這裡是使用NodeJS加上Python，因為用NodeJS setup web server很快速簡單，&amp;lt;/br&amp;gt;
然後用python控制GPIO也很簡單，所以就用這二種組合。&amp;lt;/br&amp;gt;
首先先寫Python來透過GPIO來開門，由於現在的Raspbian預設就有Rpi.GPIO，所以你可以直接使用。

```python
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)
GPIO.setup(7, GPIO.OUT)

GPIO.output(7, GPIO.LOW)
time.sleep(0.5)
GPIO.output(7, GPIO.HIGH)

GPIO.cleanup()
```

&amp;lt;/br&amp;gt;

接著就來用NodeJS來建立Web Server，詳細的步驟就[參考上一篇](http://blog.kenyang.net/2016/09/06/how-to-create-a-telegram-bot)，&amp;lt;/br&amp;gt;
如果建立完Web Server以後，我們得加裝另一個module，因為我們要call python script，

```bash
npm install --save python-shell
```

&amp;lt;/br&amp;gt;
接著就可以在index.js裡面加入下面的code，

```javascript
const https     = require(&quot;https&quot;);
const express   = require(&quot;express&quot;);
const bodyParser    = require('body-parser');
const logger        = require('morgan');
const fs            = require('fs');
const request     = require('request');
const logStream     = fs.createWriteStream('/var/log/bot/access.log', {flags: 'a'});
var PythonShell = require('python-shell');

.... ignore ....

if (cmd == '/open') {
    PythonShell.run('open.py', {}, function (err, results) {
        if (err) {
	        console.log(err);
	     }
	 });
}
```

&amp;lt;/br&amp;gt;
然後記得restart。

```bash
pm2 restart index
```

&amp;lt;/br&amp;gt;

---
### 5. Test
---

完成上面的步驟以後，你就可以跟你的機器人講`/open`，他就會幫你開門了！

![Ticket](http://localhost:4000/assets/2016-09-14-5.jpg)


&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2016/09/14/remotely-open-door-using-raspberry-pi</link>
                <guid>http://blog.kenyang.net/2016/09/14/remotely-open-door-using-raspberry-pi</guid>
                <pubDate>Wed, 14 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How to create a Telegram Bot</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

今天看到一個朋友寫了FacebookBot，還整了AWS Lambda、斷詞API，突然感到很興奮，&amp;lt;/br&amp;gt;
但我沒打算花太多時間在Bot上，只打算做一個簡單的資訊查詢的bot，&amp;lt;/br&amp;gt;
所以選擇了[Telegram Bot](https://core.telegram.org/bots/api)，原因是我們公司內部使用Telegram來溝通，&amp;lt;/br&amp;gt;
所以就想做一個Bot讓公司的同事查詢一些公司資訊（ex: wifi, 統編）。


&amp;lt;/br&amp;gt;

---
### 1. Add BotFather as friend
---

首先我們要使用telegram加`BotFather`這個user，透過`BotFather`去create bot。

![Ticket](http://localhost:4000/assets/2016-09-06-add-bot-father.png)


&amp;lt;/br&amp;gt;

---
### 2. Create a bot
---

成功加入`BotFather`以後，就可以透過指令`/newbot`去create bot，&amp;lt;/br&amp;gt;
整個過程會以對話的方式進行（如下圖），會先問你的bot名稱要叫什麼以及它的username（類似ID，用來被search），&amp;lt;/br&amp;gt;

![Ticket](http://localhost:4000/assets/2016-09-06-create-bot.png)

&amp;lt;/br&amp;gt;

建立成功以後，BotFather就會跟你說的你的bot token，這token很重要，是之後要用來request API用的。

```
Use this token to access the HTTP API:
2X2X2XXX0:XXXXXXXXXXXXXXXXXXXXXXX
```

&amp;lt;/br&amp;gt;

&lt;!--more--&gt;


---
### 3. Send/Receive message from bot
---

Telegram在receive訊息有二種方式，一種是透過RESTful API去要，但是被動的方式，得透過long-pulling的方式去拿，&amp;lt;/br&amp;gt;
另外一種就是透過web hook，是主動的方式，有任何訊息給bot，Telegram會主動的去打我們的Server，&amp;lt;/br&amp;gt;
這裡的案例是使用webhook，而在send and receive訊息之前，&amp;lt;/br&amp;gt;
我們必須先建立一個**HTTPS** server，Telegram規定一定必須為HTTPS，&amp;lt;/br&amp;gt;
不過是允許用self-signed的，但前提是你得把public key上傳至telegram，&amp;lt;/br&amp;gt;
稍後都會說明如何上傳。
這裡我選擇在ubuntu上，使用Node.js來建立HTTPS server，下面的步驟分為三個部分：&amp;lt;/br&amp;gt;

1. Install Node.js
2. Create web project
3. Generate SSL certificate


```bash
# Install Node.js
$ wget https://nodejs.org/dist/v4.4.7/node-v4.4.7-linux-x64.tar.gz
$ tar -xvzf node-v4.4.7-linux-x64.tar.gz
$ export PATH=/home/ubuntu/node-v4.4.7-linux-x64/bin:$PATH

# Create bot web project
$ cd ~/
$ mkdir bot/
$ cd bot
$ npm init
$ npm install --save express
$ npm install --save body-parser
$ npm install --save request
$ npm install --save morgan
$ npm install -g pm2
$ mkdir ssl
$ cd ssl

# Generate SSL certificate
$ openssl req -newkey rsa:2048 -sha256 -nodes -keyout server.key -x509 -days 3650 -out server.pem -subj &quot;/C=TW/ST=Taipei/L=Taipei/O=None/CN=bot.kenyang.net&quot;
$ cd ../
$ mkdir -p /var/log/bot/
```

&amp;lt;/br&amp;gt;
接著來寫我們的主程式`index.js`，記得把下面的`YOUR_TOKEN`換成你自己的token，

```javascript
const https     = require(&quot;https&quot;);
const express   = require(&quot;express&quot;);
const bodyParser    = require('body-parser');
const logger        = require('morgan');
const fs            = require('fs');
const request     = require('request');
const logStream     = fs.createWriteStream('/var/log/bot/access.log', {flags: 'a'});

const SERVER_CONFIG = {
    key:  fs.readFileSync('./ssl/server.key'),
    cert: fs.readFileSync('./ssl/server.pem')
};

var app = express();

app.use(logger('combined', {stream: logStream}));
app.use(logger('dev'));
app.use(bodyParser.json());

app.post('/receive', function(req,resp) {
    console.log(req.body);
    var body = req.body;
    if (!body) {
        resp.status(200).json({&quot;STATUS&quot;:&quot;No body&quot;});
        return;
    }

    if (!body.message) {
        resp.status(200).json({&quot;STATUS&quot;:&quot;No message&quot;});
        return;
    }

    var chatId = body.message.chat.id;
    var cmd    = body.message.text;
    cmd = cmd.toLowerCase();
    
    // 記得把YOUR_TOKEN換成你自己的
    var options = {
        url: 'https://api.telegram.org/botYOUR_TOKEN/sendMessage',
        form : {
            chat_id: chatId
        }
    };

    if (cmd == '/wifi') {
        options.form.text =  'Your Wi-Fi password is : !@#!$%^&amp;amp;*&amp;amp;$#';
    } else if (cmd == '/address' || cmd == '/addr' || cmd == '/office') {
        options.form.text =  '台北市信義區松X路XXX號XX樓';
    } else if (cmd == '/統編') {
        options.form.text =  'xxxxxxxxx';
    } else if (cmd == '/ken') {
        options.form.text =  'Ken is an engineer.';
    } else {
        options.form.text =  'I don\'t know what you are talking...';
    }

    request.post(options, function(err,httpResponse,body){
        if (err) {
            console.log('err' + err);
            resp.status(200).json({&quot;STATUS&quot;:&quot;FAIL&quot;});
            return;
        }
        console.log(body);
        resp.status(200).json({&quot;STATUS&quot;:&quot;OK&quot;});
    });

});

https.createServer(SERVER_CONFIG, app)
     .listen(443,function() { console.log(&quot;HTTPS sever started&quot;); }
);

```

&amp;lt;/br&amp;gt;
完成以後就用pm2把它run起來，

```
$ pm2 start index.js
```

&amp;lt;/br&amp;gt;

---
### 4. Set webhook
---

接著我們得向Telegram註冊剛剛建立的API，讓bot收到訊息時，Telegram會主動通知我們，&amp;lt;/br&amp;gt;
我們透過curl去註冊，同時會把剛剛create的certificate上傳上去Telegram，&amp;lt;/br&amp;gt;
記得把下面參數換成你自己的。

```
$ curl -i -X POST -H &quot;Content-Type: multipart/form-data&quot; -F &quot;certificate=@server.pem&quot; -F &quot;url=https://YOUR_DOMAIN/receive&quot; https://api.telegram.org/botYOUR_TOKEN/setWebhook
```

&amp;lt;/br&amp;gt;

---
### 5. Test
---

Set webhook成功以後，就可以跟你的bot進行互動測試了。

![Ticket](http://localhost:4000/assets/2016-09-06-test.png)


&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2016/09/06/how-to-create-a-telegram-bot</link>
                <guid>http://blog.kenyang.net/2016/09/06/how-to-create-a-telegram-bot</guid>
                <pubDate>Tue, 06 Sep 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Android: App bar/Tool bar</title>
                <description>
&lt;font size=&quot;3&quot;&gt;

大概一年多沒有寫Android了，最近發現好多不一樣了，&amp;lt;/br&amp;gt;
譬如說ActionBar變成AppBar..不過以前的ActionBar還能繼續用，&amp;lt;/br&amp;gt;
但還是得學一下怎麼用App bar跟上潮流。

[Example Code on Github] (https://github.com/Ken-Yang/AndroidAppBar)


&amp;lt;/br&amp;gt;

---
### 1. Create new project
---

首先先建立一個新的project，然後選擇Empty activity。

&amp;lt;/br&amp;gt;

---
### 2. Add dependency
---

接著打開build.gradle，把appcompat加入dependency，&amp;lt;/br&amp;gt;
不過如果你的Android Studio是新版的，就會自動幫你加入了。

```xml
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}
```

&lt;!--more--&gt;

&amp;lt;/br&amp;gt;

---
### 3. Remove actionbar
---

因為Default style會去繼承ActionBar Theme，所以我們要把它移除掉，&amp;lt;/br&amp;gt;
打開`style.xml`，然後把parent改成`Theme.AppCompat.Light.NoActionBar`。

```xml
&lt;!-- Base application theme. --&gt;
&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
&lt;/style&gt;
```

&amp;lt;/br&amp;gt;

---
### 4. Color your App Bar
---

接著要去設定App Bar的顏色，AppBar主要有兩種顏色：

1. **colorPrimary** : 以前ActionBar那條的背景顏色
2. **colorPrimaryDark** : Status 那條的背景顏色

&amp;lt;/br&amp;gt;

首先要先在`color.xml`中，新增上述的二個顏色。

```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;color name=&quot;colorPrimary&quot;&gt;#FF5722&lt;/color&gt;
    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#E64A19&lt;/color&gt;
&lt;/resources&gt;
```

接著在`style.xml`中指定上述的二個顏色。

```xml
&lt;!-- Base application theme. --&gt;
&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
    &lt;!-- Customize your theme here. --&gt;
    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;
    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;
&lt;/style&gt;
```

&amp;lt;/br&amp;gt;

---
### 5. Create a toobar
---

接著去`res/layout`資料夾中，建立一個名稱為`too_bar.xml`的layout file，內容如下，有幾個需要說明的屬性為：

1. **theme**: 指定了Dark.ActionBar，是為了設定AppBar的一些style，譬如說字體顏色，Dark.ActionBar的字體顏色就是白色
2. **popupTheme**: 當你點擊ActionItem時，會popup一個list，這個list的theme
3. **background** : Toolbar的背景顏色

```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;android.support.v7.widget.Toolbar xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot; app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; android:background=&quot;@color/colorPrimary&quot;&gt;

&lt;/android.support.v7.widget.Toolbar&gt;
```

&amp;lt;/br&amp;gt;

---
### 6. Add the toolbar into activity
---

然後要在主要的layout中，include上面的`tool_bar.xml`。

```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.ag888.ams.LoginActivity&quot;&gt;

    &lt;include android:id=&quot;@+id/tool_bar&quot; layout=&quot;@layout/tool_bar&quot; /&gt;

    &lt;TextView android:layout_below=&quot;@+id/tool_bar&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello World!&quot; /&gt;
&lt;/RelativeLayout&gt;

```

&amp;lt;/br&amp;gt;

---
### 7. Setup toolbar as actionbar
---

完成上面步驟以後，你可以試著run看看，但你會發現就只是簡單的一條bar而已，&amp;lt;/br&amp;gt;
並沒有title或者action item之類的，所以接下要把toolbar設定成ActionBar，&amp;lt;/br&amp;gt;
把`ToolBar`丟進去`setSupportActionBar()`就可以了。

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_login);

    toolbar = (Toolbar) findViewById(R.id.tool_bar);
    setSupportActionBar(toolbar);
}
```

&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;


&lt;/font&gt;
</description>
                <link>http://blog.kenyang.net/2016/06/22/android-app-bartool-bar</link>
                <guid>http://blog.kenyang.net/2016/06/22/android-app-bartool-bar</guid>
                <pubDate>Wed, 22 Jun 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Setting up an HTTPS server with Node.js</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;這篇要講怎麼用Node.js建立一個HTTPS的server，如果你的certificate不是self-signed的，&amp;lt;/br&amp;gt;
那設定HTTPS並不難，產生CSR給CA provider，然後就會有certificate，把它放進去就好，&amp;lt;/br&amp;gt;
但如果是self-signed，那過程就有點麻煩，每次要弄的時候，都還是會有點忘記，所以乾脆把過程記錄下來好了。&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-creating-a-private-key-and-csr&quot;&gt;1. Creating a private key and CSR&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;在create certificate之前，必須要先有&lt;code class=&quot;highlighter-rouge&quot;&gt;private key&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;CSR&lt;/code&gt; (certificate signing request)，&amp;lt;/br&amp;gt;
所以我們要先generate出private key以及CSR。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# generate private key&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;openssl genrsa -des3 -passout pass:kenyang -out server.pass.key 2048
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;openssl rsa -passin pass:kenyang -in server.pass.key -out server.key
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rm server.pass.key

&lt;span class=&quot;c&quot;&gt;# generate csr&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;openssl req -new -key server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-creating-a-certificate&quot;&gt;2. Creating a certificate&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;有了key和CSR以後，我們就可以issue一張certificate出來，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-configuring-ssl-in-nodejs&quot;&gt;3. Configuring SSL in Node.js&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;有了certificate以後，就可以把它放在Node.js中使用，&amp;lt;/br&amp;gt;
這裡我搭配的&lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;這二個module，https這個module，default就有了，&amp;lt;/br&amp;gt;
所以我們只需要安裝&lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;就好。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --save express
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
接著就把下面的內容貼入到&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;當中，&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SERVER_CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'server.key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'server.crt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;STATUS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SERVER_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTPS sever started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
靠&lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt;去讀取certificate，然後再餵給&lt;code class=&quot;highlighter-rouge&quot;&gt;createServer&lt;/code&gt;，這樣就完成了https server。&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2016/04/16/setting-up-an-https-server-with-nodejs</link>
                <guid>http://blog.kenyang.net/2016/04/16/setting-up-an-https-server-with-nodejs</guid>
                <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Getting started with Kubernetes</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;Docker玩了一陣子，總覺得沒有玩一些container management的service好像少了點什麼，&amp;lt;/br&amp;gt;
剛好team裡用到&lt;a href=&quot;http://kubernetes.io/docs/&quot;&gt;Kubernetes&lt;/a&gt;，所以這裡就記錄一下怎麼使用&lt;a href=&quot;http://kubernetes.io/docs/&quot;&gt;Kubernetes&lt;/a&gt;。&amp;lt;/br&amp;gt;
然後這篇會把Kubernetes架在Google Cloud Platform上面，所以還得去安裝Google Cloud SDK。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-downloading-kubernetes&quot;&gt;1. Downloading Kubernetes&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;第一步驟要先安裝Kubernetes，安裝方式有好幾種，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;tarball解開&lt;/li&gt;
  &lt;li&gt;Build from source&lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;Remote shell script&lt;/li&gt;
  &lt;li&gt;用Google Cloud SDK安裝&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;各個的詳細步驟可以去&lt;a href=&quot;http://kubernetes.io/docs/getting-started-guides/binary_release/&quot;&gt;Kubernetes安裝頁面&lt;/a&gt;看，我自己是選擇透過Google Cloud SDK來安裝，所以首先要先安裝Google Cloud SDK。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;安裝Google Cloud SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud SDK這個tool讓你可以對Google Cloud Platform進行操作。安裝指令如下，Default installation path會在你的home目錄底下，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl https://sdk.cloud.google.com | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著要restart shell和設定gcloud environment，&lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud init&lt;/code&gt;這個指令會彈出browser要你login，以及要你輸入default zone，我是選asia-east1-a。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -l &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;安裝kubectl&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud components install kubectl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-setup-google-cloud&quot;&gt;2. Setup Google Cloud&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;在這步驟要做幾件事情，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;註冊&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;Google Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create project&lt;/li&gt;
  &lt;li&gt;打開billing&lt;/li&gt;
  &lt;li&gt;開啟Container Engine API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;Step 1. 註冊&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;Google Cloud&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;點了上面的連結至console以後，就發現其實是以前的Google App Engine+Google APIs的後台，&amp;lt;/br&amp;gt;
只不過好久沒用了，發現改版改好多..
然後又發現新註冊的user有免費300美金的quota可以使用，&amp;lt;/br&amp;gt;
舊有的用戶還沒有這300美金可以用，所以建議可以乾脆註冊新帳號使用比較好。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;Step 2: Create project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有了帳號以後，就去Create project，Create時的project名稱，&amp;lt;/br&amp;gt;
如果project名稱沒有重複的話，應該就會是你的&lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ID&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;Step 3: 打開billing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這一步驟就是&lt;a href=&quot;https://console.developers.google.com/billing&quot;&gt;點這個連結&lt;/a&gt;去打開Billing，進去以後要填寫信用卡資料，目的是將來要收費，&amp;lt;/br&amp;gt;不過如果你是新註冊的話，一開始先不用擔心這個問題，因為有300美金可以使用。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&lt;strong&gt;Step 4: 開啟Container Engine API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接著要去Enable Container Engine API，&lt;a href=&quot;https://console.cloud.google.com/project/_/kubernetes/list&quot;&gt;點這個連結&lt;/a&gt;去enable，進去以後就選取剛剛create的project，然後按下Continue。(如下圖)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2016-04-08-enable-container-api.png&quot; alt=&quot;cmd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-create-your-nodejs-application&quot;&gt;3. Create your Node.js application&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著來寫一個簡單的Node.js application，等等會把這application包成docker image，&amp;lt;/br&amp;gt;
先create一個folder，然後建立一個server.js，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir hellonode-app
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hellonode-app
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
再把下面的內容貼入到server.js當中，下面的內容就是建立一個http server，且listen在8080 port上，&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-create-and-push-a-docker-container-image&quot;&gt;4. Create and Push a Docker container image&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著要把上面的application變成一個docker image以及把image push上去，所以首先要先建立一個&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;，Dockerfile作用在之前的&lt;a href=&quot;http://blog.kenyang.net/2015/11/30/how-to-use-nodejs-mongodb-with-docker&quot;&gt;文章&lt;/a&gt;就有解釋過了，
&amp;lt;/br&amp;gt;
簡單說就是用來定義這個image的資訊。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM node:0.12
EXPOSE 8080
COPY server.js .
CMD node server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
有了&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;以後，就可以來build image了，記得把下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;ken-kubernetes-lab&lt;/code&gt;換成你們自己的project id，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t gcr.io/ken-kubernetes-lab/hello-node:v1 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
build完以後，可以在自己local測試看看，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d -p 8080:8080 gcr.io/ken-kubernetes-lab/hello-node:v1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
接著就可以把image push上去Google Container Registry，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud docker push gcr.io/ken-kubernetes-lab/hello-node:v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;br&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;5-create-a-cluster&quot;&gt;5. Create a cluster&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著去console，建立一個cluster，如下圖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2016-04-08-create-cluster.png&quot; alt=&quot;cmd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
建完以後，就把cluster的info餵給kubectl，記得把&lt;code class=&quot;highlighter-rouge&quot;&gt;cluster-1&lt;/code&gt;改成你的cluster名稱。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud container clusters get-credentials cluster-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;br-1&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;6-create-a-pod&quot;&gt;6. Create a pod&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt;在kubernetes的定義是&lt;code class=&quot;highlighter-rouge&quot;&gt;pods are the smallest deployable units of computing that can be created and managed in Kubernetes.&lt;/code&gt;，
&amp;lt;/br&amp;gt;
簡單說，如果你要在kubernetes的cluster裡面run起來&lt;code class=&quot;highlighter-rouge&quot;&gt;一組&lt;/code&gt;container，就得有一個pod，&amp;lt;/br&amp;gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;一組&lt;/code&gt;container的意思是，這個pod裡面由一個以上的container所組成。
&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;
用kubectl run來建立一個pod:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl run hello-node --image&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gcr.io/ken-kubernetes-lab/hello-node:v1 --port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8080
deployment &lt;span class=&quot;s2&quot;&gt;&quot;hello-node&quot;&lt;/span&gt; created
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如上面的output所示，&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl run&lt;/code&gt;建立了一個&lt;code class=&quot;highlighter-rouge&quot;&gt;deployment&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;deployment&lt;/code&gt;主要是用來建立或者scale一個pod的一種方式，以這個例子來說，deployment管理了1個pod replica，想看deployment的資訊，就打：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get deployments
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-node   1         1         1            1           3d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;br-2&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;7-allow-external-traffic&quot;&gt;7. Allow external traffic&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;pod預設只能被內部access，如果想要讓外部存取，必須把&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; expose成一個&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl expose deployment hello-node --type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LoadBalancer&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你會發現上面的指令，我們是expose deployment這個object出來，而不是pod，&amp;lt;/br&amp;gt;
如上面所說，deployment可能會管理多個pods，所以可以透過deployment來當作load balancer。
取得service ip的指令，請打:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get services hello-node
NAME         CLUSTER-IP       EXTERNAL-IP       PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    AGE
hello-node   10.123.244.242   130.211.247.198   8080/TCP   3d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXTERNAL_IP&lt;/code&gt;可能需要一點點時間才會顯示出來，所以如果&lt;code class=&quot;highlighter-rouge&quot;&gt;EXTERNAL_IP&lt;/code&gt;一開始是空白的，請等一下再試一次。&lt;/p&gt;

&lt;h2 id=&quot;br-3&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;8-scale-up-your-website&quot;&gt;8. Scale up your website&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Kubernetes其中最強大的一點就是可以很輕鬆的scale你的application，
&amp;lt;/br&amp;gt;
假設你的application突然需要更多的capacity，你可以簡單地叫&lt;code class=&quot;highlighter-rouge&quot;&gt;deployment&lt;/code&gt;去建立新的replica:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl scale deployment hello-node --replicas&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;現在你的application就有4個replicas，每一個獨立地在cluster中運作，且load balancer去serve traffic。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get deployments
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
hello-node   4         4         4            4           3d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
hello-node-3344141985-j2zun   1/1       Running   0          2m
hello-node-3344141985-j70fh   1/1       Running   0          2m
hello-node-3344141985-lzynx   1/1       Running   0          3d
hello-node-3344141985-x3ycw   1/1       Running   0          2m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;br-4&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;9-roll-out-an-upgrade-to-your-website&quot;&gt;9. Roll out an upgrade to your website&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;假設你的application有bug fixes，Kubernetes也可以輕易地幫助你deploy新版本上去。&amp;lt;/br&amp;gt;
首先，先來改剛剛的&lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt;，修改response message:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello Kubernetes World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著可以build及publish新版本至registry:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t gcr.io/ken-kubernetes-lab/hello-node:v2 . 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud docker push gcr.io/ken-kubernetes-lab/hello-node:v2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;push完成以後，我們就有一個v2版本的image可以使用，接下來只要透過&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl edit&lt;/code&gt;指令就可以進行update，
&amp;lt;/br&amp;gt;
這個指令會打開一個text editor，內容是一個deployment的yaml config，&amp;lt;/br&amp;gt;
我們只需要把&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcr.io/ken-kubernetes-lab/hello-node:v1&lt;/code&gt;&lt;/strong&gt;改成&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcr.io/ken-kubernetes-lab/hello-node:v2&lt;/code&gt;&lt;/strong&gt;就好。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl edit deployment hello-node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;編輯完成以後，可以去看看pods有什麼變化:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                          READY     STATUS        RESTARTS   AGE
hello-node-3344141985-j2zun   1/1       Terminating   0          19m
hello-node-3344141985-j70fh   1/1       Terminating   0          19m
hello-node-3344141985-lzynx   1/1       Terminating   0          3d
hello-node-3344141985-x3ycw   1/1       Terminating   0          19m
hello-node-3422850722-b0niu   1/1       Running       0          13s
hello-node-3422850722-gu7c3   1/1       Running       0          19s
hello-node-3422850722-oaqw7   1/1       Running       0          19s
hello-node-3422850722-ria1t   1/1       Running       0          13s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;從output中會發現，deployment建立新的pod，把舊版的pod關掉了。&lt;/p&gt;

&lt;h2 id=&quot;br-5&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;10-delete&quot;&gt;10. Delete&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;由於只有300美金啊，雖然我開了三天也才花費五塊美金，不過沒在用還是關掉吧！&amp;lt;/br&amp;gt;
刪除Deployment時，也會一併刪除pod；刪除service會刪除load balancer。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl delete service,deployment hello-node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後記得cluster也要刪除:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud container clusters delete cluster-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;
&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2016/04/07/getting-started-with-kubernetes</link>
                <guid>http://blog.kenyang.net/2016/04/07/getting-started-with-kubernetes</guid>
                <pubDate>Thu, 07 Apr 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Heroku Redis: Connecting in Python</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;這篇要講怎麼在Heroku上，使用它的&lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-redis&quot;&gt;Heroku Redis&lt;/a&gt;，&lt;br /&gt;
大致上分為三個步驟，分別為安裝，配置，寫code。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-installing-cli&quot;&gt;1. Installing CLI&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;第一步驟是要先安裝heroku-redis的command line tools，
但如果你不想要用command line，你也可以至heroku的後台裡面的Add-ons加一台redis。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku plugins:install heroku-redis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-provisioning-the-add-on&quot;&gt;2. Provisioning the add-on&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著要配置一台Redis server，有二個比較特別的參數，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;hobby-dev: 這個是這台server的&lt;a href=&quot;http://elements.heroku.com/addons/heroku-redis&quot;&gt;Plan &amp;amp; Pricing&lt;/a&gt;，hobby-dev是免費的。&lt;/li&gt;
  &lt;li&gt;sushi: 你的heroku app name&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku addons:create heroku-redis:hobby-dev -a sushi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
當你成功配置一台redis以後，你可以透過下面的指令找到該台redis URL，&lt;/p&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku config | grep REDIS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-connecting-in-python&quot;&gt;3. Connecting in Python&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;要在Python中使用Redis，你必須安裝&lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt;這個package，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install redis
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著就可以用這個&lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt;這個package連結至redis server，&lt;br /&gt;
下面的example是用Flask這個framework來做示範，分別有&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;這二個URL。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;redis&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REDIS_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/get'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no such key in Redis&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/set'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ken Yang'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;set done&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;br&quot;&gt;&amp;lt;/br&amp;gt;&lt;/h2&gt;
&lt;h3 id=&quot;4-testing-in-local-environment&quot;&gt;4. Testing in local environment&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;如果你想要在local測試，需要把REDIS_URL的參數寫在.env裡面才行。&lt;br /&gt;
否則會找不到Redis在哪。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku config:get REDIS_URL -s  &amp;gt;&amp;gt; .env
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;web
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2016/02/15/heroku-redis-connecting-in-python</link>
                <guid>http://blog.kenyang.net/2016/02/15/heroku-redis-connecting-in-python</guid>
                <pubDate>Mon, 15 Feb 2016 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Android Fingerprint API</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;Google在Android 6.0中，釋放了對[Fingerprint] (http://developer.android.com/intl/zh-tw/reference/android/hardware/fingerprint/FingerprintManager.html)操作的API，&lt;br /&gt;
而最近剛好也買了Nexus 6P，因此有了機會來玩看看。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-androidmanifestxml&quot;&gt;1. AndroidManifest.xml&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;首先要在&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;中設定permission，&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.USE_FINGERPRINT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-check-requirement&quot;&gt;2. Check Requirement&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著要檢查device上，是否有fingerprint reader，以及是否有設置了至少一枚fingerprint。下面這段code，主要檢查了三件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;isKeyguardSecure&lt;/strong&gt; : 是否有設定screen lock&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;isHardwareDetected&lt;/strong&gt; : device是否有fingerprint reader&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;hasEnrolledFingerprints&lt;/strong&gt; : 是否有設定至少一枚指紋&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyguardManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationSignal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyguardManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEYGUARD_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isKeyguardSecure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Secure lock screen hasn't set up.\n&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Go to 'Settings -&amp;gt; Security -&amp;gt; Fingerprint' to set up a fingerprint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHardwareDetected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;No Fingerprint reader&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasEnrolledFingerprints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Go to 'Settings -&amp;gt; Security -&amp;gt; Fingerprint' and register at least one fingerprint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-authenticate&quot;&gt;3. Authenticate&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;如果通過上述的檢查之後，就可以透過&lt;code class=&quot;highlighter-rouge&quot;&gt;FingerprintManager&lt;/code&gt;進行&lt;code class=&quot;highlighter-rouge&quot;&gt;Authenticate&lt;/code&gt;的動作，method call為：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CryptoObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;CancellationSignal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                          &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一共要帶入5個參數，分別為：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoObject&lt;/code&gt; : Android 6.0中crypto objects的wrapper class，可以透過它讓authenticate過程更為secure，但也可以不使用。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CancellationSignal&lt;/code&gt; : 用來Cancel &lt;em&gt;authenticate&lt;/em&gt;的object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt; : 只是一個flag，且目前只能代入0&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationCallback&lt;/code&gt; : callback來接受authenticate成功與否，有三個callback method，
    &lt;ul&gt;
      &lt;li&gt;onAuthenticationError&lt;/li&gt;
      &lt;li&gt;onAuthenticationFailed&lt;/li&gt;
      &lt;li&gt;onAuthenticationSucceeded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Handler&lt;/code&gt; : optional的參數，如果有使用，FingerprintManager會透過它來傳遞訊息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;了解參數以後就可以開始進行&lt;strong&gt;authenticate&lt;/strong&gt;，&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAuthenticationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;error &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAuthenticationFailed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onAuthenticationFailed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAuthenticationSucceeded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FingerprintManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AuthenticationResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onAuthenticationSucceeded&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cancellationSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;這樣就完成了一個簡單的example，但這example並沒有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoObject&lt;/code&gt;，所以如果你想要更安全一點，記得請加上&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoObject&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/12/12/android-fingerprint-api</link>
                <guid>http://blog.kenyang.net/2015/12/12/android-fingerprint-api</guid>
                <pubDate>Sat, 12 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Install zsh and oh-my-zsh on Mac</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;今天把mac上面的default shell換成&lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;，其實主要是看上了&lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;，所以才想換成zsh。&lt;br /&gt;
過程有點複雜，所以還是紀錄一下怎麼做。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-install-oh-my-zsh&quot;&gt;1. Install oh-my-zsh&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;由於mac預設就有zsh了，所以不需要安裝，只需要把default shell改成zsh即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著就安裝&lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-clone-cobalt2&quot;&gt;2. Clone cobalt2&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;首先先去clone &lt;code class=&quot;highlighter-rouge&quot;&gt;cobalt2&lt;/code&gt;下來，&lt;code class=&quot;highlighter-rouge&quot;&gt;cobalt2&lt;/code&gt;是人家寫的theme，裡面主要有二個theme，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;cobalt2.itermcolors&lt;/strong&gt; : 給iTerm用的&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cobalt2.zsh-theme&lt;/strong&gt;   : 給zsh用的&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/wesbos/Cobalt2-iterm.git  
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Cobalt2-iterm
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mv cobalt2.zsh-theme ~/.oh-my-zsh/themes/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
然後打開iterm，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;點選&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;按鈕新增一個Profile&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Colors&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Load Presets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;找到剛剛clone下來的&lt;code class=&quot;highlighter-rouge&quot;&gt;cobalt2.itermcolors&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點左下角的&lt;code class=&quot;highlighter-rouge&quot;&gt;Other Actions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;Set as default&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-install-font&quot;&gt;3. Install font&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;由於oh-my-zsh中的theme，用了一些特殊符號，所以必須安裝額外的font，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/powerline/fonts.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fonts
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著一樣在打開iterm，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;點選&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;點&lt;code class=&quot;highlighter-rouge&quot;&gt;Change Font&lt;/code&gt; （&lt;strong&gt;Regular&lt;/strong&gt;和&lt;strong&gt;Non-ASCII&lt;/strong&gt;都要改)&lt;/li&gt;
  &lt;li&gt;選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;inconsolata for powerline&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-變更theme&quot;&gt;4. 變更Theme&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;接著就可以把theme改成剛剛下載的cobalt2&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
然後把ZSH_THEME換成cobalt2&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZSH_THEME=&quot;cobalt2&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後source一下，就完成了。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;5-客製化&quot;&gt;5. 客製化&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;最後一步是客製化，如果你還是不喜歡cobalt2的theme，&lt;br /&gt;
你還是可以更改，只要去編輯&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.oh-my-zsh/themes/cobalt2.zsh-theme&lt;/code&gt;就好，&lt;br /&gt;
打開以後，看到最下面，應該會有下面幾個function。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Main prompt&lt;/span&gt;
build_prompt&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;#prompt_status&lt;/span&gt;
  prompt_context
  prompt_dir
  prompt_git
  prompt_end
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PROMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%{%f%b%k%}$(build_prompt) '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到我把&lt;code class=&quot;highlighter-rouge&quot;&gt;prompt_status&lt;/code&gt;就註解掉，因為我不想要prompt上有icon出現。&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/12/11/install-zsh-oh-my-zsh-on-mac</link>
                <guid>http://blog.kenyang.net/2015/12/11/install-zsh-oh-my-zsh-on-mac</guid>
                <pubDate>Fri, 11 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>JCConf Taiwan 2015   Day 2</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;這篇只是紀錄Java Community Conference 2015的第二天筆記，&lt;br /&gt;
今天聽了以下幾個session，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;阿里 JVM 的工作方向&lt;/li&gt;
  &lt;li&gt;Universal Scala&lt;/li&gt;
  &lt;li&gt;Deploy your own Spark cluster in 4 minutes using sbt&lt;/li&gt;
  &lt;li&gt;Immutable Infrastructure：觀念與實作&lt;/li&gt;
  &lt;li&gt;JDK8 JIT 行為和效能分析&lt;/li&gt;
  &lt;li&gt;自己的JVM自己救 - 解救 OOM 實務經驗談&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1-阿里-jvm-的工作方向&quot;&gt;1. 阿里 JVM 的工作方向&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;主要在說他為什麼從facebook回中國阿里雲，&lt;br /&gt;
在fb調校php，在阿里雲調校jvm，&lt;br /&gt;
在講在阿里雲裡的JVM心路歷程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;趙海平&lt;/li&gt;
  &lt;li&gt;work @阿里雲&lt;/li&gt;
  &lt;li&gt;previous work @FB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Coroutine&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;like wait,notify in Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Java young generation, old generation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-universal-scala&quot;&gt;2. Universal Scala&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;在講怎麼用scala在frontend與backend上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Walter Chang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is universal?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isomorphic&lt;/li&gt;
  &lt;li&gt;run the same code on both client and server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Functional language&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pure functions [Wiki] (https://en.wikipedia.org/wiki/Pure_function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;immutable 優點&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no need to handle synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;val is immutable (like final in Java)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;var i: Int = 123&lt;/li&gt;
  &lt;li&gt;var i = 123&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;var is mutable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;case class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Scala.js&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compile &lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example code&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[github] (https://github.com/weihsiu/universal.git)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-deploy-your-own-spark-cluster-in-4-minutes-using-sbt&quot;&gt;3. Deploy your own Spark cluster in 4 minutes using sbt.&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;介紹他們的tool（spark-deployer）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pishen Tsai&lt;/li&gt;
  &lt;li&gt;Works @KKBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tool: spark-deployer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[Github] (https://github.com/KKBOX/spark-deployer)&lt;/li&gt;
  &lt;li&gt;SBT plugin&lt;/li&gt;
  &lt;li&gt;productively used in KKBOX&lt;/li&gt;
  &lt;li&gt;100% scala&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Current Solutions to deploy Spark cluster&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;spark-ec2&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;缺點 
    * command 太多
    * 需要裝&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt&lt;/code&gt;
    * 需要裝&lt;code class=&quot;highlighter-rouge&quot;&gt;ec2&lt;/code&gt;
    * slow startup time (~20mins)
    * 一小時算一次錢，三分之一錢花在deploy上&lt;/li&gt;
      &lt;li&gt;要用spark-ec2的flow
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-spark-ec2-flow.jpg&quot; alt=&quot;flow&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;spark-ec2的command
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-spark-ec2-cmd.jpg&quot; alt=&quot;command&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;amazon emr (elastic map reduce)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;缺點
    * command 太多
    * 需要裝&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt&lt;/code&gt;
    * 需要裝&lt;code class=&quot;highlighter-rouge&quot;&gt;emr&lt;/code&gt;
    * spark version is old&lt;/li&gt;
      &lt;li&gt;要用Amazon emr的flow
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-aws-emr-flow.jpg&quot; alt=&quot;flow&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;emr的cmd
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-aws-emr-cmd.jpg&quot; alt=&quot;cmd&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spark-deployer&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;優點
        &lt;ul&gt;
          &lt;li&gt;只需要安裝&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;fast and parallel startup (~4mins)&lt;/li&gt;
          &lt;li&gt;Dynamic scale out&lt;/li&gt;
          &lt;li&gt;Flexible design&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;用Spark deployer的flow
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-spark-deployer-flow.jpg&quot; alt=&quot;flow&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;用Spark deployer的cmd
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-05-spark-deployer-cmd.jpg&quot; alt=&quot;cmd&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java&lt;/li&gt;
  &lt;li&gt;sbt&lt;/li&gt;
  &lt;li&gt;AWS_ACCESS_KEY_ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-immutable-infrastructure觀念與實作&quot;&gt;4. Immutable Infrastructure：觀念與實作&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;葉秉哲&lt;/li&gt;
  &lt;li&gt;Works @gogolook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;改題目&lt;/strong&gt; -&amp;gt; immutable infrastructure觀念與實作（建議）&lt;/p&gt;

&lt;p&gt;因為talk是在下午第一場，怕大家看code太想睡覺，所以就不講detail實作&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;演算法的領域也說，immutable 的東西會比 mutable 的東西來得好設計&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;why immutable objects&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simpler	to understand&lt;/li&gt;
  &lt;li&gt;iherently thread-safe&lt;/li&gt;
  &lt;li&gt;offer higher security than mutable objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;immutable object&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;java hotswap&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jdk 1.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Christian Posta said:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;don’t hotdeploy/redeploy/migrate your java service in production at runtime.&lt;br /&gt;
do have a very trong focus on your delivery pipeline/automation/testing to quickly make change to your app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What’s an immutable infrastructure&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;quote from Docker 大神&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;re-create images each time you change a line of code.&lt;br /&gt;
prevent modifications of running images.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why immutable infrastructure?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplify change management
    &lt;ul&gt;
      &lt;li&gt;hard to keep or restore “desired state” in place&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Enforce &lt;code class=&quot;highlighter-rouge&quot;&gt;dev/prod&lt;/code&gt; parity
    &lt;ul&gt;
      &lt;li&gt;configure &amp;amp; test &lt;code class=&quot;highlighter-rouge&quot;&gt;infra&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; deployed to production environment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reason about apps at a higher level
    &lt;ul&gt;
      &lt;li&gt;… than just &lt;code class=&quot;highlighter-rouge&quot;&gt;deployable pacakages&lt;/code&gt; containing the code (jar/war/zip/msi)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; immutable infrastructure?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cost may be too high&lt;/li&gt;
  &lt;li&gt;DevOps maturity level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;講者把image視為一種&lt;code class=&quot;highlighter-rouge&quot;&gt;母體&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
主要分為以下三種，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM image&lt;/li&gt;
  &lt;li&gt;Container image&lt;/li&gt;
  &lt;li&gt;Unikernel image
    &lt;ul&gt;
      &lt;li&gt;對現有container技術有一個比較激進的改良&lt;/li&gt;
      &lt;li&gt;傳統的vm，架構在hypervisor上，也打包一個os在裡面&lt;/li&gt;
      &lt;li&gt;docker不打包，但會共用底下os的東西，有安全性考量&lt;/li&gt;
      &lt;li&gt;所以有了&lt;code class=&quot;highlighter-rouge&quot;&gt;container per VM&lt;/code&gt;，但還是太肥了。&lt;/li&gt;
      &lt;li&gt;把作業系統也看成lib，不會把所有os通通包進來，只抽取它要的。&lt;/li&gt;
      &lt;li&gt;[boxfuse] (https://boxfuse.com/)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;母體 =&amp;gt; 增生 =&amp;gt; 替換 =&amp;gt; 自動化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;5-jdk8-jit-行為和效能分析&quot;&gt;5. JDK8 JIT 行為和效能分析&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;這個session是Jserv在講，&lt;br /&gt;
聽過Jserv演講過幾次，&lt;br /&gt;
也曾經在去旁聽過，他在台大講的Android Open Source，&lt;br /&gt;
給我的印象就是高手、講話很快、講話很有梗的。&lt;br /&gt;
其實我原本要去聽別場的&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL Connector/J&lt;/code&gt;，但一方面覺得實在太累了，&lt;br /&gt;
懶得換room，又想輕鬆一點，聽一下Jserv講講笑話，&lt;br /&gt;
Jserv一樣講得很專業，但真的是不同領域，幾乎都聽不懂。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jserv&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;topic&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How JIT works?&lt;/li&gt;
  &lt;li&gt;How to monitor the JIT?&lt;/li&gt;
  &lt;li&gt;How to figure out performance problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;jserv自己準備的共筆&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[url] (https://jcconf.hackpad.com/R0-13PeQD5hpDx#:h=JDK8-JIT-行為和效能分析)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;hotspot&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;template based interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Jserv Said:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;作業我自己改，門我自己開，助教負責笑&lt;/li&gt;
    &lt;li&gt;台灣什麼東西都可以靠北&lt;/li&gt;
    &lt;li&gt;靠北JVM&lt;/li&gt;
    &lt;li&gt;怕沒人寫hackpad共筆，所以我自己寫&lt;/li&gt;
    &lt;li&gt;在聯發科工作的時候，大家都是看安兔兔的benchmark買手機&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;JVM如何支援動態語言&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;invokedynamic
    &lt;ul&gt;
      &lt;li&gt;lambda&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;java裡的method都是&lt;code class=&quot;highlighter-rouge&quot;&gt;ivnokevirtual&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;匿名class本質上會生出另一個class，inner class，和lambda不一樣&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;6-自己的jvm自己救---解救-oom-實務經驗談&quot;&gt;6. 自己的JVM自己救 - 解救 OOM 實務經驗談&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;這場我聽到放空了，不過前半段內容，大致上我都是先前就知道的。&lt;br /&gt;
例如：stack, heap差別…etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shallow heap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retained heap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;參加完，不能說在知識上收穫很多，&lt;br /&gt;
但反而是一種開眼界的感覺，會覺得人外有人，天外有天，&lt;br /&gt;
覺得自己還得更加努力才行。&lt;/p&gt;

&lt;p&gt;還想推薦一下MySQL的speaker (Ivan Tu)，雖然沒有去聽他的talk，&lt;br /&gt;
但在休息時間時，去到MySQL攤位，都會聽到他很熱情地講解。&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/12/05/jcconf-taiwan-2015-day-2</link>
                <guid>http://blog.kenyang.net/2015/12/05/jcconf-taiwan-2015---day-2</guid>
                <pubDate>Sat, 05 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>JCConf Taiwan 2015   Day 1</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-04-ticket.jpg&quot; alt=&quot;Ticket&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這篇只是紀錄Java Community Conference 2015的第一天筆記，&lt;br /&gt;
今天聽了以下幾個session，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JRuby&lt;/li&gt;
  &lt;li&gt;Asynchronous and Non-blocking in Scala&lt;/li&gt;
  &lt;li&gt;使用zookeeper打造軟體式負載平衡&lt;/li&gt;
  &lt;li&gt;workshop動手玩Java專案建置工具：以Gradle與Docker為例&lt;/li&gt;
  &lt;li&gt;Akka Cluster in Java&lt;/li&gt;
  &lt;li&gt;使用Java的Future/Promise API來撰寫非同步程式&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;1-jruby&quot;&gt;1. JRuby&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Charles Oliver Nutter&lt;/li&gt;
  &lt;li&gt;headius@headius.com&lt;/li&gt;
  &lt;li&gt;blog.headius.com&lt;/li&gt;
  &lt;li&gt;works at RedHat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ruby&quot;&gt;ruby&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;everything is Object. no primitive integer.&lt;/li&gt;
  &lt;li&gt;invokeinterface
    &lt;ul&gt;
      &lt;li&gt;Runnable.run();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;invokespecial
    &lt;ul&gt;
      &lt;li&gt;super.equals();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;invokevirtual&lt;/li&gt;
  &lt;li&gt;invokestatic
    &lt;ul&gt;
      &lt;li&gt;System.currentMill();&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;invokedynamic
    &lt;ul&gt;
      &lt;li&gt;*Released in Java7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ruby == Unix, but java == java everywhere
    &lt;ul&gt;
      &lt;li&gt;Ruby has getpwd(), getpid()…etc.&lt;/li&gt;
      &lt;li&gt;but java has no these capability.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JNI
    &lt;ul&gt;
      &lt;li&gt;Speaker doesn’t like it.&lt;/li&gt;
      &lt;li&gt;you need to implement a feature for each platform (win, mac, linux)
    * ex: if you want to get pid() in java.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JNR
    &lt;ul&gt;
      &lt;li&gt;Speaker use JNR.&lt;/li&gt;
      &lt;li&gt;there are many impelmentations in JNR.&lt;/li&gt;
      &lt;li&gt;POSIX posix = POSIXFactory.getPostfix(xxxxx);&lt;/li&gt;
      &lt;li&gt;posix.getpid()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;project-panama&quot;&gt;Project panama&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Panama in JVM for java 9, api in java 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;why-use-jvm&quot;&gt;why use JVM?&lt;/h4&gt;
&lt;p&gt;someone ask why not use standard ruby?
author answer: hard to implement JIT.&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-asynchronous-and-non-blocking-in-scala&quot;&gt;2. Asynchronous and Non-blocking in Scala&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;I/O is very slow, so we need aysnc and non-blocking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nio&quot;&gt;NIO&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;not use thread to do operation. have a subsystem will handle it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pure-function&quot;&gt;pure function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;no side effects&lt;/li&gt;
  &lt;li&gt;no write db or file&lt;/li&gt;
  &lt;li&gt;the output will be the same at each time&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;val-vs-var&quot;&gt;val vs var&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;val is immutable&lt;/li&gt;
  &lt;li&gt;var is mutable&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;case-object&quot;&gt;case object&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;singleton in Java. there is no static in Scala.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-使用zookeeper打造軟體式負載平衡&quot;&gt;3. 使用zookeeper打造軟體式負載平衡&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;這個session主要在介紹zookeeper，由於時間很短，只有15分鐘。&lt;br /&gt;
所以都是講很high level，並沒有講到detail的實作。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-workshop動手玩java專案建置工具以gradle與docker為例&quot;&gt;4. workshop動手玩Java專案建置工具：以Gradle與Docker為例&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;這個session在介紹他們team是怎麼用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;建立test env，&lt;br /&gt;
然後再透過&lt;code class=&quot;highlighter-rouge&quot;&gt;Geb&lt;/code&gt;去進行automation，&lt;br /&gt;
主要提供了以下二個docker images讓我們練習測試，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;client：vvoyer/docker-selenium-firefox-chrome&lt;/li&gt;
  &lt;li&gt;main：groovy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由於我對於&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;算是瞭解，因此這個session沒有全部聽完就先去趕場了。&lt;br /&gt;
簡單的說，整個流程就是先透過docker叫起&lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;，&lt;br /&gt;
之後再叫起&lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;來對&lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt;進行測試。&lt;/p&gt;

&lt;h3 id=&quot;resource&quot;&gt;Resource&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[Git repo] (https://github.com/TrunkWorkshop/jcconf-2015-java-docker)&lt;/li&gt;
  &lt;li&gt;[Hackpad] (https://hackpad.com/JCConf-Taiwan-2015-Workshop-lKcJEMyjraR)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-swarm&quot;&gt;docker-swarm&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;簡化docker指令&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;geb&quot;&gt;geb&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;http://learngeb.readbook.tw/&lt;/li&gt;
  &lt;li&gt;functional test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;5-akka-cluster-in-java&quot;&gt;5. Akka Cluster in Java&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;[Git repo for Akka cluster example] (https://github.com/jiayun/akka_samples)&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;6-使用java的futurepromise-api來撰寫非同步程式&quot;&gt;6. 使用Java的Future/Promise API來撰寫非同步程式&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;前陣子也剛好在研究&lt;code class=&quot;highlighter-rouge&quot;&gt;CompletableFuture&lt;/code&gt;，&lt;br /&gt;
所以這是今天最有共鳴的一場session，&lt;/p&gt;

&lt;h3 id=&quot;speaker&quot;&gt;Speaker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;koji&lt;/li&gt;
  &lt;li&gt;work at Line (located at Japan)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;傳統做法開thread&quot;&gt;傳統做法開thread&lt;/h4&gt;

&lt;p&gt;thread缺點&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要配合synchronized, wait, notify, join&lt;/li&gt;
  &lt;li&gt;不同thread如何存取同變數&lt;/li&gt;
  &lt;li&gt;如何控管&lt;/li&gt;
  &lt;li&gt;不易組合和再利用&lt;/li&gt;
  &lt;li&gt;組合各種非同步方法，會變成callback hell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;講者說：這個年代請不要再直接使用thread api&lt;/p&gt;

&lt;h4 id=&quot;future&quot;&gt;Future&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;一個等待結果的容器&lt;/li&gt;
  &lt;li&gt;get會卡住！！&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;completablefuture&quot;&gt;CompletableFuture&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;類似有callback概念，做完動作以後，通知我，我再繼續做想做的事情&lt;/li&gt;
  &lt;li&gt;get會丟exception，可以用join&lt;/li&gt;
  &lt;li&gt;supplyAsync可以指定executorService，如果沒給，就會用forkjoin裡的tool。&lt;/li&gt;
  &lt;li&gt;盡量要給！&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CF&amp;lt;CF&amp;lt;string&amp;gt;&amp;gt; c&lt;/code&gt; 不好，要get 2次 ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;c.get().get()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;請用.thenCompose, 回傳也是completeablefutre的時候，就不用get 2次，像是scala的flatmap，&lt;/li&gt;
  &lt;li&gt;優點
    &lt;ul&gt;
      &lt;li&gt;event driven&lt;/li&gt;
      &lt;li&gt;容易組合 (easy to compose)&lt;/li&gt;
      &lt;li&gt;控制權還給呼叫者&lt;/li&gt;
      &lt;li&gt;減少thread的浪費，沿用thread繼續做之類的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺點
    &lt;ul&gt;
      &lt;li&gt;future/promise的混合，不少語言都分開坐&lt;/li&gt;
      &lt;li&gt;爆多的方法數量 60+&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注意
    &lt;ul&gt;
      &lt;li&gt;雖然有future，但cancel跟future不一樣，completablefutre不能interrupt。&lt;/li&gt;
      &lt;li&gt;不能取消正在執行的工作&lt;/li&gt;
      &lt;li&gt;盡量使用Async語尾的API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;7-other&quot;&gt;7. Other&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;攤位sudo&quot;&gt;攤位sudo&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;yvette lin 曾經做過創投&lt;/li&gt;
  &lt;li&gt;就專業的人力資源公司，但focus on RD&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位mysql&quot;&gt;攤位mysql&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;speaker很專業&lt;/li&gt;
  &lt;li&gt;詢問了master與master的架構時，當replication發生error時，通常得取捨一台，必定有資料會遺失，該怎麼辦？
    &lt;ul&gt;
      &lt;li&gt;回答：透過讓&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;等待的機制，然後取回binlog回來至&lt;code class=&quot;highlighter-rouge&quot;&gt;slave&lt;/code&gt;，partially updated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;還介紹了MySQL Enterprise Monitor
    &lt;ul&gt;
      &lt;li&gt;有圖形化介面讓admin看究竟哪些sql command花最久&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;還賺到了一隻MySQL的海豚玩偶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2015-12-04-mysql-dophin.jpg&quot; alt=&quot;Ticket&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;攤位微軟&quot;&gt;攤位微軟&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;介紹Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位kxxxx-banking&quot;&gt;攤位Kxxxx banking&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在做財務管理系統&lt;/li&gt;
  &lt;li&gt;在徵人，要&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;，前端用&lt;code class=&quot;highlighter-rouge&quot;&gt;extJS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位ruckus&quot;&gt;攤位ruckus&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;主要做無線網路設備&lt;/li&gt;
  &lt;li&gt;也是Java&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;攤位safari-book-online&quot;&gt;攤位safari book online&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;線上遊覽書籍之類的網站&lt;/li&gt;
  &lt;li&gt;[Link] (https://www.safaribooksonline.com/)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;晚上的lightning-show&quot;&gt;晚上的lightning show&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ruckus的人出來送價值6000元的ap，很幸運地被我同事拿到&lt;/li&gt;
  &lt;li&gt;中鋼的人來分享他們內部系統心路歷程&lt;/li&gt;
  &lt;li&gt;linkedin員工來分享在那工作的第一個月 （其實是fliptop的員工，但被linkedin收購）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;foods-and-drinks&quot;&gt;Foods and Drinks&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;大概是我參加過所有conf吃最好的吧，晚上還有烤山豬肉可以吃&lt;/li&gt;
  &lt;li&gt;飲料是金色三麥贊助&lt;/li&gt;
  &lt;li&gt;茶也是知名廠商&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/12/04/jcconf-taiwan-2015-day-1</link>
                <guid>http://blog.kenyang.net/2015/12/04/jcconf-taiwan-2015---day-1</guid>
                <pubDate>Fri, 04 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Create a iSCSI target on Ubuntu</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;
這篇會介紹如何在Ubuntu上，建立一個iSCSI Target Server，&lt;br /&gt;
提供給別人測試使用。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;install-tgt&quot;&gt;Install tgt&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;首先要先安裝tgt這個package。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apt-get install tgt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;create-virtual-disks&quot;&gt;Create virtual disks&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;這裡會用&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;來建立幾個假的block device，&lt;br /&gt;
待會就把devices加入到iSCSI中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/iscsi-disk1 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/iscsi-disk2 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;create-targets&quot;&gt;Create targets&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;這裡建立了2個target，分別為，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iqn.2015-07.net.kenyang:ken.iscsi.1&lt;/li&gt;
  &lt;li&gt;iqn.2015-07.net.kenyang:ken.iscsi.2&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op new --mode target --tid 1 -T iqn.2015-07.net.kenyang:ken.iscsi.1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op new --mode target --tid 2 -T iqn.2015-07.net.kenyang:ken.iscsi.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;create-lun&quot;&gt;Create LUN&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;然後替上面的2個target各加入一個LUN。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --mode logicalunit --op new --tid 1 --lun 1 -b /var/tmp/iscsi-disk1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --mode logicalunit --op new --tid 2 --lun 1 -b /var/tmp/iscsi-disk2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;enable-the-target-to-accept-any-initiators&quot;&gt;Enable the target to accept any initiators&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;如果你想要讓你的target，&lt;br /&gt;
可以讓任何人連，不需要密碼，&lt;br /&gt;
就可以用下面的指令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --mode target --tid 1 -I ALL
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --lld iscsi --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --mode target --tid 2 -I ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;create-user&quot;&gt;Create user&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;如果你想要讓你的target，有credential才能連，&lt;br /&gt;
那就要create user，以及把user bind在某個target上。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --mode account --op new --user safesync --password safesync
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tgtadm --mode account --op &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; --tid 1 --user safesync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;show-configuration&quot;&gt;Show configuration&lt;/h4&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tgtadm --lld iscsi --mode target --op show
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;

</description>
                <link>http://blog.kenyang.net/2015/12/01/create-a-iscsi-target-on-ubuntu</link>
                <guid>http://blog.kenyang.net/2015/12/01/create-a-iscsi-target-on-ubuntu</guid>
                <pubDate>Tue, 01 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How to use NodeJS &amp; MongoDB with Docker?</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;這篇會講如何在Docker上部署一個NodeJS+MongoDB的application，&lt;br /&gt;
所以會分二個部分來講，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在Docker上部署MongoDB&lt;/li&gt;
  &lt;li&gt;在Docker上部署NodeJS+Express&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-在docker上部署mongodb&quot;&gt;1. 在Docker上部署MongoDB&lt;/h3&gt;

&lt;p&gt;要在Docker上部署MongoDB，首先要先在local machine上建立一個folder，&lt;br /&gt;
這個folder是待會要mapping到container裡面的volume，&lt;br /&gt;
然後MongoDB上的data都會存在這個volume上。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir ~/monogo-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;create-a-container&quot;&gt;Create a container&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;接著就可以把MongoDB的image抓下來以及run。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker pull mongo:latest
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -v ~/mongo-data:/data &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
             --name ken-mongo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             mongo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             mongod --smallfiles
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;connect-to-a-container&quot;&gt;Connect to a container&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;那麼怎麼連進去這個MongoDB呢？&lt;br /&gt;
有二種方式，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;透過另外一個container，用&lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt;的方法&lt;/li&gt;
  &lt;li&gt;透過&lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我們先講第二種方法，&lt;br /&gt;
因為第一種方法，待會會透過NodeJS的container來示範。&lt;br /&gt;
我們透過&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;，然後用參數&lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt;與ken-mongo進行互動，&lt;br /&gt;
進去以後在再試試看create db以及新增一筆資料至table student之中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it ken-mongo bash
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;use school
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;db.student.insert&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;db.student.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;2-在docker上部署nodejsexpress&quot;&gt;2. 在Docker上部署NodeJS+Express&lt;/h3&gt;

&lt;p&gt;首先先建立一個folder，用來放置source code以及json等檔案。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-app
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd test&lt;/span&gt;-app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;packagejson&quot;&gt;Package.json&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;接著在&lt;code class=&quot;highlighter-rouge&quot;&gt;test-app&lt;/code&gt;這個folder底下，建立一個&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;，&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;是用來定義這個app的dependcies以及一些基本資料。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node-centos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Node.js on CentOS using docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ken Yang &amp;lt;ken@kenyang.net&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.2.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mongoose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.2.8&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;從上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中，我們在&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;裡有二個packages，&lt;br /&gt;
分別是&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;  : Web framework&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose&lt;/code&gt; : MongoDB client driver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;schemajs&quot;&gt;Schema.js&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;接著一樣在&lt;code class=&quot;highlighter-rouge&quot;&gt;test-app&lt;/code&gt;底下，建立一個&lt;code class=&quot;highlighter-rouge&quot;&gt;Schema.js&lt;/code&gt;， &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Schema.js&lt;/code&gt;是用來定義你的MongoDB的schema。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Student'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;indexjs&quot;&gt;Index.js&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;接著一樣在&lt;code class=&quot;highlighter-rouge&quot;&gt;test-app&lt;/code&gt;底下，建立一個&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;，&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;就是待會這個app的進入點。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./schema'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Student'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dev'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongodb://db:27017'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongodb://xxx.xxx.xxx.xxx:27017'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello world\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/insert'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Running on http://localhost:'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的範例有個比較重要的地方，需要說明一下，&lt;br /&gt;
首先看到&lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.connect( 'mongodb://db:27017' );&lt;/code&gt;，&lt;br /&gt;
我們是connect至&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;這個host去，&lt;br /&gt;
這個&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;是怎麼來的？&lt;br /&gt;
是待會會透過&lt;code class=&quot;highlighter-rouge&quot;&gt;--link&lt;/code&gt;的指令指定的，&lt;br /&gt;
一旦你指定了，就會在container中的&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;裡面增加一筆record。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;dockerfile&quot;&gt;DockerFile&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;接著建立&lt;code class=&quot;highlighter-rouge&quot;&gt;DockerFile&lt;/code&gt;，&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DockerFile&lt;/code&gt;就像是&lt;code class=&quot;highlighter-rouge&quot;&gt;makefile&lt;/code&gt;一樣，用來定義如何build這個image。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM    centos:centos6

# Enable Extra Packages for Enterprise Linux (EPEL) for CentOS
RUN     yum install -y epel-release
# Install Node.js and npm
RUN     yum install -y nodejs npm

# Install app dependencies
COPY package.json /src/package.json
RUN cd /src; npm install

# Bundle app source
COPY . /src

ENV NODE_ENV dev

EXPOSE  8080
CMD [&quot;node&quot;, &quot;/src/index.js&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;裡面比較需要注意的是， &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV NODE_ENV dev&lt;/code&gt;，&lt;br /&gt;
這個是用來設置環境變數，因為我們設定了&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;，&lt;br /&gt;
所以在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;中，才會去configure dev。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;build-image--run&quot;&gt;Build image &amp;amp; Run&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;有了&lt;code class=&quot;highlighter-rouge&quot;&gt;DockerFile&lt;/code&gt;以後，就可以來build以及run了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t ken-yang/centos-nodejs:v1 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
Build完以後，就可以用下面的指令去把container run起來。&lt;br /&gt;
注意&lt;code class=&quot;highlighter-rouge&quot;&gt;--link ken-mongo:db&lt;/code&gt;，&lt;br /&gt;
意思就是把現在正在running的&lt;code class=&quot;highlighter-rouge&quot;&gt;ken-mongo&lt;/code&gt;與現在這個新的container連起來。&lt;br /&gt;
以及給它一個alias &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             --name ken-node &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             -p 80:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             --link ken-mongo:db &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
             ken-yang/centos-nodejs:v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;test&quot;&gt;Test&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;最後用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;來發request測試，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -X POST -d &lt;span class=&quot;s1&quot;&gt;'name=kenyang'&lt;/span&gt; 192.168.99.100/insert
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後可以再去看是否有新增成功，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker -exec -it ken-mongo bash
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mongo
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;db.students.find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/11/30/how-to-use-nodejs-mongodb-with-docker</link>
                <guid>http://blog.kenyang.net/2015/11/30/how-to-use-nodejs--mongodb-with-docker</guid>
                <pubDate>Mon, 30 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>How to resize a LVM partition?</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;&lt;/p&gt;

&lt;p&gt;這篇算是延續&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;的主題，假設VG裡面還有free space尚未用到，&lt;br /&gt;
那麼過一段時間以後，該怎麼把它拿出來用?&lt;br /&gt;
所以這篇主要會講到下面2個主題：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extend&lt;/li&gt;
  &lt;li&gt;Shrink&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-extend&quot;&gt;1. Extend&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Extend會講二種方法，分別為，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1-1. Extend from &lt;code class=&quot;highlighter-rouge&quot;&gt;VG&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;1-2. Extend from &lt;code class=&quot;highlighter-rouge&quot;&gt;new disk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;1-1-extend-from-pv&quot;&gt;1-1. Extend from PV&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;第一種是延續&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;，&lt;br /&gt;
從既有的VG中，把Free PE加入到LV中，&lt;br /&gt;
以&lt;a href=&quot;http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed/&quot;&gt;上一篇&lt;/a&gt;來看，你的VG應該還會剩下60GB。&lt;br /&gt;
可以用下面的指令&lt;code class=&quot;highlighter-rouge&quot;&gt;vgs&lt;/code&gt;去看VG中剩下多少free PE，&lt;br /&gt;
最後一欄的&lt;code class=&quot;highlighter-rouge&quot;&gt;VFree&lt;/code&gt;就是指剩下的free PE，&lt;br /&gt;
以我的機器為範例，裡面還有829.99G，&lt;br /&gt;
以及我有5個LV。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vgs
  VG        #PV #LV #SN Attr   VSize    VFree
  ubuntu-vg   1   5   0 wz--n- 1019.76g 829.99g
  
$ lvs
  LV     VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert
  db     ubuntu-vg -wi-ao  83.92g
  log    ubuntu-vg -wi-ao  19.07g
  root   ubuntu-vg -wi-ao  66.75g
  swap_1 ubuntu-vg -wi-ao 976.00m
  tmp    ubuntu-vg -wi-ao  19.07g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;假設我要讓&lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt;這個LV加大100G，我們可以透過以下二個指令完成，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;lvresize&lt;/li&gt;
  &lt;li&gt;resize2fs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
使用方式如下，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lvresize -L +100G /dev/mapper/ubuntu--vg-tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;
完成上述指令以後，可以再透過&lt;code class=&quot;highlighter-rouge&quot;&gt;lvs&lt;/code&gt;來看一下tmp這個LV是否真的有加大100G。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lvs
  LV     VG        Attr   LSize   Origin Snap%  Move Log Copy%  Convert
  db     ubuntu-vg -wi-ao  83.92g
  log    ubuntu-vg -wi-ao  19.07g
  root   ubuntu-vg -wi-ao  66.75g
  swap_1 ubuntu-vg -wi-ao 976.00m
  tmp    ubuntu-vg -wi-ao 119.07g
  
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;df -h /tmp/
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/ubuntu--vg-tmp   19G   44M   18G   1% /tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
根據上面的output，你會發現&lt;code class=&quot;highlighter-rouge&quot;&gt;LV&lt;/code&gt;真的有加大100G，&lt;br /&gt;
可是&lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt;中的filesystem size並沒有變動，&lt;br /&gt;
因為少用了&lt;code class=&quot;highlighter-rouge&quot;&gt;resize2fs&lt;/code&gt;。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;resize2fs&lt;/code&gt;作用就是把filesystem變大。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;resize2fs /dev/mapper/ubuntu--vg-tmp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;119G]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後一個是size的參數，其實可以不用加，&lt;br /&gt;
如果不加，就是用整個LV可以用的空間。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-extend-from-new-disk&quot;&gt;1-2. Extend from new disk&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;第二種Extend的方法是把新disk來加入至lv中。&lt;br /&gt;
其實步驟跟上述差不多，只是多了一些準備作業，&lt;br /&gt;
準備作業如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新增 &lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;新PV&lt;/code&gt; 加入至 &lt;code class=&quot;highlighter-rouge&quot;&gt;VG&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先你要有一顆硬碟，&lt;br /&gt;
然後用&lt;code class=&quot;highlighter-rouge&quot;&gt;lsblk&lt;/code&gt;找到該block device的名稱，&lt;br /&gt;
我機器上的新硬碟就是sdb。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lsblk -d
NAME MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
fd0    2:0    1     4K  0 disk
sda    8:0    0  1020G  0 disk
sdb    8:16   0   200G  0 disk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;在新增一個&lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt;前，&lt;br /&gt;
必須先format disk成LVM的格式。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;fdsik /dev/sdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後請按照下面的步驟去create，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;以建立新的partition&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;選擇primary partition&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;選擇partition number&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt;選擇Default first sector&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt;選擇Default last sector&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;改變partition type&lt;/li&gt;
  &lt;li&gt;輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;8e&lt;/code&gt;, 8e為LVM的代碼&lt;/li&gt;
  &lt;li&gt;按下&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;儲存寫入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完成以後你就有一個新的partition了，名稱應該為&lt;code class=&quot;highlighter-rouge&quot;&gt;sdb1&lt;/code&gt;，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;fdisk -l /dev/sdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
這時候就可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;pvcreate &lt;/code&gt;來新增一個PV，&lt;br /&gt;
然後再用&lt;code class=&quot;highlighter-rouge&quot;&gt;pvs&lt;/code&gt;看看是否有成功。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$  &lt;/span&gt;pvcreate /dev/sdb1

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pvs
  PV         VG        Fmt  Attr PSize    PFree
  /dev/sda5  ubuntu-vg lvm2 a-   1019.76g 629.99g
  /dev/sdb1            lvm2 a-    200.00g 200.00g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著就可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;vgextend&lt;/code&gt;這個指令，&lt;br /&gt;
把剛剛新增的&lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt;加入至原有的&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu-vg&lt;/code&gt;當中，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vgextend ubuntu-vg /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
然後一樣用&lt;code class=&quot;highlighter-rouge&quot;&gt;vgs&lt;/code&gt;去看看&lt;code class=&quot;highlighter-rouge&quot;&gt;Free PE&lt;/code&gt;，應該會多了200g。&lt;br /&gt;
然後就可以用上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;lvresize&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;resize2fs&lt;/code&gt;去Extend某個LV了。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;2-shrink&quot;&gt;2. Shrink&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;接著要來講Shrink的部分，&lt;br /&gt;
其實Shrink也是透過&lt;code class=&quot;highlighter-rouge&quot;&gt;lvresize&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;resize2fs&lt;/code&gt;來完成。&lt;br /&gt;
但Shrink和Extend有以下幾點的差別：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不能online shrinking&lt;/li&gt;
  &lt;li&gt;要先縮filesytem，再縮LVM&lt;/li&gt;
  &lt;li&gt;Data有可能會遺失&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那因為不能online shrinking，所以我們要先umount，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;umount /tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
接著才可以shrink filesystem，&lt;br /&gt;
透過&lt;code class=&quot;highlighter-rouge&quot;&gt;resize2fs&lt;/code&gt;去把&lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt;縮到19G。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;resize2fs /dev/mapper/ubuntu--vg-tmp 19G
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;p&gt;最後才是去shrink LV，一樣是用&lt;code class=&quot;highlighter-rouge&quot;&gt;lvresize&lt;/code&gt;去做，&lt;br /&gt;
過程中會show warning，告訴你資料可能會遺失，是否真的要做shrink？&lt;br /&gt;
如果沒有什麼疑慮，就按下&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;吧！&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lvresize -L -100G /dev/mapper/ubuntu--vg-tmp
  WARNING: Reducing active logical volume to 19.07 GiB
  THIS MAY DESTROY YOUR DATA &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;filesystem etc.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Do you really want to reduce tmp? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/n]: y
  Reducing logical volume tmp to 19.07 GiB
  Logical volume tmp successfully resized
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/br&amp;gt;
最後在mount起來，以及用&lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt;去看，&lt;br /&gt;
應該會發現&lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt;只剩下19G了！&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mount /tmp

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;df -h /tmp
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/ubuntu--vg-tmp   19G   44M   18G   1% /tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/11/27/how-to-extendreduce-lvm</link>
                <guid>http://blog.kenyang.net/2015/11/27/how-to-extendreduce-lvm</guid>
                <pubDate>Fri, 27 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Do not allocate all the LVM space with preseed</title>
                <description>
&lt;p&gt;&amp;lt;font size=3&amp;gt;
使用Preseed file分割LVM時，&lt;br /&gt;
並無法做到只使用某部分的VG就好，&lt;br /&gt;
舉例來說，假設你有一個100G的硬碟，  &lt;br /&gt;
然後preseed file如下，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d-i partman-auto/expert_recipe string  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      boot-root ::                                                  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              20480 10 20480 ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; root &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; / &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                               &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              20480 10 20480 ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /var/log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我們分別給每個lv的大小為：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; : 20G&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt;  : 20G&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可能會以為，剩下的60G不會被加到LV裡面，&lt;br /&gt;
但其實剩下的60G會通通被放到log裡面去。&lt;/p&gt;

&lt;p&gt;不過有比較tricky的解法，可以參考下面的Preseed file，&lt;br /&gt;
我們多增加了一個LV，叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;to_be_free&lt;/code&gt;，&lt;br /&gt;
然後把所有的free space都指派給&lt;code class=&quot;highlighter-rouge&quot;&gt;to_be_free&lt;/code&gt;，&lt;br /&gt;
最後在&lt;code class=&quot;highlighter-rouge&quot;&gt;late_command&lt;/code&gt;裡，用&lt;code class=&quot;highlighter-rouge&quot;&gt;lvremove&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;to_be_free&lt;/code&gt;砍掉，&lt;br /&gt;
這樣就可以做到把某部分space歸還了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d-i partman-auto/expert_recipe string  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      boot-root ::                                                  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              20480 10 20480 ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; root &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; / &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                               &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              20480 10 20480 ext4                                   &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /var/log &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              .                                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              1 10 -1 ext4                                          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;$lvmok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; lv_name&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; to_be_free &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      method&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; format&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                    &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      use_filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; filesystem&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; ext4 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      mountpoint&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; /to_be_free &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                      
d-i preseed/late_command string &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
umount /target/to_be_free/ ; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
lvremove -f /dev/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;to_be_free &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
sed -i &lt;span class=&quot;s1&quot;&gt;'/to_be_free/d'&lt;/span&gt; /target/etc/fstab ; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed</link>
                <guid>http://blog.kenyang.net/2015/11/27/do-not-allocate-all-the-lvm-space-with-preseed</guid>
                <pubDate>Fri, 27 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>如何把Google Blogger搬到Github pages</title>
                <description>&lt;p&gt;&amp;lt;font size=3&amp;gt;
最近一直很想從Google Blogger中離家出走，因為在blogger寫筆記實在太麻煩了，&lt;br /&gt;
每一個筆記的format每次都調得好累，&lt;br /&gt;
且我很常在local寫一份markdown，&lt;br /&gt;
這樣等於我要寫二次..&lt;/p&gt;

&lt;p&gt;所以就動起了念頭要搬到一個支援markdown格式的地方。&lt;br /&gt;
那我選的是github pages，然後搭配著jekyll這個tool去做publish。&lt;br /&gt;
所以這篇會圍繞在下面的主題，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;建立github repo&lt;/li&gt;
  &lt;li&gt;用jekyll-bootstrap建立一個template&lt;/li&gt;
  &lt;li&gt;用jekyll-import把blogger資料匯出與匯入&lt;/li&gt;
  &lt;li&gt;安裝jekyll&lt;/li&gt;
  &lt;li&gt;安裝jekyll-paginate&lt;/li&gt;
  &lt;li&gt;整合Google Adsense&lt;/li&gt;
  &lt;li&gt;整合comment system&lt;/li&gt;
  &lt;li&gt;整合Google Analytics&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;1-建立github-repo&quot;&gt;1. 建立github repo&lt;/h2&gt;

&lt;p&gt;首先要先去&lt;a href=&quot;https://github.com/new&quot;&gt;github&lt;/a&gt;的網站建立一個新的repo，&lt;br /&gt;
repo名稱為&lt;code class=&quot;highlighter-rouge&quot;&gt;your_name.github.io&lt;/code&gt;，&lt;br /&gt;
所以我的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;ken-yang.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;2-jekyll-bootstrap&quot;&gt;2. jekyll-bootstrap&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;jekyll-bootstrap&lt;/a&gt;是一個線上工具，&lt;br /&gt;
可以讓你快速地建立一個template，&lt;br /&gt;
然後這個template是以boostrap為基底。&lt;br /&gt;
使用方式如下（記得把&lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME&lt;/code&gt;換成你的&lt;code class=&quot;highlighter-rouge&quot;&gt;your_name&lt;/code&gt;)：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.io
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@github.com:USERNAME/USERNAME.github.ui.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著你就可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;看看，應該會有default的index。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;3-jekyll-import-匯出與匯入&quot;&gt;3. jekyll-import （匯出與匯入）&lt;/h2&gt;

&lt;p&gt;接著我們要把原本在google blogger上的資料轉出來，&lt;br /&gt;
這裡使用&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;這個tool。
安裝&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;之前， &lt;br /&gt;
如果你是用MAC，請先安裝xcode，&lt;br /&gt;
如果是用linux，請先安裝make。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install -n jekyll-import
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;安裝成功以後，去google blogger的後台把文章通通export出來。&lt;br /&gt;
然後再terminal執行下面的指令，&lt;br /&gt;
記得把&lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/blog-MM-DD-YYYY.xml&lt;/code&gt;換成對應的位置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ruby -rubygems -e &lt;span class=&quot;s1&quot;&gt;'require &quot;jekyll-import&quot;;
    JekyllImport::Importers::Blogger.run({
      &quot;source&quot;                =&amp;gt; &quot;/path/to/blog-MM-DD-YYYY.xml&quot;,
      &quot;no-blogger-info&quot;       =&amp;gt; false, # not to leave blogger-URL info (id and old URL) in the front matter
      &quot;replace-internal-link&quot; =&amp;gt; false, # replace internal links using the post_url liquid tag.
    })'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著會產生二個資料夾，分別為&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 放文章的地方&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_draft&lt;/code&gt; 放草稿的地方&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接著就把_posts底下的資料搬移至剛剛的git project底下，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp _posts/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; USERNAME.github.ui.git/_posts/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;4-安裝jekyll&quot;&gt;4. 安裝jekyll&lt;/h2&gt;

&lt;p&gt;接著安裝&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;，&lt;br /&gt;
jekyll主要功用為:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在local preview你的post&lt;/li&gt;
  &lt;li&gt;render post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝方式一樣是透過gem，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;安裝成功就可以用jekyll去preview你的posts，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然後會在你的local起一個web server，&lt;br /&gt;
網址是&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;，&lt;br /&gt;
在執行&lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt;的當下就會幫我們render post了，&lt;br /&gt;
接著就可以把所有的changed push回去github上。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add . 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git cm -m &lt;span class=&quot;s1&quot;&gt;'add posts'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然後一樣去&lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;看看，會有原本在blogger上的posts了！&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;5-安裝jekyll-paginate&quot;&gt;5. 安裝jekyll-paginate&lt;/h2&gt;

&lt;p&gt;jekyll-paginate功用就是分頁，如果你不想要你的首頁就把所有的post通通列出來，&lt;br /&gt;
那麼就可以安裝這個plugin，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著打開&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;，然後加入下面三行，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gems: [jekyll-paginate]
paginate: 3
paginate_path: &quot;/blog/page:num&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後有一個比較tricky的地方，&lt;br /&gt;
如果你的首頁是index.md，pagenate是無法幫你gen出來，&lt;br /&gt;
必須是index.html，但很簡單，你只要把&lt;code class=&quot;highlighter-rouge&quot;&gt;mv index.md  index.html&lt;/code&gt;即可，&lt;br /&gt;
mv完成以後，接著打開&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;，&lt;br /&gt;
然後把下面的code貼入。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% for post in paginator.posts %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color: #F22430&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 100%; border-bottom: 1px solid #E7E7E7;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date_to_long_string }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {{ post.excerpt }}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.more }} &lt;span class=&quot;ni&quot;&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Pagination links --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pagination&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% if paginator.previous_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.previous_page_path }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previous&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page_number &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page: {{ paginator.page }} of {{ paginator.total_pages }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% if paginator.next_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.next_page_path }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著就在重新render一次。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;完成以後，在&lt;code class=&quot;highlighter-rouge&quot;&gt;_site/blog/&lt;/code&gt;底下，就會有很多&lt;code class=&quot;highlighter-rouge&quot;&gt;pageX&lt;/code&gt;的資料夾，&lt;br /&gt;
接著就可以通通在push回去github上。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;6-整合adsense&quot;&gt;6. 整合Adsense&lt;/h2&gt;

&lt;p&gt;這裡用adsense當作廣告source，&lt;br /&gt;
首先先去adsense網站上申請，這裡就不教怎麼申請了，&lt;br /&gt;
申請完以後，會給你一串javascript，&lt;br /&gt;
把它複製起來，然後建立一個新的html檔案。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim _includes/adsense.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然後把剛剛adsense給的那串javascript貼進去，如下，&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- id10t_top --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ins&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adsbygoogle&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display:block&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-client=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ca-pub-xxxxxxxxxxxx&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1161208442&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;auto&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著我們就可以在想要放廣告的page裡面，include &lt;code class=&quot;highlighter-rouge&quot;&gt;adsense.html&lt;/code&gt;這個file，&lt;br /&gt;
假設我們想要在首頁放廣告，那麼就是打開 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; ，&lt;br /&gt;
然後在適當的地方貼入下面的code，&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include adsense.html %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著一樣重新render一次就完成了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;7-整合comment-system&quot;&gt;7. 整合Comment system&lt;/h2&gt;

&lt;p&gt;jekyll裡面內建了很多的comment system，有disqus、facebook…etc.&lt;br /&gt;
這裡我選擇了&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;，因為預設也是使用它。&lt;br /&gt;
那首先要先去&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;上註冊，&lt;br /&gt;
註冊非常簡單，也不需要認證。&lt;br /&gt;
註冊完成以後就會取得一個&lt;code class=&quot;highlighter-rouge&quot;&gt;short name&lt;/code&gt;，&lt;br /&gt;
有了&lt;code class=&quot;highlighter-rouge&quot;&gt;short name&lt;/code&gt;以後，就打開&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;，&lt;br /&gt;
然後找到&lt;code class=&quot;highlighter-rouge&quot;&gt;comments&lt;/code&gt;這個key，然後把你的&lt;code class=&quot;highlighter-rouge&quot;&gt;short name&lt;/code&gt;填入即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments :
  provider : disqus
  disqus :
    short_name : your_short_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成以後，一樣重新render就完成了。&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;8-整合google-analytics&quot;&gt;8. 整合Google Analytics&lt;/h2&gt;

&lt;p&gt;jekyll也有內建analytics的功能，其實跟上面的comment system差不多，&lt;br /&gt;
一樣填入analytics id即可。&lt;br /&gt;
但我發現jekyll的analytics 好像比較舊。&lt;br /&gt;
所以我就不用它內建的，我就用與adsense的方式一樣，&lt;br /&gt;
先create一個&lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt;，接著把下面的code貼入，&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GoogleAnalyticsObject'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'//www.google-analytics.com/analytics.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ga'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UA-xxxxxx-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'auto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'send'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pageview'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在我想要track的地方，貼入下面的code，&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include analytics.html %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在重新render就完成了！&lt;br /&gt;
最後只要把你的cname指向username.github.io，&lt;br /&gt;
以及在目錄底下建立一個名稱為&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;的file，填入你的domain就好了。&lt;/p&gt;

&lt;p&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;

</description>
                <link>http://blog.kenyang.net/2015/11/26/move-blogger-to-github</link>
                <guid>http://blog.kenyang.net/2015/11/26/move-blogger-to-github</guid>
                <pubDate>Thu, 26 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Setup Linux Multipath in Ubuntu</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;這篇要講Linux Multipath，&lt;br /&gt;為了使用Linux Multipath，所以用了multipath-tool這個package，&lt;br /&gt;multipath-tool提供了二個功能，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. input/output fail-over&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. load balancing for block device&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Prerequisite&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;開始之前先，準備下面所需要的環境，&lt;br /&gt;1. 1台server上有2張網卡(eth0, eth1)&lt;br /&gt;2. iSCSI target x1&lt;br /&gt;理論上，server上的2張網卡應接在不同的swtich上，抑或在不同的網段上。&lt;br /&gt;目的在於某一條線路斷時，才不會影響另外一條。&lt;br /&gt;但為了測試可以先都放在同個網段上。&lt;br /&gt;&lt;br /&gt;假設，&lt;br /&gt;eth0 IP為172.16.131.134&lt;br /&gt;eth1 IP為172.16.131.135&lt;br /&gt;iSCSI IP為172.16.131.138&lt;br /&gt;&lt;br /&gt;整體的網路架構可以參考此張圖，&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s1600/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s400/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; width=&quot;263&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Installation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著安裝我們需要的package，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install open-iscsi&lt;br /&gt;apt-get install multipath-tools&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. multipath configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著來設定multipah，先create一個config file，（你也可以從/usr/share/doc/multipath-tools/examples/multipath.conf.synthetic這裏複製至/etc/multipah.conf底下）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ vim /etc/multipath.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，參數的說明可以看這（&lt;a href=&quot;https://help.ubuntu.com/lts/serverguide/multipath-dm-multipath-config-file.html&quot;&gt;點我&lt;/a&gt;）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;defaults {&lt;br /&gt;     user_friendly_names yes&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;devices {&lt;br /&gt;     device {&lt;br /&gt;          polling_interval 5&lt;br /&gt;          path_selector &quot;round-robin 0&quot;&lt;br /&gt;          path_grouping_policy group_by_prio&lt;br /&gt;          prio rdac&lt;br /&gt;          path_checker rdac&lt;br /&gt;          hardware_handler &quot;1 rdac&quot;&lt;br /&gt;          failback immediate&lt;br /&gt;          features &quot;2 pg_init_retires 50&quot;&lt;br /&gt;          no_path_retry 30&lt;br /&gt;          rr_min_io 100&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. iSCSI configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著我們要設定iSCSI，讓我們在login某target時，&lt;br /&gt;可以透過不同的NIC同時進行login，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m iface -I eth0 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth1 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth0 --op=update -n iface.net_ifacename -v eth0&lt;br /&gt;$ iscsiadm -m iface -I eth1 --op=update -n iface.net_ifacename -v eth1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著要把reverse path filtering關掉，&lt;br /&gt;否則其中一張網卡登入target時的packet會被ignore，&lt;br /&gt;所以要去編輯/etc/sysctl.conf，&lt;br /&gt;加入下面兩行。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;net.ipv4.conf.eth0.rp_filter=2&lt;br /&gt;net.ipv4.conf.eth1.rp_filter=2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後執行下面指令讓conf生效。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ sysctl -p&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Login iSCSI&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先先discovery該iSCSI，看該iSCSI上有哪些target，&lt;br /&gt;可以發現一模一樣的target卻顯示了2筆，這是因為剛剛前面我們設定了2張nic了！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m discovery -t st -p 172.16.131.138:3260&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著login該target，會發現login了二次，且這二次分別是透過eth0以及eth1去完成。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m node -T iqn.2015-07.net.kenyang:ken.iscsi --login&lt;br /&gt;&lt;br /&gt;Logging in to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Logging in to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Login to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;Login to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;顯示multipath的topology，&lt;br /&gt;會發現有2個blcok device，&lt;br /&gt;因為我們登入了2次，所以該target在我們server上被視為2個block device，分別為sdb, sdc。&lt;br /&gt;然後再透過device mapper的概念去把它aggregate成一個/dev/mapper/mpath1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ multipath -ll&lt;br /&gt;&lt;br /&gt;mpath1 (xxxxxxxxxxxxxxxxxxx) dm-6 EQLOGIC,100E-00&lt;br /&gt;size=60G features='0' hwhandler='0' wp=rw&lt;br /&gt;`-+- policy='round-robin 0' prio=1 status=active&lt;br /&gt; |- 7:0:0:0 sdb 8:16 active ready running&lt;br /&gt; `- 8:0:0:0 sdc 8:32 active ready running&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Format block device&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後一步就要把該block device mount起來使用，&lt;br /&gt;但mount之前要先fdisk以及mkfs，要注意我們的對象不是sdb,sdc，&lt;br /&gt;而是mpatch1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;fdisk /dev/mapper/mpath1&lt;br /&gt;mkfs.ext4 /dev/mapper/mpath1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成以後就可以mount起來使用看看。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mount /dev/mapper/mpath1 /storage/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu</link>
                <guid>http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu</guid>
                <pubDate>Thu, 13 Aug 2015 15:07:00 +0800</pubDate>
        </item>


</channel>
</rss>
