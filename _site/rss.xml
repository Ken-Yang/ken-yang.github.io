<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Ken Yang筆記</title>
        <description>Ken Yang筆記 - Ken Yang</description>
        <link>http://blog.kenyang.net</link>
        <atom:link href="http://blog.kenyang.net/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Thu, 26 Nov 2015 21:39:19 +0800</lastBuildDate>
        <pubDate>Thu, 26 Nov 2015 21:39:19 +0800</pubDate>
        <ttl>60</ttl>


        <item>
                <title>如何把Google Blogger搬到Github pages</title>
                <description>&lt;p&gt;&lt;font size=3&gt;
最近一直很想從Google Blogger中離家出走，因為在blogger寫筆記實在太麻煩了，&lt;br&gt;
每一個筆記的format每次都調得好累，&lt;br&gt;
且我很常在local寫一份markdown，&lt;br&gt;
這樣等於我要寫二次..  &lt;/p&gt;

&lt;p&gt;所以就動起了念頭要搬到一個支援markdown格式的地方。&lt;br&gt;
那我選的是github pages，然後搭配著jekyll這個tool去做publish。&lt;br&gt;
所以這篇會圍繞在下面的主題，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立github repo&lt;/li&gt;
&lt;li&gt;用jekyll-bootstrap建立一個template&lt;/li&gt;
&lt;li&gt;用jekyll-import把blogger資料匯出與匯入&lt;/li&gt;
&lt;li&gt;安裝jekyll&lt;/li&gt;
&lt;li&gt;安裝jekyll-paginate&lt;/li&gt;
&lt;li&gt;整合Google Adsense&lt;/li&gt;
&lt;li&gt;整合comment system&lt;/li&gt;
&lt;li&gt;整合Google Analytics&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;1-建立github-repo&quot;&gt;1. 建立github repo&lt;/h2&gt;

&lt;p&gt;首先要先去&lt;a href=&quot;https://github.com/new&quot;&gt;github&lt;/a&gt;的網站建立一個新的repo，&lt;br&gt;
repo名稱為&lt;code&gt;your_name.github.io&lt;/code&gt;，&lt;br&gt;
所以我的就是&lt;code&gt;ken-yang.github.io&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt; &lt;/p&gt;

&lt;h2 id=&quot;2-jekyll-bootstrap&quot;&gt;2. jekyll-bootstrap&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;jekyll-bootstrap&lt;/a&gt;是一個線上工具，&lt;br&gt;
可以讓你快速地建立一個template，&lt;br&gt;
然後這個template是以boostrap為基底。&lt;br&gt;
使用方式如下（記得把&lt;code&gt;USERNAME&lt;/code&gt;換成你的&lt;code&gt;your_name&lt;/code&gt;)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin git@github.com:USERNAME/USERNAME.github.ui.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著你就可以去&lt;code&gt;USERNAME.github.io&lt;/code&gt;看看，應該會有default的index。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt; &lt;/p&gt;

&lt;h2 id=&quot;3-jekyll-import-（匯出與匯入）&quot;&gt;3. jekyll-import （匯出與匯入）&lt;/h2&gt;

&lt;p&gt;接著我們要把原本在google blogger上的資料轉出來，&lt;br&gt;
這裡使用&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;這個tool。
安裝&lt;a href=&quot;http://import.jekyllrb.com/docs/installation/&quot;&gt;jekyll-import&lt;/a&gt;之前，&lt;br&gt;
如果你是用MAC，請先安裝xcode，&lt;br&gt;
如果是用linux，請先安裝make。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n jekyll-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝成功以後，去google blogger的後台把文章通通export出來。&lt;br&gt;
然後再terminal執行下面的指令，&lt;br&gt;
記得把&lt;code&gt;/path/to/blog-MM-DD-YYYY.xml&lt;/code&gt;換成對應的位置。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -rubygems -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;require &amp;quot;jekyll-import&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    JekyllImport::Importers::Blogger.run({&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;source&amp;quot;                =&amp;gt; &amp;quot;/path/to/blog-MM-DD-YYYY.xml&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;no-blogger-info&amp;quot;       =&amp;gt; false, # not to leave blogger-URL info (id and old URL) in the front matter&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      &amp;quot;replace-internal-link&amp;quot; =&amp;gt; false, # replace internal links using the post_url liquid tag.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    })&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著會產生二個資料夾，分別為&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_posts&lt;/code&gt; 放文章的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_draft&lt;/code&gt; 放草稿的地方&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接著就把_posts底下的資料搬移至剛剛的git project底下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cp _posts/* USERNAME.github.ui.git/_posts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-安裝jekyll&quot;&gt;4. 安裝jekyll&lt;/h2&gt;

&lt;p&gt;接著安裝&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;，&lt;br&gt;
jekyll主要功用為:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在local preview你的post&lt;/li&gt;
&lt;li&gt;render post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝方式一樣是透過gem，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安裝成功就可以用jekyll去preview你的posts，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;USERNAME.github.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後會在你的local起一個web server，&lt;br&gt;
網址是&lt;code&gt;http://localhost:4000&lt;/code&gt;，&lt;br&gt;
在執行&lt;code&gt;serve&lt;/code&gt;的當下就會幫我們render post了，&lt;br&gt;
接著就可以把所有的changed push回去github上。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add . 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git cm -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;add posts&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後一樣去&lt;code&gt;USERNAME.github.io&lt;/code&gt;看看，會有原本在blogger上的posts了！&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-安裝jekyll-paginate&quot;&gt;5. 安裝jekyll-paginate&lt;/h2&gt;

&lt;p&gt;jekyll-paginate功用就是分頁，如果你不想要你的首頁就把所有的post通通列出來，&lt;br&gt;
那麼就可以安裝這個plugin，  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install -n /usr/local/bin jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著打開&lt;code&gt;_config.yml&lt;/code&gt;，然後加入下面三行，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gems: [jekyll-paginate]
paginate: 3
paginate_path: &amp;quot;/blog/page:num&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後有一個比較tricky的地方，&lt;br&gt;
如果你的首頁是index.md，pagenate是無法幫你gen出來，&lt;br&gt;
必須是index.html，但很簡單，你只要把&lt;code&gt;mv index.md  index.html&lt;/code&gt;即可，&lt;br&gt;
mv完成以後，接著打開&lt;code&gt;index.html&lt;/code&gt;，&lt;br&gt;
然後把下面的code貼入。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% for post in paginator.posts %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;color: #F22430&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ post.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width: 100%; border-bottom: 1px solid #E7E7E7;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date_to_long_string }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {{ post.excerpt }}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myButton&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ post.url | prepend: site.baseurl }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.more }} &lt;span class=&quot;ni&quot;&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Pagination links --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% if paginator.previous_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ paginator.previous_page_path }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;page_number &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page: {{ paginator.page }} of {{ paginator.total_pages }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% if paginator.next_page %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ paginator.next_page_path }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  {% else %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;next &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著就在重新render一次。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成以後，在&lt;code&gt;_site/blog/&lt;/code&gt;底下，就會有很多&lt;code&gt;pageX&lt;/code&gt;的資料夾，&lt;br&gt;
接著就可以通通在push回去github上。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-整合adsense&quot;&gt;6. 整合Adsense&lt;/h2&gt;

&lt;p&gt;這裡用adsense當作廣告source，&lt;br&gt;
首先先去adsense網站上申請，這裡就不教怎麼申請了，&lt;br&gt;
申請完以後，會給你一串javascript，&lt;br&gt;
把它複製起來，然後建立一個新的html檔案。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim _includes/adsense.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後把剛剛adsense給的那串javascript貼進去，如下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- id10t_top --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ins&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;adsbygoogle&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;display:block&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-client=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca-pub-xxxxxxxxxxxx&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1161208442&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data-ad-format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;auto&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;adsbygoogle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著我們就可以在想要放廣告的page裡面，include &lt;code&gt;adsense.html&lt;/code&gt;這個file，&lt;br&gt;
假設我們想要在首頁放廣告，那麼就是打開 &lt;code&gt;index.html&lt;/code&gt; ，&lt;br&gt;
然後在適當的地方貼入下面的code，  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% include adsense.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著一樣重新render一次就完成了。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-整合comment-system&quot;&gt;7. 整合Comment system&lt;/h2&gt;

&lt;p&gt;jekyll裡面內建了很多的comment system，有disqus、facebook...etc.&lt;br&gt;
這裡我選擇了&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;，因為預設也是使用它。&lt;br&gt;
那首先要先去&lt;a href=&quot;https://disqus.com/home/explore/&quot;&gt;disgus&lt;/a&gt;上註冊，&lt;br&gt;
註冊非常簡單，也不需要認證。&lt;br&gt;
註冊完成以後就會取得一個&lt;code&gt;short name&lt;/code&gt;，&lt;br&gt;
有了&lt;code&gt;short name&lt;/code&gt;以後，就打開&lt;code&gt;_config.yml&lt;/code&gt;，&lt;br&gt;
然後找到&lt;code&gt;comments&lt;/code&gt;這個key，然後把你的&lt;code&gt;short name&lt;/code&gt;填入即可。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;comments :
  provider : disqus
  disqus :
    short_name : your_short_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成以後，一樣重新render就完成了。&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-整合google-analytics&quot;&gt;8. 整合Google Analytics&lt;/h2&gt;

&lt;p&gt;jekyll也有內建analytics的功能，其實跟上面的comment system差不多，&lt;br&gt;
一樣填入analytics id即可。&lt;br&gt;
但我發現jekyll的analytics 好像比較舊。&lt;br&gt;
所以我就不用它內建的，我就用與adsense的方式一樣，&lt;br&gt;
先create一個&lt;code&gt;analytics.html&lt;/code&gt;，接著把下面的code貼入，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GoogleAnalyticsObject&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;//www.google-analytics.com/analytics.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ga&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;UA-xxxxxx-1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ga&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;send&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pageview&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在我想要track的地方，貼入下面的code，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% include analytics.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在重新render就完成了！&lt;br&gt;
最後只要把你的cname指向username.github.io，&lt;br&gt;
以及在目錄底下建立一個名稱為&lt;code&gt;CNAME&lt;/code&gt;的file，填入你的domain就好了。&lt;/p&gt;

&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
</description>
                <link>http://blog.kenyang.net/2015/11/26/move-blogger-to-github</link>
                <guid>http://blog.kenyang.net/2015/11/26/move-blogger-to-github</guid>
                <pubDate>Thu, 26 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Setup Linux Multipath in Ubuntu</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;這篇要講Linux Multipath，&lt;br /&gt;為了使用Linux Multipath，所以用了multipath-tool這個package，&lt;br /&gt;multipath-tool提供了二個功能，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. input/output fail-over&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. load balancing for block device&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Prerequisite&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;開始之前先，準備下面所需要的環境，&lt;br /&gt;1. 1台server上有2張網卡(eth0, eth1)&lt;br /&gt;2. iSCSI target x1&lt;br /&gt;理論上，server上的2張網卡應接在不同的swtich上，抑或在不同的網段上。&lt;br /&gt;目的在於某一條線路斷時，才不會影響另外一條。&lt;br /&gt;但為了測試可以先都放在同個網段上。&lt;br /&gt;&lt;br /&gt;假設，&lt;br /&gt;eth0 IP為172.16.131.134&lt;br /&gt;eth1 IP為172.16.131.135&lt;br /&gt;iSCSI IP為172.16.131.138&lt;br /&gt;&lt;br /&gt;整體的網路架構可以參考此張圖，&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s1600/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;http://1.bp.blogspot.com/-ZfPX7UenJK4/Vcw-nyopwMI/AAAAAAAAFmo/_MV4SmjPRo8/s400/Network%2BDiagram%2B-%2BPage%2B1%2B%25283%2529.png&quot; width=&quot;263&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Installation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著安裝我們需要的package，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install open-iscsi&lt;br /&gt;apt-get install multipath-tools&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. multipath configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著來設定multipah，先create一個config file，（你也可以從/usr/share/doc/multipath-tools/examples/multipath.conf.synthetic這裏複製至/etc/multipah.conf底下）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ vim /etc/multipath.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，參數的說明可以看這（&lt;a href=&quot;https://help.ubuntu.com/lts/serverguide/multipath-dm-multipath-config-file.html&quot;&gt;點我&lt;/a&gt;）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;defaults {&lt;br /&gt;     user_friendly_names yes&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;devices {&lt;br /&gt;     device {&lt;br /&gt;          polling_interval 5&lt;br /&gt;          path_selector &quot;round-robin 0&quot;&lt;br /&gt;          path_grouping_policy group_by_prio&lt;br /&gt;          prio rdac&lt;br /&gt;          path_checker rdac&lt;br /&gt;          hardware_handler &quot;1 rdac&quot;&lt;br /&gt;          failback immediate&lt;br /&gt;          features &quot;2 pg_init_retires 50&quot;&lt;br /&gt;          no_path_retry 30&lt;br /&gt;          rr_min_io 100&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. iSCSI configuration&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著我們要設定iSCSI，讓我們在login某target時，&lt;br /&gt;可以透過不同的NIC同時進行login，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m iface -I eth0 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth1 -o new&lt;br /&gt;$ iscsiadm -m iface -I eth0 --op=update -n iface.net_ifacename -v eth0&lt;br /&gt;$ iscsiadm -m iface -I eth1 --op=update -n iface.net_ifacename -v eth1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著要把reverse path filtering關掉，&lt;br /&gt;否則其中一張網卡登入target時的packet會被ignore，&lt;br /&gt;所以要去編輯/etc/sysctl.conf，&lt;br /&gt;加入下面兩行。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;net.ipv4.conf.eth0.rp_filter=2&lt;br /&gt;net.ipv4.conf.eth1.rp_filter=2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後執行下面指令讓conf生效。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ sysctl -p&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Login iSCSI&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先先discovery該iSCSI，看該iSCSI上有哪些target，&lt;br /&gt;可以發現一模一樣的target卻顯示了2筆，這是因為剛剛前面我們設定了2張nic了！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m discovery -t st -p 172.16.131.138:3260&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;172.16.131.138:3260,1 iqn.2015-07.net.kenyang:ken.iscsi&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著login該target，會發現login了二次，且這二次分別是透過eth0以及eth1去完成。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ iscsiadm -m node -T iqn.2015-07.net.kenyang:ken.iscsi --login&lt;br /&gt;&lt;br /&gt;Logging in to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Logging in to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]&lt;br /&gt;Login to [iface: eth0, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;Login to [iface: eth1, target: iqn.2015-07.net.kenyang:ken.iscsi, portal: 172.16.131.138,3260]: successful&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;顯示multipath的topology，&lt;br /&gt;會發現有2個blcok device，&lt;br /&gt;因為我們登入了2次，所以該target在我們server上被視為2個block device，分別為sdb, sdc。&lt;br /&gt;然後再透過device mapper的概念去把它aggregate成一個/dev/mapper/mpath1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ multipath -ll&lt;br /&gt;&lt;br /&gt;mpath1 (xxxxxxxxxxxxxxxxxxx) dm-6 EQLOGIC,100E-00&lt;br /&gt;size=60G features=&#39;0&#39; hwhandler=&#39;0&#39; wp=rw&lt;br /&gt;`-+- policy=&#39;round-robin 0&#39; prio=1 status=active&lt;br /&gt; |- 7:0:0:0 sdb 8:16 active ready running&lt;br /&gt; `- 8:0:0:0 sdc 8:32 active ready running&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Format block device&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後一步就要把該block device mount起來使用，&lt;br /&gt;但mount之前要先fdisk以及mkfs，要注意我們的對象不是sdb,sdc，&lt;br /&gt;而是mpatch1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;fdisk /dev/mapper/mpath1&lt;br /&gt;mkfs.ext4 /dev/mapper/mpath1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成以後就可以mount起來使用看看。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mount /dev/mapper/mpath1 /storage/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu</link>
                <guid>http://blog.kenyang.net/2015/08/13/setup-linux-multipath-in-ubuntu</guid>
                <pubDate>Thu, 13 Aug 2015 15:07:00 +0800</pubDate>
        </item>

        <item>
                <title>Apache Kafka: Distributed messaging system.</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;Apache Kafka是一個分散式的訊息處理framework，&lt;br /&gt;透過publish來發佈message，以及subscribe來訂閱取得message。&lt;br /&gt;從架構上來看，Kafka可以分為下面幾種角色，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. producer:   發佈(publish)message to topic&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. consumer:   訂閱(subscribe)topic以取得message&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. broker:     簡單的說就是server，由一台以上的broker組成一個cluster&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. topic:      message的分類&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5. zookeeper:  嚴格來說，zookeeper不算是Kafka的一部分，但Kafka卻得倚靠zookeeper來做到sync。&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-PvOMN32b-LA/VYfNp-L3GVI/AAAAAAAAFlg/upzpVGdl1sk/s1600/producer_consumer.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-PvOMN32b-LA/VYfNp-L3GVI/AAAAAAAAFlg/upzpVGdl1sk/s1600/producer_consumer.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;了解Kafka的每一個角色以後，&lt;br /&gt;接下來要講怎麼安裝跟使用。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install Kafka&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，先安裝Kafka，這裡選的版本是0.8.2。&lt;br /&gt;Kafka的安裝很簡單，只有一個tarball，解開就好。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://apache.stu.edu.tw/kafka/0.8.2.0/kafka_2.10-0.8.2.0.tgz&lt;br /&gt;tar xvzf kafka_2.10-0.8.2.0.tgz&lt;br /&gt;cd kafka_2.10-0.8.2.0/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Start zookeeper&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝完以後，在開始之前，&lt;br /&gt;要先啟動zookeeper，原因是前面有說過，&lt;br /&gt;Kafka倚靠zookeeper做message的sync。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/zookeeper-server-start.sh config/zookeeper.properties &amp;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;啟動以後，可以透過下面指令去觀察一下，&lt;br /&gt;應該會看到2隻java在LISTEN，&lt;br /&gt;有一隻的port預設一定是2181，預設值放在config/zookeeper.properties裡面。&lt;br /&gt;這個port是給等等的其他broker連上來用的。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;netstat -tnlp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Start Kafka server(broker)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著啟動三個kafka server，讓這三台server變成一個cluster，&lt;br /&gt;為什麼要跑三台？因為Kafka還有replication的功能，所以順便玩一下。&lt;br /&gt;然後我只有一台機器，所以我會讓這三台通通run在同一台上面。&lt;br /&gt;在啟動之前，要先“複製“and“編輯”一個config檔案，&lt;br /&gt;&lt;br /&gt;首先，先複製config，因為有三台，但是預設的config只有一個，所以要多複製二個出來。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cp config/server.properties config/server-2.properties&lt;br /&gt;cp config/server.properties config/server-3.properties&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後去編輯config/server-2.properties以及server-3.properties這二個檔案，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;# The id of the broker. This must be set to a unique integer for each broker.&lt;br /&gt;broker.id=1&lt;br /&gt;&lt;br /&gt;# The port the socket server listens on&lt;br /&gt;port=9092&lt;br /&gt;&lt;br /&gt;# A comma seperated list of directories under which to store log files&lt;br /&gt;log.dirs=/tmp/kafka-logs&lt;br /&gt;&lt;/pre&gt;只要改broker.id, port, log.dirs這三個key，&lt;br /&gt;這三個都要是unique的value，所以就都往上+1吧，&lt;br /&gt;例如server-2.properties的例子就是，&lt;br /&gt;broker.id=1&lt;br /&gt;port=9093&lt;br /&gt;log.dirs=/tmp/kafka-logs-2&lt;br /&gt;&lt;br /&gt;編輯完以後就分別啟動這三台broker吧。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-server-start.sh config/server.properties &amp;&lt;br /&gt;bin/kafka-server-start.sh config/server-2.properties &amp;&lt;br /&gt;bin/kafka-server-start.sh config/server-3.properties &amp;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Create a topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;有了server以後，接著要create一個topic，&lt;br /&gt;你可以試著把replication的value改成4，你應該會失敗了，&lt;br /&gt;且error msg應該是【4 larger than available brokers: 3】，因為我們剛剛只有start三台broker，所以無法複製四份。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著你可以去查詢這個topic的資訊，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;應該會看到下面的資訊，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;Topic:test PartitionCount:1 ReplicationFactor:3 Configs:&lt;br /&gt; Topic: test Partition: 0 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1&lt;br /&gt;&lt;/pre&gt;ReplicationFactor是3份，&lt;br /&gt;Replicate在0, 1, 2這三台broker上面，&lt;br /&gt;topic的leader是broker 2，leader負責partition的read and write。&lt;br /&gt;Isr的意思是有哪些broker正在sync，簡單的說可以知道哪些broker是活著的。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Publish: send message to topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要開始寫訊息到topic裡面，&lt;br /&gt;透過kafka提供的shell可以進行測試，執行以後，就可以直接輸入你要輸入的訊息，&lt;br /&gt;輸入完以後，按下ctrl+C就可以離開。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test&lt;br /&gt;...&lt;br /&gt;test message 1&lt;br /&gt;test message 2&lt;br /&gt;^C &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Subscribe: get message from topic&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要讀取訊息，&lt;br /&gt;kafka一樣有提供shell script讓我們使用，&lt;br /&gt;應該就可以看到上一步驟所輸入的訊息了。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Advance&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這一步只是要觀察一下replication有無成功，&lt;br /&gt;我們可以去stop該topic的leader，&lt;br /&gt;以我的例子來說，test leader是broker 2，&lt;br /&gt;所以我就去把broker 2關掉，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$ jobs&lt;br /&gt;[1]   Running            bin/zookeeper-server-start.sh config/zookeeper.properties &amp;&lt;br /&gt;[2]   Running            bin/kafka-server-start.sh config/server.properties &amp;&lt;br /&gt;[3]-  Running            bin/kafka-server-start.sh config/server-1.properties &amp;&lt;br /&gt;[4]+  Running            bin/kafka-server-start.sh config/server-2.properties &amp;&lt;br /&gt;$ fg 4&lt;br /&gt;$ ^C&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著我們可以先去看該topic的leader會有什麼變化，應該會發現leader變別台broker了，&lt;br /&gt;而且Isr會只剩下0,1。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;此時我們一樣在去consume message，message應該還是會保存的完整無缺。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic test&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;下一篇應該寫kafka+spark streaming吧！？&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging</link>
                <guid>http://blog.kenyang.net/2015/06/25/apache-kafka-distributed-messaging</guid>
                <pubDate>Thu, 25 Jun 2015 17:32:00 +0800</pubDate>
        </item>

        <item>
                <title>How to run a simple Apache Spark application? (Ubuntu 12.04)</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;因緣際會下，得稍微摸一下Apache Spark，&lt;br /&gt;說實在，在粗淺地摸完Spark以後，我還是想不太出他的應用面。&lt;br /&gt;Anyway，這篇主要分為3個section，&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;如何安裝Spark&lt;/li&gt;&lt;li&gt;如何使用&lt;/li&gt;&lt;li&gt;如何寫個Spark application&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install JDK&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先要先講安裝，&lt;br /&gt;安裝spark之前，要先安裝java+scala，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-add-repository ppa:webupd8team/java&lt;br /&gt;apt-get update&lt;br /&gt;apt-get install oracle-java7-installer&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Install scala&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要安裝scala，這裡安裝的版本是2.11.6。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://www.scala-lang.org/files/archive/scala-2.11.6.tgz&lt;br /&gt;mkdir /usr/local/src/scala&lt;br /&gt;tar xvf scala-2.11.6.tgz -C /usr/local/src/scala/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;安裝完以後，要把scala的路徑加入到PATH環境變數中&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;export SCALA_HOME=/usr/local/src/scala/scala-2.11.6&quot; &gt;&gt; .bashrc&lt;br /&gt;echo &quot;export PATH=\$SCALA_HOME/bin:\$PATH&quot; &gt;&gt; .bashrc&lt;br /&gt;. .bashrc&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Install Spark&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後就安裝spark，安裝會需要一段時間。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://www.apache.org/dist/spark/spark-1.4.0/spark-1.4.0.tgz&lt;br /&gt;tar xvf spark-1.4.0.tgz&lt;br /&gt;cd spark-1.4.0&lt;br /&gt;sbt/sbt assembly&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Spark Interactive Shell&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝完以後，可以進入spark的interactive shell模式做個簡單的測試，&lt;br /&gt;進入interactive mode，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./bin/spark-shell&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;大概會花個10秒做init，進入以後，&lt;br /&gt;會看到scala的prompt字樣，這裏就可以對spark進行操作了。&lt;br /&gt;下面有二個例子，都是對README.md去做操作，&lt;br /&gt;分別為找出含&quot;apache&quot;的句子，&lt;br /&gt;以及找出有幾個&quot;apache&quot;的字。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;scala&gt; val textFile = sc.textFile(&quot;README.md&quot;)&lt;br /&gt;scala&gt; textFile.count()&lt;br /&gt;scala&gt; val results = textFile.filter(line =&gt; line.contains(&quot;apache&quot;)) // search apache&lt;br /&gt;scala&gt; results.count()&lt;br /&gt;scala&gt; results.collect()  // find out those lines contain apache&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Start a Spark cluster&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;好了，剛剛都是自爽模式，&lt;br /&gt;接著我們要啟動一個spark cluster，&lt;br /&gt;這個cluster可以讓很多個worker(slave)加入，&lt;br /&gt;讓他們去執行工作。&lt;br /&gt;&lt;br /&gt;啟動cluster的指令如下：&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-master.sh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;啟動完以後，你可以用netstat -tnlp去看一下，&lt;br /&gt;你會發現有3個java bind住的connection，&lt;br /&gt;預設分別為7077、8080、6066&lt;br /&gt;7077就是這個cluster的port，將來worker要加入就得指定這個port，&lt;br /&gt;8080是這個spark的web management UI。&lt;br /&gt;所以你就可以打開browser，然後去看看web UI．&lt;br /&gt;這時候你的worker數量應該是0。&lt;br /&gt;如果想要加入一個worker，得透過下面的指令，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-slave.sh spark://ubuntu:7077 # change ubuntu to your hostname&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;此時再去web UI看，應該就看到有一個worker存在。&lt;br /&gt;上面是透過二個指令去分別啟動master and slave，&lt;br /&gt;其實你也可以透過下面一個指令就去啟動master, slave，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./sbin/start-all.sh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Connecting an Application to the Cluster&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;有了一個spark cluster以後，&lt;br /&gt;我們就可以把application掛上去，&lt;br /&gt;我們可以透過前面使用的spark-shell，把這個shell run在cluster上。&lt;br /&gt;只要加入--master這參數即可。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;./bin/spark-shell --master spark://ubuntu:7077 # change ubuntu to your hostname&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;進去以後，你一樣可以執行上面的example玩玩看。&lt;br /&gt;同時你也可以去web UI上看看，會在&quot;Running Applications&quot;裡面看到這個shell。&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Writing an Application&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;上一步也算是自爽模式，&lt;br /&gt;我想應該不可能透過shell mode去做你想做的事情，&lt;br /&gt;應該還是要寫個application，&lt;br /&gt;所以這一步驟就是要寫一個很簡單的classs，&lt;br /&gt;然後build它，再把它掛到cluster上執行。&lt;br /&gt;&lt;br /&gt;開始之前，先來設定一下spark的環境變數，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;export SK_HOME=/root/spark-1.4.0&quot; &gt;&gt; .bashrc&lt;br /&gt;. .bashrc&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後改這隻script，（$SK_HOME/build/sbt-launch-lib.bash）&lt;br /&gt;因為我在build的時候，有發生路徑的問題。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim $SK_HOME/build/sbt-launch-lib.bash&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打開這檔案以後，找到這幾行，&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;SBT_VERSION=`awk -F &quot;=&quot; &#39;/sbt\.version/ {print $2}&#39; ./project/build.properties`&lt;br /&gt;...&lt;br /&gt;JAR=build/sbt-launch-${SBT_VERSION}.jar&lt;br /&gt;&lt;/pre&gt;換成下面這幾行，其實也只是變成絕對路徑。&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;SBT_VERSION=`awk -F &quot;=&quot; &#39;/sbt\.version/ {print $2}&#39; $SK_HOME/project/build.properties`&lt;br /&gt;...&lt;br /&gt;JAR=$SK_HOME/build/sbt-launch-${SBT_VERSION}.jar&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成以後，先來create幾個資料夾，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p ./spark-app/src/main/scala/&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就可以寫一個簡單的class，&lt;br /&gt;這class上面差不多，也是用來算count，&lt;br /&gt;記得該class一定要放置在src/main/scala底下。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cd ./spark-app&lt;br /&gt;vim src/main/scala/SimpleApp.scala&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;class內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;/* SimpleApp.scala */&lt;br /&gt;import org.apache.spark.SparkContext&lt;br /&gt;import org.apache.spark.SparkContext._&lt;br /&gt;import org.apache.spark.SparkConf&lt;br /&gt;&lt;br /&gt;object SimpleApp {&lt;br /&gt;  def main(args: Array[String]) {&lt;br /&gt;    val logFile = &quot;/root/spark-1.4.0/README.md&quot;&lt;br /&gt;    val conf = new SparkConf().setAppName(&quot;Simple Application&quot;)&lt;br /&gt;    val sc = new SparkContext(conf)&lt;br /&gt;    val logData = sc.textFile(logFile, 2).cache()&lt;br /&gt;    val numApache = logData.filter(line =&gt; line.contains(&quot;apache&quot;)).count()&lt;br /&gt;    println(&quot;Line with apache: %s &quot;.format(numApache))&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;而在開始build之前，要寫一下這個app的dependency，&lt;br /&gt;放置在sparka-app底下就好。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim simple.sbt&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;name := &quot;Simple Project&quot;&lt;br /&gt;&lt;br /&gt;version := &quot;1.0&quot;&lt;br /&gt;&lt;br /&gt;scalaVersion := &quot;2.11.6&quot;&lt;br /&gt;&lt;br /&gt;libraryDependencies += &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;1.4.0&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就可以開始build，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$SPARK_HOME/build/sbt package&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;build完以後，&lt;br /&gt;會發現spark-app底下多了二個folder（project, target)，&lt;br /&gt;而我們要的jar檔會放在target底下，&lt;br /&gt;我們就可以把這jar交付給spark執行。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;$SPARK_HOME/bin/spark-submit --class &quot;SimpleApp&quot; --master spark://ubuntu:7077 target/scala-2.11/simple-project_2.11-1.0.jar&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;應該會看到下面的字樣，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;Line with apache: 9 15/06/17 02:55:34 INFO TaskSetManager: Finished task 1.0 in stage 2.0 (TID 5) in 32 ms on 172.16.131.140 (2/2)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;最後在web UI裡面的&quot;Completed Applications&quot;會看到我們剛剛執行的那個item。&lt;br /&gt;基本上這樣就完成了簡單的spark application。&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2015/06/17/how-to-run-simple-apache-spark</link>
                <guid>http://blog.kenyang.net/2015/06/17/how-to-run-simple-apache-spark</guid>
                <pubDate>Wed, 17 Jun 2015 10:18:00 +0800</pubDate>
        </item>

        <item>
                <title>How to create a customized Ubuntu ISO?</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;這篇要講怎麼客製化你自己想要的ubuntu ISO，&lt;br /&gt;會講解一些&lt;a href=&quot;http://en.wikipedia.org/wiki/Preseed&quot;&gt;preseed&lt;/a&gt;的參數，&lt;br /&gt;preseed file是debian系列的automation config，而redhat系列就是用kickstart，&lt;br /&gt;debian系列就是根據preseed file去進行安裝．&lt;br /&gt;因此ubuntu也是用preseed，當然ubuntu也可以用kickstart，只是“似乎”支援沒有那麼好!?&lt;br /&gt;題外話，雖然說preseed file是debian的標準格式，&lt;br /&gt;但有一點要記得，debian自己本身的preseed file，並不是每一個command，ubuntu都能接受！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Download ubuntu ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，你要有一個ubuntu的ISO，&lt;br /&gt;這裏我選用ubuntu 12.04的ISO，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;wget http://releases.ubuntu.com/12.04.5/ubuntu-12.04.5-server-amd64.iso&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Mount the ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要把ISO內的東西，先mount起來，接著再copy出來，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /mnt/tmp /mnt/iso&lt;br /&gt;mount -o loop ./ubuntu-12.04.5-server-amd64.iso /mnt/tmp&lt;br /&gt;rsyn -av /mnt/tmp /mnt/iso&lt;br /&gt;umount /mnt/tmp&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Add boot menu option&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;因為要客製化你自己的ISO，&lt;br /&gt;所以我們要在boot menu中，新增一個屬於我們自己的menu，&lt;br /&gt;首先先開啟這個isolinux/txt.cfg檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim /mnt/iso/isolinux/txt.cfg&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打開以後應該會看到下面的內容，&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-VdB_0wKMjWA/VSo0ZnuY9hI/AAAAAAAAFjY/2TZzIfVE7Is/s1600/Screen%2BShot%2B2015-04-12%2Bat%2B4.56.41%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-VdB_0wKMjWA/VSo0ZnuY9hI/AAAAAAAAFjY/2TZzIfVE7Is/s640/Screen%2BShot%2B2015-04-12%2Bat%2B4.56.41%2BPM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;我們就在label install之前新增一筆boot menu，&lt;br /&gt;內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;label YourCustomizedISO&lt;br /&gt;    menu label ^Customized ISO&lt;br /&gt;    kernel /install/vmlinuz&lt;br /&gt;    append  file=/cdrom/preseed/customized.seed initrd=/install/initrd.gz quiet --&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Add pressed file&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要新增一個客製化的preseed file，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim /mnt/iso/preseed/customized.seed&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下，這份preseed讓你可以不用輸入任何按鍵就進行自動安裝！&lt;br /&gt;我覺得還蠻淺顯易懂的，每個section都有標註是在做什麼，&lt;br /&gt;比較值得注意的是『Advance command』這個section，&lt;br /&gt;這section裡面放的是，『安裝完ubuntu以後，要做些什麼事情。』&lt;br /&gt;但是如果你想要在『安裝之前』或者『partition之前或者之後』做些事情，都是可以的。&lt;br /&gt;只不過這個example，我們是在『安裝完ubuntu以後』。&lt;br /&gt;&lt;br /&gt;『preseed/late_command』就是『安裝完ubuntu以後』的意思。&lt;br /&gt;不過這邊可能大家會覺得很奇怪，為什麼在late_command中，&lt;br /&gt;一開始要cp至/target目錄？/target目錄又是什麼？&lt;br /&gt;大家在安裝ubuntu的時候，可以change console一下，這時候cd至/target底下，&lt;br /&gt;你會發現其實裡面就是你真正ubuntu安裝的位置！&lt;br /&gt;那/target外面的東西是誰的呢(bin, lib, etc,....)？&lt;br /&gt;其實是busybox的，所以你一定得把你想要的東西搬到/target裡面，&lt;br /&gt;這樣在你安裝完以後，該東西才會存在。&lt;br /&gt;接著還有另一段奇怪的command：in-target，&lt;br /&gt;『in-target』，簡單的說就是chroot /target而已，&lt;br /&gt;你也可以用chroot /target去取代『in-target』。&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;####### Localization #######&lt;br /&gt;d-i debian-installer/locale string en_US&lt;br /&gt;d-i debian-installer/language string en&lt;br /&gt;d-i debian-installer/country string US&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;####### Keyboard selection #######&lt;br /&gt;d-i console-setup/ask_detect boolean false&lt;br /&gt;d-i console-setup/layoutcode string us&lt;br /&gt;d-i console-setup/modelcode string pc105&lt;br /&gt;d-i kbd-chooser/method string us&lt;br /&gt;d-i keyboard-configuration/layout string USA&lt;br /&gt;d-i keyboard-configuration/variant string USA&lt;br /&gt;&lt;br /&gt;####### Network configuration #######&lt;br /&gt;#d-i netcfg/choose_interface select auto&lt;br /&gt;d-i netcfg/choose_interface select eth0&lt;br /&gt;d-i netcfg/get_hostname string ubuntu&lt;br /&gt;d-i netcfg/get_domain string&lt;br /&gt;# configure the network manually&lt;br /&gt;#d-i netcfg/disable_autoconfig boolean true&lt;br /&gt;# configure the network automatically&lt;br /&gt;d-i netcfg/get_nameservers string 8.8.8.8&lt;br /&gt;d-i netcfg/get_ipaddress string 172.16.131.138&lt;br /&gt;d-i netcfg/get_netmask string 255.255.255.0&lt;br /&gt;d-i netcfg/get_gateway string 172.16.131.2&lt;br /&gt;d-i netcfg/confirm_static boolean true&lt;br /&gt;&lt;br /&gt;####### Apt setup #######&lt;br /&gt;d-i apt-setup/security-updates boolean false&lt;br /&gt;d-i apt-setup/restricted boolean false&lt;br /&gt;d-i apt-setup/universe boolean false&lt;br /&gt;d-i apt-setup/backports boolean false&lt;br /&gt;d-i apt-setup/security boolean false&lt;br /&gt;d-i mirror/http/proxy string&lt;br /&gt;&lt;br /&gt;####### Base system installation #######&lt;br /&gt;d-i debian-installer/splash boolean false&lt;br /&gt;d-i base-installer/install-recommends boolean true&lt;br /&gt;d-i base-installer/kernel/altmeta string lts-saucy&lt;br /&gt;&lt;br /&gt;####### Clock and time zone setup #######&lt;br /&gt;d-i clock-setup/utc boolean true&lt;br /&gt;d-i clock-setup/utc-auto boolean true&lt;br /&gt;d-i time/zone string UTC&lt;br /&gt;&lt;br /&gt;####### Boot loader installation #######&lt;br /&gt;d-i finish-install/reboot_in_progress note&lt;br /&gt;d-i grub-installer/only_debian boolean true&lt;br /&gt;d-i grub-installer/with_other_os boolean true&lt;br /&gt;&lt;br /&gt;####### Partitioning using LVM #######&lt;br /&gt;d-i partman-auto-lvm/guided_size string max&lt;br /&gt;d-i partman-auto/choose_recipe select atomic&lt;br /&gt;d-i partman-auto/method string lvm&lt;br /&gt;d-i partman-lvm/confirm boolean true&lt;br /&gt;d-i partman-lvm/confirm boolean true&lt;br /&gt;d-i partman-lvm/confirm_nooverwrite boolean true&lt;br /&gt;d-i partman-lvm/device_remove_lvm boolean true&lt;br /&gt;d-i partman/choose_partition select finish&lt;br /&gt;d-i partman/confirm boolean true&lt;br /&gt;d-i partman/confirm_nooverwrite boolean true&lt;br /&gt;d-i partman/confirm_write_new_label boolean true&lt;br /&gt;&lt;br /&gt;####### User #######&lt;br /&gt;d-i passwd/root-login boolean true&lt;br /&gt;d-i passwd/root-password password 1234&lt;br /&gt;d-i passwd/root-password-again password 1234&lt;br /&gt;d-i user-setup/allow-password-weak boolean true&lt;br /&gt;# create user or not&lt;br /&gt;d-i passwd/make-user boolean false&lt;br /&gt;#d-i user-setup/encrypt-home boolean false&lt;br /&gt;#d-i passwd/user-fullname string ken&lt;br /&gt;#d-i passwd/username string ken&lt;br /&gt;#d-i passwd/user-password password 123456&lt;br /&gt;#d-i passwd/user-password-again password 123456&lt;br /&gt;&lt;br /&gt;####### Package selection #######&lt;br /&gt;d-i pkgsel/include string openssh-server vim&lt;br /&gt;d-i pkgsel/install-language-support boolean false&lt;br /&gt;d-i pkgsel/update-policy select none&lt;br /&gt;d-i pkgsel/upgrade select none&lt;br /&gt;&lt;br /&gt;tasksel tasksel/first multiselect standard, ubuntu-server&lt;br /&gt;&lt;br /&gt;####### Advance command #######&lt;br /&gt;d-i preseed/late_command string \&lt;br /&gt;cp /cdrom/preseed/setup-something.bash /target/tmp/setup-something.bash &amp;&amp; in-target chmod +x /tmp/setup-something.bash &amp;&amp; in-target /bin/bash /tmp/setup-something.bash&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Make an ISO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上面的步驟後，&lt;br /&gt;剩下最後一步就完成了，&lt;br /&gt;把剛剛copy出來的內容，在包成一個ISO就好了。&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkisofs -r -R -J -T -v -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -z -iso-level 4 -c isolinux/isolinux.cat -o custom.iso /mnt/iso&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;大概等個20秒以後，就會看到一個custom.iso，就代表你成功了！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2015/04/13/how-to-create-customized-ubuntu-iso</link>
                <guid>http://blog.kenyang.net/2015/04/13/how-to-create-customized-ubuntu-iso</guid>
                <pubDate>Mon, 13 Apr 2015 10:36:00 +0800</pubDate>
        </item>

        <item>
                <title>MogileFS: Distributed filesystem</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/mogilefs/&quot;&gt;MogileFS&lt;/a&gt;是分散式檔案系統(DFS)的一種，&lt;br /&gt;在MogileFS中，主要分成2個角色，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. tracker: 記錄有哪些storage&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. storage node: 單純放檔案的角色&lt;br /&gt;其實還有第三個角色，是tracker的DB，&lt;br /&gt;這db角色是用來存放storage在哪裡、有幾個storage等資訊，&lt;br /&gt;以及每個檔案類型要replicate幾份等等之類的資訊，&lt;br /&gt;不過我會把tracker&#39;s DB和tracker本身歸類在一起，&lt;br /&gt;因為它們兩個一定得在同檯機器上，而且缺一不可，&lt;br /&gt;但tracker和storage不一定要在同檯機器上面！&lt;br /&gt;&lt;br /&gt;如果說為什麼要用mogilefs的話，大概有以下2個原因吧，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. 自動作replicate&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. application level，不需要特別的kernel module（setup簡單)&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install mogilefs&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝mogilefs方式大概有三種，用cpan, apt, 拿source自己build，&lt;br /&gt;個人偏好用apt-get安裝，&lt;br /&gt;這裡選擇在ubuntu 14.04上安裝，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install python-software-properties&lt;br /&gt;add-apt-repository ppa:saz/mogilefs&lt;br /&gt;apt-get update&lt;br /&gt;apt-get install mogilefsd mogstored mogilefs-utils&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣就完成安裝，接下來要setup mogilefs,&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Setup mogilefs tracker&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;前面有說到有tracker就一定要有db，&lt;br /&gt;所以請先安裝好mysql，安裝好以後就執行下面的command，&lt;br /&gt;記得把password換成你想要使用的密碼！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mysql&gt; CREATE DATABASE mogilefs;&lt;br /&gt;mysql&gt; CREATE USER &#39;mogilefs&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;&lt;br /&gt;mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,ALTER ON mogilefs.* TO &#39;mogilefs&#39;@&#39;%&#39;;&lt;br /&gt;mysql&gt; flush privileges;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著要編輯/etc/mogilefs/mogilefsd.conf這個檔案，&lt;br /&gt;這個檔案，其實只有在tracker的角色上才需要去編輯，&lt;br /&gt;意思是說如果你有三檯機器，那麼只有其中一檯才需要去設定這個檔案！&lt;br /&gt;只要改下面兩個設定就好，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;db_pass = password&lt;br /&gt;listen = 10.0.0.172:7001&lt;br /&gt;&lt;/pre&gt;db_pass就是上一步驟你所輸入的密碼，&lt;br /&gt;listen就是這個tracker要listen在哪個ip以及哪一個port上面！&lt;br /&gt;&lt;br /&gt;接著使用下面的command進行db setup，&lt;br /&gt;一樣記得把password換成跟上面一樣的！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogdbsetup --dbhost=10.0.0.172:7001 --dbname=mogilefs --dbuser=mogilefs --dbpassword=password&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著編輯.mogilefs.conf，這檔案會記錄著你的tracker在哪裡，&lt;br /&gt;然後mogilefs會去問這tracker所有storage的資訊．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;trackers = 10.0.0.172:7001&quot; &gt; ~/.mogilefs.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Setup mogilefs storage node&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;tracker的目的在於記錄著有哪些storage可以用，&lt;br /&gt;所以在完成setup tracker以後，接著就要來setup storage，&lt;br /&gt;首先，先增加一個store host，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm --trackers=10.0.0.172:7001 host add store1 --ip=10.0.0.172 --status=alive&lt;br /&gt;&lt;/pre&gt;--trackers：指定加在哪個tracker上&lt;br /&gt;store1：是你的host name，&lt;br /&gt;--ip：就是那一顆storage在哪裡&lt;br /&gt;&lt;br /&gt;那麼有了host以後，&lt;br /&gt;就要有device，一個host裡面可以有很多個device，&lt;br /&gt;可以把device想像成local disk、NFS...etc.&lt;br /&gt;所以接著要告訴host有哪些device，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm --trackers=10.0.0.172:7001 device add store1 1 --status=alive&lt;br /&gt;&lt;/pre&gt;比較特別參數是“1”，&lt;br /&gt;1的意思是device 1，&lt;br /&gt;&lt;br /&gt;再來還要增加一個domain，等等後面會說明這domain的用途&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm domain add ken-storage&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成增加一個device了，&lt;br /&gt;接著mogilefs store會去找那個device，&lt;br /&gt;所以接著要去create folder，之後檔案都會放在那folder裡面，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /var/mogdata/dev1&lt;br /&gt;chown mogstored /var/mogdata/dev1&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣storage也設定完成了，&lt;br /&gt;那麼該怎麼知道有設定成功？&lt;br /&gt;可以透過mogadm check指令去看，&lt;br /&gt;如果是成功的話，應該會看到下面的畫面，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@ip-10-0-0-172:~# mogadm check&lt;br /&gt;Checking trackers...&lt;br /&gt;  10.0.0.172:7001 ... OK&lt;br /&gt;&lt;br /&gt;Checking hosts...&lt;br /&gt;  [ 1] store1 ... OK&lt;br /&gt;&lt;br /&gt;Checking devices...&lt;br /&gt;  host device         size(G)    used(G)    free(G)   use%   ob state   I/O%&lt;br /&gt;  ---- ------------ ---------- ---------- ---------- ------ ---------- -----&lt;br /&gt;  [ 1] dev1             7.324      1.480      5.844  20.21%  writeable   N/A&lt;br /&gt;  ---- ------------ ---------- ---------- ---------- ------&lt;br /&gt;             total:     7.324      1.480      5.844  20.21%&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test using command line&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;測試之前，請先建立一個tmp file（hello.txt）&lt;br /&gt;上傳檔案，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogupload  --file=&quot;./hello.txt&quot; --domain=ken-storage --key=&quot;first-file&quot;&lt;br /&gt;&lt;/pre&gt;下載檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogfetch --key=&quot;first-file&quot; --file=&quot;./output-file&quot; --domain=ken-storage&lt;br /&gt;&lt;/pre&gt;刪除檔案&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogdelete --key=&quot;first-file&quot;  --domain=ken-storage&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Advance: Replication &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上面的基本操作以後，&lt;br /&gt;並沒有發揮mogilefs replicate的功能，&lt;br /&gt;那要做到replication也很簡單，&lt;br /&gt;記得上面我們有add domain嗎？&lt;br /&gt;domain其實有點難解釋，可以把它想像成像是AWS S3的bucket，&lt;br /&gt;而這bucket下有許多policy，&lt;br /&gt;所以我們現在就要替這這bucket(domain)加replicate的policy，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogadm class add ken-storage txt --mindevcount=2&lt;br /&gt;&lt;/pre&gt;這指令的意思是，當檔案的class是txt時，請replicate 2份！&lt;br /&gt;&lt;br /&gt;完成replication設定以後，&lt;br /&gt;因為前面的設定都只有一個device，&lt;br /&gt;只有一個deivce情況下，mogilefsd是不會進行replication的，&lt;br /&gt;所以我們得再增加一個device，&lt;br /&gt;建議你不要在同一檯機器上多增加一個device，畢竟沒有太大意義，&lt;br /&gt;你在同一檯機器上做replication....?&lt;br /&gt;如果這檯機器掛了，檔案就通通不見了，&lt;br /&gt;所以會建議你在第二檯機器上增加一個device，&lt;br /&gt;第二檯機器上就單純是storage node的角色了，&lt;br /&gt;所以只需要做下面設定，記得把ip換成第二檯的ip！（只要改10.0.0.199的部分）&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;trackers = 10.0.0.172:7001&quot; &gt; ~/.mogilefs.conf&lt;br /&gt;mogadm --trackers=10.0.0.172:7001 host add store2 --ip=10.0.0.199 --status=alive&lt;br /&gt;mogadm --trackers=10.0.0.172:7001 device add store2 2 --status=alive&lt;br /&gt;mkdir -p /var/mogdata/dev2&lt;br /&gt;chown mogstored /var/mogdata/dev2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Test Replication&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;其實跟第四步驟是一樣的，只是多一個參數--class，&lt;br /&gt;這class就和上一步驟所填寫的一樣即可．這樣hello.txt就會被複製到另外一檯機器上去！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mogupload  --file=&quot;./hello.txt&quot; --domain=ken-storage --key=&quot;first-file&quot; --class=txt&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;如果replication失敗，那麼在db裡面的table file_to_replication將會有那筆資料，&lt;br /&gt;你也可以透過/var/log/syslog看是什麼error message，&lt;br /&gt;我自己使用的mogilefs版本，就有遇到一個&lt;a href=&quot;http://www.php-oa.com/2013/11/01/mogilefs-job-replicate-died.html&quot;&gt;syscal module的版本問題&lt;/a&gt;，&lt;br /&gt;透過&lt;a href=&quot;http://www.php-oa.com/2013/11/01/mogilefs-job-replicate-died.html&quot;&gt;連結&lt;/a&gt;的中的方法去解決的！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Advance: Integrate it with application &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;當然有了mogilefs以後，不可能都透過command line去操作呀，&lt;br /&gt;如果我想要整合在我的application裡怎麼辦？&lt;br /&gt;其實也很簡單，看你用什麼language，至少我用的language(java, python)都有相關的lib可以使用，&lt;br /&gt;這裡使用pyhton來作為說明，&lt;br /&gt;用&lt;a href=&quot;https://github.com/AloneRoad/pymogile&quot;&gt;pymogile&lt;/a&gt;來作為操作mogile的lib，&lt;br /&gt;安裝pymogile，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;git clone https://github.com/AloneRoad/pymogile.git&lt;br /&gt;cd pymogile/&lt;br /&gt;python setup.py install&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;下面是一個簡單的example用pymogile操作mogilefs，&lt;br /&gt;&lt;pre class=&quot;brush: python&quot;&gt;from pymogile import Client, MogileFSError&lt;br /&gt;&lt;br /&gt;datastore = Client(domain=&#39;ken-storage&#39;, trackers=[&#39;10.0.0.172:7001&#39;])&lt;br /&gt;key_id=&#39;replicate&#39;&lt;br /&gt;&lt;br /&gt;def upload_file():&lt;br /&gt;    fp = datastore.new_file(key_id)&lt;br /&gt;    fp.write(&#39;test&#39;)&lt;br /&gt;    fp.close()&lt;br /&gt;&lt;br /&gt;def get_path():&lt;br /&gt;    print datastore.get_paths(key_id)&lt;br /&gt;&lt;br /&gt;def get_data():&lt;br /&gt;    print datastore.get_file_data(key_id)&lt;br /&gt;&lt;br /&gt;upload_file()&lt;br /&gt;get_path()&lt;br /&gt;get_data()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/11/24/mogilefs-distributed-filesystem</link>
                <guid>http://blog.kenyang.net/2014/11/24/mogilefs-distributed-filesystem</guid>
                <pubDate>Mon, 24 Nov 2014 10:37:00 +0800</pubDate>
        </item>

        <item>
                <title>Create local package repository on Ubuntu</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;先前有講過&lt;a href=&quot;http://blog.kenyang.net/2014/09/how-to-build-your-own-debian-package.html&quot;&gt;如何建立自己的debian package&lt;/a&gt;，&lt;br /&gt;這裡要講怎麼建立一個local的repository，&lt;br /&gt;讓這repository可以在internet上供人使用．&lt;br /&gt;其實這概念跟apt-mirror有點像，只不過deb source是來自於自己罷了．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Create your debian package&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這一步驟就去參考&lt;a href=&quot;http://blog.kenyang.net/2014/09/how-to-build-your-own-debian-package.html&quot;&gt;這篇文章吧&lt;/a&gt;，&lt;br /&gt;當然你也可以用ubuntu既有的debian package．（只不過我覺得那不如就用apt-mirror就好）&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Install apache&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;既然你要成為一個repository server，&lt;br /&gt;那麼就要安裝web server，這裡就選apache吧．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install apache2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Setup&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;先create一個folder在apache default目錄下（ex: /var/www)，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mkdir -p /var/www/debian&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;把你要給人使用的debian package搬到上面建立的目錄下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;mv *.deb /var/www/debian&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就替你的debian package建立index，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cd /var/www&lt;br /&gt;dpkg-scanpackages debian /dev/null | gzip -9c &gt; debian/Packages.gz&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這樣就完成了！&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就把你的repo加到list裡面去吧，如果要給別人用，或者在別檯機器上用，&lt;br /&gt;記得把127.0.0.1換成public ip．&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;echo &quot;deb http://127.0.0.1 debian/&quot; &gt;&gt; /etc/apt/sources.list&lt;br /&gt;apt-update&lt;br /&gt;apt-install your-deb-package&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/10/23/create-local-package-repository-on</link>
                <guid>http://blog.kenyang.net/2014/10/23/create-local-package-repository-on</guid>
                <pubDate>Thu, 23 Oct 2014 17:14:00 +0800</pubDate>
        </item>

        <item>
                <title>Android In-app billing (IAB) version 3</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;這篇要講怎麼整合IAB，&lt;br /&gt;IAB就是讓user可以在你的app中購買商品．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Download billing service library&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;開啓Android SDK Manager，&lt;br /&gt;找到最下面的 Extras，安裝Google Play Billing Library，&lt;br /&gt;安裝完以後，在您Android SDK 目錄中會有該 Library，位置如下：&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;$SDK_PATH/extras/google/play_billing/in-app-billing-v03&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Create new package&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著在這一步要在你的project下建立一個新的package，&lt;br /&gt;點選 File &amp;gt; New &amp;gt; Package, 名稱為com.android.vending.billing&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Copy necessary files&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;在這一步驟要複製一些必要的檔案至project中，&lt;br /&gt;1. IInAppBillingService.aidl，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;這個檔案放在$SDK_PATH/extras/google/play_billing/in-app-billing-v03底下，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;把IInAppBillingService.aidl，複製到我們剛剛create的package中，&lt;br /&gt;2. *.java&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Google幫我們寫好了很多的wrapper，可以很方便地使用IAB，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;這wrapper會幫我們處理一些bind service的動作，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;透過這些wrapper可以輕易地整合IAB，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;檔案路徑如下：&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;$SDK_PATH/extras/google/play_billing/samples/TrivialDrive/src/com/example/android&lt;br /&gt;/trivialdrivesample/util&lt;br /&gt;&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;把這底下所有的.java複製到你的project當中，並且要把package名稱改成自己的&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Add permission&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著要在AndroidManifest.xml中加入下面這個權限，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;com.android.vending.BILLING&amp;quot;&amp;gt;&lt;br /&gt;&amp;lt;/uses-permission&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Upload apk&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;因為要購買一個商品，這商品在新増之前，&lt;br /&gt;你一定要有一個apk是有BILLING權限的，&lt;br /&gt;否則是不能新增一個商品．&lt;br /&gt;所以在這步驟要先上傳上去，你可以上傳以後再把它變成draft就好，&lt;br /&gt;當然！你也可以通通寫完code再丟上去測試．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Add product&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;上傳apk以後，接著就可以去developer console新增product了，&lt;br /&gt;1. 先到自己的developer console &lt;br /&gt;2. 點選自己的app &lt;br /&gt;3. 點選左邊的In-app Products &lt;br /&gt;4. 點選Add new product&lt;br /&gt;5. 輸入Product ID（這id等等code裡面會用到）&lt;br /&gt;6. 最後填寫product的資訊&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Get public key&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;由於在跟Google Play溝通時，&lt;br /&gt;需要一把public key，&lt;br /&gt;這把key一樣在developer console上，&lt;br /&gt;1. 先到自己的developer console &lt;br /&gt;2. 點選自己的app &lt;br /&gt;3. 點選左邊的Services &amp;amp; APIs&lt;br /&gt;key就會在畫面之中，如下圖！&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-juHaFVdxJtE/VD9hQRnFPSI/AAAAAAAAFhI/8k_Ou03qUOU/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B2.08.36%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-juHaFVdxJtE/VD9hQRnFPSI/AAAAAAAAFhI/8k_Ou03qUOU/s1600/Screen%2BShot%2B2014-10-16%2Bat%2B2.08.36%2BPM.png&quot; height=&quot;164&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8. Implement&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-1. Setup&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;首先要先setup IabHelper，&lt;br /&gt;在setup時就要把剛剛哪組public_key帶進去，&lt;br /&gt;但由於Google有強烈的建議，不要直接hard code public key，&lt;br /&gt;至少要用個xor encrypt的方式，或者用拆解字串的方式存放public key，&lt;br /&gt;xor encrypt就是你先用xor去encrypt你的public key，&lt;br /&gt;之後把encrypt過後的public key放在你的project中，&lt;br /&gt;要用的時候再拿出來decrypt，decrypt完以後，應該就會是原先的public key了，&lt;br /&gt;接著再判斷一下那組public key是否有包含“某部份”真正public key，&lt;br /&gt;有的話才真的是你的public key，&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    private IabHelper mHelper;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate(Bundle savedInstanceState) {&lt;br /&gt;&lt;br /&gt;        String base64EncodedPublicKey = xorDecrypt(PUBLIC_KEY, &quot;key_password&quot;);&lt;br /&gt;&lt;br /&gt;        if (!base64EncodedPublicKey&lt;br /&gt;                .contains(&quot;eFESRE6ijsRAp3TgWhY1zDwWwo1EqxQgt+f&quot;)) {&lt;br /&gt;            throw new RuntimeException(&quot;This is not my key&quot;);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        mHelper = new IabHelper(this, base64EncodedPublicKey);&lt;br /&gt;&lt;br /&gt;        mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {&lt;br /&gt;            public void onIabSetupFinished(IabResult result) {&lt;br /&gt;                Log.d(TAG, &quot;Setup finished.&quot;);&lt;br /&gt;                if (!result.isSuccess()) {&lt;br /&gt;                    Log.d(TAG, &quot;Problem setting up In-app Billing: &quot; + result);&lt;br /&gt;                }&lt;br /&gt;&lt;br /&gt;                if (mHelper == null)&lt;br /&gt;                    return;&lt;br /&gt;                &lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static String xorDecrypt(String input, String key) {&lt;br /&gt;        byte[] inputBytes = Base64.decode(input, Base64.DEFAULT);&lt;br /&gt;        int inputSize = inputBytes.length;&lt;br /&gt;&lt;br /&gt;        byte[] keyBytes = key.getBytes();&lt;br /&gt;        int keySize = keyBytes.length - 1;&lt;br /&gt;&lt;br /&gt;        byte[] outBytes = new byte[inputSize];&lt;br /&gt;        for (int i = 0; i &amp;lt; inputSize; i++) {&lt;br /&gt;            outBytes[i] = (byte) (inputBytes[i] ^ keyBytes[i % keySize]);&lt;br /&gt;        }&lt;br /&gt;        return new String(outBytes);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-2 購買商品&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;購買商品要透過launchPurchaseFlow， &lt;br /&gt;launchPurchaseFlow有五個參數， &lt;br /&gt;1. activity &lt;br /&gt;2. product id，就是剛剛上面在developer console新增的那組 &lt;br /&gt;3. request code，onActivityResult時會回傳回來 &lt;br /&gt;4. listener，購買狀態的listener，用來接收購買成功與否 &lt;br /&gt;5. string，可以是空的，可以想像成是補充說明的意思，一樣在購買之後會回傳回來 &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    if (mHelper != null) {&lt;br /&gt;        mHelper.launchPurchaseFlow(this,&lt;br /&gt;                SKU_PREMIUM,&lt;br /&gt;                10001,&lt;br /&gt;                mPurchaseFinishedListener,&lt;br /&gt;                &quot;bGoa+V7g/yqDXvKRqq+JTFn4uQZbPiQJo4pf9RzJ&quot;);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener = new IabHelper.OnIabPurchaseFinishedListener() {&lt;br /&gt;        public void onIabPurchaseFinished(IabResult result, Purchase purchase) {&lt;br /&gt;            if (result.isFailure()) {&lt;br /&gt;                Log.e(TAG, &quot;Error purchasing: &quot; + result);&lt;br /&gt;                return;&lt;br /&gt;            } else if (purchase.getSku().equals(SKU_PREMIUM)) {&lt;br /&gt;                Toast.makeText(getApplicationContext(), &quot;buy success&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                Log.d(TAG, &quot;Success purchasing:&quot;);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    };&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-3 查詢是否有購買&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;在購買成功以後，android會把購買的結果cache在機器上， &lt;br /&gt;以便快速地查詢， 查詢要透過queryInventoryAsync， &lt;br /&gt;queryInventoryAsync有二個參數， &lt;br /&gt;1. 是否要query product detail（ex: price） &lt;br /&gt;2. listener  &lt;br /&gt;其實第一個參數不一定要， &lt;br /&gt;但是當你在沒有網路的情況下， 你的request一定都會是fail， &lt;br /&gt;以至於你無法判斷這個user是否有購買了商品，&lt;br /&gt;且如果你加了第一個參數，你就無法得到商品的detail資訊． &lt;br /&gt;所以使用者要自己衡量一下何時該用．  &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    mHelper.queryInventoryAsync(false,mGotInventoryListener);&lt;br /&gt;    QueryInventoryFinishedListener mGotInventoryListener = new QueryInventoryFinishedListener() {&lt;br /&gt;        public void onQueryInventoryFinished(IabResult result, Inventory inventory) {&lt;br /&gt;&lt;br /&gt;            if (result.isFailure()) {&lt;br /&gt;                // handle error here&lt;br /&gt;            } else {&lt;br /&gt;                // does the user have the premium upgrade?&lt;br /&gt;                boolean mIsPremium = inventory.hasPurchase(SKU_PREMIUM);&lt;br /&gt;                if (mIsPremium) {&lt;br /&gt;                    Toast.makeText(getApplicationContext(), &quot;buy&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                }else {&lt;br /&gt;                    Toast.makeText(getApplicationContext(), &quot;no buy&quot;,Toast.LENGTH_LONG).show();&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    };&lt;br /&gt;&lt;/pre&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8-4 Error handling&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;最後一步驟，如果你launchPurchaseFlow了第一次，然後取消！ &lt;br /&gt;隨即馬上launchPurchaseFlow第二次，絕對會crash， &lt;br /&gt;原因是因為在onActivityResult中要做點處理， &lt;br /&gt;我覺得這很tricky，因為在官網上並沒有提到！ &lt;br /&gt;是去看他的example code才發現的！ &lt;br /&gt;最後也要記得destroy這個helper．  &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;    @Override&lt;br /&gt;    protected void onActivityResult(int requestCode, int resultCode, Intent data) {&lt;br /&gt;        Log.d(TAG, &quot;onActivityResult handled by IABUtil.1&quot;);&lt;br /&gt;        // Pass on the activity result to the helper for handling&lt;br /&gt;        if (mHelper!=null &amp;amp;&amp;amp; !mHelper.handleActivityResult(requestCode, resultCode, data)) {&lt;br /&gt;            Log.d(TAG, &quot;onActivityResult handled by IABUtil.2&quot;);&lt;br /&gt;            // not handled, so handle it ourselves (here&#39;s where you&#39;d&lt;br /&gt;            // perform any handling of activity results not related to in-app&lt;br /&gt;            // billing...&lt;br /&gt;            super.onActivityResult(requestCode, resultCode, data);&lt;br /&gt;        } else {&lt;br /&gt;            Log.d(TAG, &quot;onActivityResult handled by IABUtil.&quot;);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onDestroy() {&lt;br /&gt;        super.onDestroy();&lt;br /&gt;        if (adView != null) {&lt;br /&gt;            adView.destroy();&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        if (mHelper != null)&lt;br /&gt;            mHelper.dispose();&lt;br /&gt;        mHelper = null;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;9. Test&lt;/span&gt;   &lt;br /&gt;&lt;br /&gt;要測試IBA真的是件麻煩的事情， &lt;br /&gt;要做兩件事， &lt;br /&gt;1. create test account &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因為你用自己的developer account測，會永遠無法購買， &#39;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;會跟你說publisher cannot purchase this item. &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以要去到developer console中的setting裡面加一組test account， &lt;br /&gt;2. Export Signed Application &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因為你無法用debug key去build app， &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用debug key build出來的app是無法測試的... &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以得用production key sign出來的app才可以測試． &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;接著再把sign好的apk裝在手機上就可以測試了！         &lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/10/16/android-in-app-billing-iab-version-3</link>
                <guid>http://blog.kenyang.net/2014/10/16/android-in-app-billing-iab-version-3</guid>
                <pubDate>Thu, 16 Oct 2014 16:19:00 +0800</pubDate>
        </item>

        <item>
                <title>Android Backup service API  (backup internal database)</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;這篇要講Android自己的&lt;a href=&quot;http://developer.android.com/training/cloudsync/backupapi.html&quot;&gt;backup service&lt;/a&gt;，&lt;br /&gt;其實使用起來蠻簡單的，&lt;br /&gt;主要分成下面4個步驟，&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Register for Android Backup Service&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;首先要先去註冊一個API Key，先到這個&lt;a href=&quot;https://developer.android.com/google/backup/signup.html?csw=1&quot;&gt;網站&lt;/a&gt;，&lt;br /&gt;進去以後輸入你的package name，接著就會給你一組API key．&lt;br /&gt;這樣就註冊完成．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Configuration&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;完成上面的註冊以後，接著要對你的project做configuration，&lt;br /&gt;先開啟你的AndroidManifest.xml，&lt;br /&gt;先在application element加上一個android:backupAgent這個attribute，&lt;br /&gt;這個attribute的名字，就是待會你新增的class名稱，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;application android:label=&amp;quot;MyApp&amp;quot;&lt;br /&gt;             android:backupAgent=&amp;quot;ExpenseBackupAgent&amp;quot;&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著在application之中，加入下段的meta data，&lt;br /&gt;記得把xxxxxxxxxx換成你剛剛註冊的API Key，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;&amp;lt;meta-data android:name=&amp;quot;com.google.android.backup.api_key&amp;quot;&lt;br /&gt;android:value=&amp;quot;xxxxxxxxxxxxxxxxxxx&amp;quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Backup internal database&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;接著新增一個Class，這個Class要繼承BackupAgentHelper，&lt;br /&gt;記得這Class名稱要跟你manifest.xml中的一樣！&lt;br /&gt;這裡要題外話一下，其實你也可以繼承BackupAgent，&lt;br /&gt;當你如果需要做到更複雜的backup時，&lt;br /&gt;例如你不想backup整份file，你只想backup某個&quot;部分&quot;的data，&lt;br /&gt;這時候你只能透過BackupAgent去做到，&lt;br /&gt;而BackupAgentHelper其實也只是BackupAgent的一個wrapper，&lt;br /&gt;讓你更輕易的backup和restore罷了．&lt;br /&gt;回到主題，先新增一個class繼承BackupAgentHelper，內容如下，&lt;br /&gt;在onCreate裡面用到了FileBackupHelper，&lt;br /&gt;最原始的FileBackupHelper是真的用來backup某個file，&lt;br /&gt;但因為我們這裡要backup db，&lt;br /&gt;所以我們要override掉getFilesDir，&lt;br /&gt;在getFilesDir中去拿db的路徑，&lt;br /&gt;然後透過FileBackupHelper去做backup！&lt;br /&gt;只要透過下面的code就可以幫你自動backup和restore了！&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class ExpenseBackupAgent extends BackupAgentHelper {&lt;br /&gt;    private static final String DB_NAME = &quot;expense&quot;; // db名稱&lt;br /&gt;    private static final String TAG = ExpenseBackupAgent.class&lt;br /&gt;            .getCanonicalName();&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onCreate() {&lt;br /&gt;        Log.e(TAG, &quot;backu db&quot;);&lt;br /&gt;        FileBackupHelper dbs = new FileBackupHelper(this, DB_NAME);&lt;br /&gt;        addHelper(&quot;dbs&quot;, dbs);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public File getFilesDir() {&lt;br /&gt;        final File f = getDatabasePath(DB_NAME);&lt;br /&gt;        return f.getParentFile();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;雖然說backup和restore都是自動的，&lt;br /&gt;那麼要怎麼主動的去request backup？&lt;br /&gt;那就要用BackupManager了，&lt;br /&gt;透過dataChanged，會去幫你queue這個backup的job，&lt;br /&gt;為什麼是說queue呢？因為backup不會馬上執行的！&lt;br /&gt;都是批次的執行！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;BackupManager bm = new BackupManager(this);&lt;br /&gt;bm.dataChanged();&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Test&lt;/span&gt;  &lt;br /&gt;&lt;br /&gt;上面說到了Backup都是批次執行，不是即時的，那我該怎測試呢？&lt;br /&gt;要透過adb了，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;adb shell bmgr backup packagename  # 等於dataChanged&lt;br /&gt;adb shell bmgr run                 # 立即去trigger backup job&lt;br /&gt;adb uninstall packagename          # 先刪掉app&lt;br /&gt;&lt;/pre&gt;最後再安裝一次你的app，&lt;br /&gt;打開以後應該會發現你的資料都還在！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/10/13/android-backup-service-api-backup</link>
                <guid>http://blog.kenyang.net/2014/10/13/android-backup-service-api-backup</guid>
                <pubDate>Mon, 13 Oct 2014 11:22:00 +0800</pubDate>
        </item>

        <item>
                <title>Set up javadocs and source for 3rd-party libs</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;br /&gt;正常的一個3rd-party lib應該會有3個jar，以greenDao為例，&lt;br /&gt;&amp;nbsp; &amp;nbsp; 1. greendao-1.3.7.jar&lt;br /&gt;&amp;nbsp; &amp;nbsp; 2. greendao-1.3.7-javadoc.jar&lt;br /&gt;&amp;nbsp; &amp;nbsp; 3. greendao-1.3.7-sources.jar&lt;br /&gt;&lt;br /&gt;一般而言，其實只要在libs資料夾放第一個，我們就可以正常使用greenDao了，&lt;br /&gt;但是你就會看不到任何的document，大概會看到下面的圖示！&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-fvtNRCyhOpc/VCvUN2hg6UI/AAAAAAAAFS0/H5XFWTUx3D0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B6.15.09%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-fvtNRCyhOpc/VCvUN2hg6UI/AAAAAAAAFS0/H5XFWTUx3D0/s1600/Screen%2BShot%2B2014-10-01%2Bat%2B6.15.09%2BPM.png&quot; height=&quot;112&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;但就算你把這3個jar通通放進去libs資料夾，你也看不到任何的document.&lt;br /&gt;原因是因為你要有一個greendao-1.3.7.jar.properties檔案去config路徑.&lt;br /&gt;&lt;br /&gt;我的習慣會在libs資料夾底下，在建立兩個資料夾，分別為&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;1. libs/docs&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;2. libs/src&lt;br /&gt;然後把對應的jar放在裡面，&lt;br /&gt;所以我的greendao-1.3.7.jar.properties就會跟下面一樣，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;src=src/greendao-1.3.7-sources.jar                                                                             &lt;br /&gt;doc=docs/greendao-1.3.7-javadoc.jar&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;最後再把project close，然後再open起來，&lt;br /&gt;應該就會看到document了！&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2014/10/01/android-set-up-javadocs-and-source-for</link>
                <guid>http://blog.kenyang.net/2014/10/01/android-set-up-javadocs-and-source-for</guid>
                <pubDate>Wed, 01 Oct 2014 18:17:00 +0800</pubDate>
        </item>

        <item>
                <title>Android ORM lib: greeDao</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt;應該不用多做解釋了，&lt;br /&gt;而Android自己本身並沒有ORM的任何lib可用，&lt;br /&gt;但有很多熱心的人做了third-party lib，像是&lt;a href=&quot;http://ormlite.com/&quot;&gt;OrmLite&lt;/a&gt;、&lt;a href=&quot;http://greendao-orm.com/&quot;&gt;greenDao&lt;/a&gt;，&lt;br /&gt;本篇要講的是greenDao，&lt;br /&gt;為什麼我使用greenDao呢？&lt;br /&gt;其實網路上不少人在做OrmLite和greenDao的&lt;a href=&quot;https://github.com/littleinc/android-orm-benchmark&quot;&gt;benchmark&lt;/a&gt;，&lt;br /&gt;greenDao的performance真是一片倒，&lt;br /&gt;也因此我選擇了greenDao，&lt;br /&gt;不過說實在的，greenDao一開始的前置作業真是有點麻煩！&lt;br /&gt;所以特地寫一篇來記錄！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Clone the repository&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;先把greenDao的repository clone下來，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;git clone https://github.com/greenrobot/greenDAO.git&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Download jar&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這就是我說的，前置作業很麻煩！&lt;br /&gt;有3個必要的jar檔，竟然沒有在repository中！&lt;br /&gt;要自行去下載！不過用gradle和marven就不用自行去下載，&lt;br /&gt;anyway我用的是eclipse，所以得去下載！&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. &lt;a href=&quot;http://mvnrepository.com/artifact/org.freemarker/freemarker/2.3.20&quot;&gt;freemaker.jar&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao-generator%22&quot;&gt;greendao-generator-1.3.0&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22de.greenrobot%22%20AND%20a%3A%22greendao%22&quot;&gt;greendao-1.3.7.jar&lt;/a&gt;&lt;br /&gt;前面兩個jar是為了build出dao而用的，&lt;br /&gt;而後面第三個jar給我們app使用的！&lt;br /&gt;在開始之前，先說明一下整體流程，&lt;br /&gt;大致上分為兩個步驟，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. 產生 DAO files&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. 把DAO files 加到自己的android project中&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Generate DAO files&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;還記得第一步驟clone下來的repository嗎？&lt;br /&gt;repository中有很多份中有很多個project，&lt;br /&gt;我們只會用到DaoExampleGenerator，&lt;br /&gt;首先先開啟你的eclipse，&lt;br /&gt;點選【File】-&gt;【Import】-&gt;【General】-&gt;【Existing Projects into Workspace】-&gt;選擇【DaoExampleGenerator】project&lt;br /&gt;import進來以後應該會很多error，&lt;br /&gt;因為少了2個jar檔，就把【freemaker.jar】和【greendao-generator-1.3.0】import進來吧！&lt;br /&gt;&lt;br /&gt;接著打開ExampleDaoGenerator這個class，&lt;br /&gt;這隻java會幫你generate出4個files，&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. DaoMaster&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. DaoSession&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. Model&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. ModelDao&lt;br /&gt;DAO就是用來負責db的一切操作, create table, insert, delete, query...etc.&lt;br /&gt;model就單純是一個object而已！&lt;br /&gt;這四個files都要加到我們的android project之中，&lt;br /&gt;&lt;br /&gt;接著來說明一下ExampleDaoGenerator裡面在做什麼，(我把原本的code改成我的sample了)&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public static void main(String[] args) throws Exception {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 第一個參數是db的版本，第二個是package名稱&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Schema schema = new Schema(1, &quot;net.kenyang.dao&quot;); &lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addNote(schema);&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 產生上述說明的files&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new DaoGenerator().generateAll(schema, &quot;../&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private static void addNote(Schema schema) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 這裡可以想像就是增加一個table，有三個欄位，且都是not null&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Entity note = schema.addEntity(&quot;Note&quot;);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note.addIdProperty();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note.addStringProperty(&quot;title&quot;).notNull();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note.addDateProperty(&quot;date&quot;).notNull();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note.addIntProperty(&quot;category&quot;).notNull();&lt;br /&gt;        &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著只要按下run以後，這些files就會被產生出來！&lt;br /&gt;接著就把這些files搬移到你的android project當中，&lt;br /&gt;請注意！！由於我們上面的schema是&quot;net.kenyang.dao&quot;，&lt;br /&gt;那麼你的android project中也要有這個package，並且把這些files放置在該package當中！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Insert, select, delete&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上面的前置作業以後，在開始之前，&lt;br /&gt;請記得把第二步驟下載的greendao-1.3.7.jar加到android project中，&lt;br /&gt;接著就可以開始使用了！&lt;br /&gt;&lt;br /&gt;insert&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;DevOpenHelper helper = new DevOpenHelper(this, &quot;expense&quot;, null);&lt;br /&gt;DaoMaster daoMaster = new DaoMaster(helper.getWritableDatabase());&lt;br /&gt;DaoSession daoSession = daoMaster.newSession();&lt;br /&gt;&lt;br /&gt;NoteDao noteDao = session.getNoteDao();&lt;br /&gt;Note note = new Note(null, &quot;hello&quot;, new Date(), 0);&lt;br /&gt;noteDao.insert(note);&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;select&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;QueryBuilder&amp;lt;Note&amp;gt; query = noteDao.queryBuilder();&lt;br /&gt;// 查詢如果日期小於今天，並且照日期排序&lt;br /&gt;query.where(Properties.Date.le(calendar.getTime())).orderDesc(Properties.Date);&lt;br /&gt;for (Note n : query.list()) {&lt;br /&gt;     Log.e(&quot;ken&quot;, n.getTitle());       &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;update&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public void fnUpdate(long id) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Note note = noteDao.load(id);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;note.setTitle(&quot;change title&quot;);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;noteDao.update(note);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;delete &lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public void fnDelete(long id) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;noteDao.deleteByKey(id);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;比原本的SQLiteOpenHelper好用太多了啊！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/09/24/android-orm-lib-greedao</link>
                <guid>http://blog.kenyang.net/2014/09/24/android-orm-lib-greedao</guid>
                <pubDate>Wed, 24 Sep 2014 10:04:00 +0800</pubDate>
        </item>

        <item>
                <title>How to build your own debian package?</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;其實不久前有寫一篇講怎麼&lt;a href=&quot;http://blog.kenyang.net/2014/03/build-deb-package-from-source.html&quot;&gt;build deb package&lt;/a&gt;，&lt;br /&gt;不過那篇的code source並不是來自於自己的source，&lt;br /&gt;那麼假設你今天自己有一個web，你想把這web打包成一個deb供人安裝，那該怎麼做呢？&lt;br /&gt;這篇主要就是講怎麼create一個自己的deb package．&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install necessary package&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;sudo apt-get install dh-make&lt;br /&gt;&lt;/pre&gt;dh-make是用來準備debian package所需要的files，&lt;br /&gt;等等會用來gen template files．&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Prepare environment&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這裡先create一個folder，名稱為www，&lt;br /&gt;www底下也要create一些web所需的資料夾和檔案，像是images, css ,js...etc&lt;br /&gt;www的目錄結構大概就長這樣，&lt;br /&gt;&lt;br /&gt;www&lt;br /&gt;├── css&lt;br /&gt;│   └── main.css&lt;br /&gt;├── images&lt;br /&gt;│   └── a.png&lt;br /&gt;└── static&lt;br /&gt;└── index.html&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;我們要把folder底下的東西都打包進去debian package，&lt;br /&gt;並且讓其他人在安裝這個debian package時，可以安裝到我們所指定的path底下！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Generate template files&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;在這步要用前面安裝的dh_make來generate出debian package所需要的template files,&lt;br /&gt;在generate之前，先設定一個環境變數，&lt;br /&gt;這環境變數是用來記錄這個debian package的作者是誰&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;export DEBFULLNAME=&quot;Ken Yang&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;dh_make --single --packagename ken-sdk_0.1 --native -e xxxx@gmail.com&lt;br /&gt;&lt;/pre&gt;--packagename要注意一下，&lt;br /&gt;--packagename分為兩個部分，&lt;br /&gt;前面的部分ken-sdk是package name，&lt;br /&gt;package name只能用-來分隔，不能用底線！&lt;br /&gt;而後面的_0.1是version number，&lt;br /&gt;--natvie，意思是這個debian不是從一個既有的tarball gen出來的！&lt;br /&gt;&lt;br /&gt;generate完成以後，你會發現在www folder底下多了一個debian folder，&lt;br /&gt;這debian folder裡面是放一些build debian package所需要的template files，&lt;br /&gt;而既然是template files，那麼就有一些不需要的file或者需要被修改的file，&lt;br /&gt;首先先刪除不需要的file吧！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;sudo rm debian/*.ex debian/*.EX&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就來修改這個template，&lt;br /&gt;首先要先改control這file，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim debian/control&lt;br /&gt;&lt;/pre&gt;打開以後，會看到很多information，&lt;br /&gt;你比較需要改的大概就只有Depends (dependency)，和Description了！&lt;br /&gt;改完儲存以後即可！&lt;br /&gt;&lt;br /&gt;接下來要改copyright，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim debian/copyright&lt;br /&gt;&lt;/pre&gt;打開以後，大概就只有年份和作者名稱要改而已！&lt;br /&gt;&lt;br /&gt;剩下其他的file，像是README, docs就看你要不要改了，&lt;br /&gt;記得rules千萬別改！rules是build package的起頭！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Build debian package&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;在完成template的修改，準備開始build之前，&lt;br /&gt;我們還有最後一個步驟，就是要指定哪些files or folder是你要放進去這個debian package的！&lt;br /&gt;而就是靠一個檔案去記錄！&lt;br /&gt;這個檔案名稱很重要，要跟你前面的package name一模一樣，&lt;br /&gt;我們前面的package name是ken-sdk，&lt;br /&gt;所以這個file要叫做ken-sdk.install，&lt;br /&gt;裡面的格式就像下面一樣，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;images/* /opt/www/image&lt;br /&gt;css/* /opt/www/css&lt;br /&gt;js/* /opt/www/js&lt;br /&gt;&lt;/pre&gt;第一格參數：現在www folder底下路徑的檔案&lt;br /&gt;第二格參數：將來這deb package被安裝時，這些files要被安裝到哪裡&lt;br /&gt;儲存以後，就可以開始build，指令如下：&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;dpkg-buildpackage -rfakeroot -b&lt;br /&gt;&lt;/pre&gt;-rfakeroot：使用root的權限&lt;br /&gt;-b：單純只是binary，不要去build source&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Verify&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成以後，&lt;br /&gt;debian package會放在folder的上層目錄，&lt;br /&gt;應該會有一個ken-sdk_0.1_amd64.deb，&lt;br /&gt;有一個快速verify你要的files有沒有被包進去，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;lesspipe ken-sdk_0.1_amd64.deb&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;當然你也可以安裝起來看看，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;sudo dpkg --install ../ken-sdk_0.1_amd64.deb&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就去看剛剛指定的folder（/opt/www），是否有我們原本的檔案！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Advance: Pre-Install or Post-Install&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;如果你想要在這package完成安裝或者開始安裝之前，做一些前置作業，&lt;br /&gt;那麼就可以靠preinst和postinst這兩個檔案，&lt;br /&gt;preinst就是安裝之前，&lt;br /&gt;postinst就是安裝完成之後，&lt;br /&gt;相反地，如果你想要在這package被remove時，也做一些操作，&lt;br /&gt;那麼就要有prerm和postrm這兩個檔案！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Advance: Update pacakge&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;如果你這package想要更新，&lt;br /&gt;變成0.2版本，你可以直接編輯change log，但有點麻煩！&lt;br /&gt;可以透過指令快速達成！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;dch -v 0.2 &quot;Update package.&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;之後一樣直接dpkg-buildpackage -rfakeroot -b就可以了！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/09/04/how-to-build-your-own-debian-package</link>
                <guid>http://blog.kenyang.net/2014/09/04/how-to-build-your-own-debian-package</guid>
                <pubDate>Thu, 04 Sep 2014 16:26:00 +0800</pubDate>
        </item>

        <item>
                <title>How to create X.509 certificates for Amazon IAM user?</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;You will need X.509 certificates when you send a SOAP request to AWS or use command line tool.&lt;br /&gt;There are two ways to create X.509 certificates.&lt;br /&gt;&lt;br /&gt;(1) If you are not using IAM account:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You can create certificate on &lt;a href=&quot;https://console.aws.amazon.com/iam/home?nc1=h_m_sc#security_credential&quot;&gt;AWS console&lt;/a&gt;.&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Each account only have a maximum of two certificates at a time.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-rmeTV_n3DBc/U_2LJy60heI/AAAAAAAAFQI/lJt0rEcs3xY/s1600/Screen%2BShot%2B2014-08-27%2Bat%2B3.39.21%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-rmeTV_n3DBc/U_2LJy60heI/AAAAAAAAFQI/lJt0rEcs3xY/s400/Screen%2BShot%2B2014-08-27%2Bat%2B3.39.21%2BPM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;(2) If you are using IAM account:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You need to create certificate by yourself.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Create private key&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You need to create a private key first before create a certificate, &lt;br /&gt;because you will use this private key to create a certificate.&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;openssl genrsa 2048 &gt; private-key.pem&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Create certificate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Once you finished the step one, you can use the private key to create a certificate.&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;openssl req -new -x509 -nodes -sha1 -days 99999 -key private-key.pem -outform PEM &gt; cert.pem  &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Copy the content of certificate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;After you finished all the steps, just copy the content of the certificate.&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;ken@build:~$ cat cert.pem &lt;br /&gt;-----BEGIN CERTIFICATE-----&lt;br /&gt;MIIDXzCCAkegAwIBAgIJAJxcjyc5F908MA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV&lt;br /&gt;BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX&lt;br /&gt;aWRnaXRzIFB0eSBMdGQwIBcNMTQwODI3MDc1NDAyWhgPMjI4ODA2MTAwNzU0MDJa&lt;br /&gt;MEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJ&lt;br /&gt;bnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw&lt;br /&gt;ggEKAoIBAQCk8L/z2O84OcRno7YgGu0UkjnABuXhIM96RfZZKhqg74hga7nsLPLK&lt;br /&gt;CzhtslDKAOEjxASo7L0Iq6/5kxJZp4cZakKacDOvnnv2HwQxCXGUEadXcmeknfAh&lt;br /&gt;SvyRYS3FrKj4/oth+pwUm6nvd9fGYg01rJITUQupeADCqhSJUypZbQUypmPxf8Sg&lt;br /&gt;ek7ZW5ErPuyZZ+WmL6TzZaQXfZqvPrN25hRg7AboB8SIKgusUrLK6WgnISlJ7fDh&lt;br /&gt;kCpsy8qSD+Lu74h2hW6TiLy2qJbcTKn8sKb1C4XgWb1FBMzqfJQWtCMVWtDoyzZH&lt;br /&gt;Vj07gzeTDkQ1EvUKHk26x6MEsOlcTV9XAgMBAAGjUDBOMB0GA1UdDgQWBBQOYnDF&lt;br /&gt;FYz2o3+AlVHWwPIzlcFs4DAfBgNVHSMEGDAWgBQOYnDFFYz2o3+AlVHWwPIzlcFs&lt;br /&gt;4DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBPE3ikbJ/vH6QfkwUK&lt;br /&gt;qot+nU15keDSZ2c6itRnNuwjfF8lsZQCJ66w2H+HXCLBjnPymemcTPTMUqfovpFs&lt;br /&gt;oNohRuQS6IoIrvgXAbb2X4BhygPDNSQPktGVo8qjKUyxYZa4Su8NFkb+OzZWDR4K&lt;br /&gt;KN+OLFfaT6cx8o9o5M7cmNRokFisWynJ33EoKj1lW5YIwTwb1VKz4hXW+gKZFX7u&lt;br /&gt;pgE1yzkOcoUW5EykNsGUaqLSdycxmDO866IFn6px9etxpIkQwUi+rb78tX6pNtpa&lt;br /&gt;IBTsfPBqovXRdMe6mq5uO8x4Nrb47w8DZkrQSTMt1ll4t0bUL15o/6cQ5ajGaaGA&lt;br /&gt;QVtO&lt;br /&gt;-----END CERTIFICATE-----&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Upload the content of certificate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Go to the &lt;a href=&quot;https://console.aws.amazon.com/iam/home?#users&quot;&gt;IAM management console&lt;/a&gt;.&lt;br /&gt;1. Select an IAM user &lt;br /&gt;2. Click &quot;User Actions&quot; &lt;br /&gt;3, Click &quot;Manage Signing Certificates&quot;&lt;br /&gt;4. Click &quot;Upload Signing Certificates&quot;&lt;br /&gt;5. Paste the content&lt;br /&gt;6. Click &quot;Upload Signing Certificates&quot;&lt;br /&gt;&lt;br /&gt;Done. Now you can send a SOAP request to AWS or use the command line tools.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/08/27/how-to-create-x509-certificates-for</link>
                <guid>http://blog.kenyang.net/2014/08/27/how-to-create-x509-certificates-for</guid>
                <pubDate>Wed, 27 Aug 2014 16:14:00 +0800</pubDate>
        </item>

        <item>
                <title>Setting up load balancing with Keepalived</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;a href=&quot;http://blog.kenyang.net/2014/07/setting-up-high-availabilityha.html&quot;&gt;前一篇&lt;/a&gt;有講過了，&lt;br /&gt;Keepalived是一個routing software，&lt;br /&gt;它可以做到load balancing和high-availability，&lt;br /&gt;而&lt;a href=&quot;http://blog.kenyang.net/2014/07/setting-up-high-availabilityha.html&quot;&gt;前一篇&lt;/a&gt;也教怎麼set up HA，&lt;br /&gt;這篇會講怎麼set up load balancing，&lt;br /&gt;&lt;b&gt;&lt;strike&gt;理論上&lt;/strike&gt;&lt;/b&gt;架構應該要和下圖中一樣，才會比較合理，&lt;br /&gt;有N檯load-balancer，專門做load balancing，&lt;br /&gt;有N檯web！&lt;br /&gt;而這些load balancer，都會裝keepalived，然後去binding Virtual IP！&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-rxBME9e5d4g/U7fayrtLTzI/AAAAAAAAFMk/yOp-1IBSHaQ/s1600/Network+Diagram.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-rxBME9e5d4g/U7fayrtLTzI/AAAAAAAAFMk/yOp-1IBSHaQ/s1600/Network+Diagram.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;但基於測試方便加上懶得安裝這麼多檯機器來說明，&lt;br /&gt;先簡化成下圖，&lt;br /&gt;每一檯server身兼load balancer和web server，&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-HUzm7NOhTrQ/U7fcTr3Rh3I/AAAAAAAAFMw/c4HRt5LI6sE/s1600/Network+Diagram+(1).png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-HUzm7NOhTrQ/U7fcTr3Rh3I/AAAAAAAAFMw/c4HRt5LI6sE/s1600/Network+Diagram+(1).png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;和&lt;a href=&quot;http://blog.kenyang.net/2014/07/setting-up-high-availabilityha.html&quot;&gt;前一篇&lt;/a&gt;一樣，假設我們有兩檯server，&lt;br /&gt;IP分別為&lt;br /&gt;&amp;nbsp;&amp;nbsp;1. 10.1.190.142&lt;br /&gt;&amp;nbsp;&amp;nbsp;2. 10.1.190.143&lt;br /&gt;&lt;br /&gt;virtual ip：10.1.190.150&lt;br /&gt;&lt;br /&gt;在開始之前，請先去完成&lt;a href=&quot;http://blog.kenyang.net/2014/07/setting-up-high-availabilityha.html&quot;&gt;前一篇&lt;/a&gt;的所有操作，&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Generate hash &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，先gen hash，&lt;br /&gt;這hash是給load balancer用的，&lt;br /&gt;原因是load balancer會去確認每一檯的web server是活著的，&lt;br /&gt;確認時會帶著這個hash值！&lt;br /&gt;因為有兩檯機器，所以要gen 2組，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@host1:~$ genhash -s 10.1.190.142 -p 80 -u /index.html&lt;br /&gt;MD5SUM = 043e8a8eeaf59e7ef9c6b4cd6f71a7de&lt;br /&gt;&lt;br /&gt;root@host1:~$ genhash -s 10.1.190.143 -p 80 -u /index.html&lt;br /&gt;MD5SUM = 66d84fe2b7e20944dd5d077e768b2cfb&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Write a script for handling iptables &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;在這步驟，要寫一隻script，&lt;br /&gt;負責add和delete rule的，&lt;br /&gt;為什麼要add?&lt;br /&gt;因為當如果沒有add virtual ip進去rule，&lt;br /&gt;當load balancer把packet轉進來時，是送不進來的！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;#!/bin/bash                                                                                                                                                                 &lt;br /&gt;&lt;br /&gt;VIP=$2&lt;br /&gt;&lt;br /&gt;count=$(iptables -t nat -L| grep $VIP | wc -l)&lt;br /&gt;&lt;br /&gt;case &quot;$1&quot; in&lt;br /&gt;  --add)&lt;br /&gt;    if [[ $count == 0 ]]; then&lt;br /&gt;        iptables -A PREROUTING -t nat -d $VIP -p tcp -j REDIRECT&lt;br /&gt;    fi  &lt;br /&gt;    ;;  &lt;br /&gt;  --del)&lt;br /&gt;    if [[ $count &amp;gt; 0 ]]; then&lt;br /&gt;        iptables -D PREROUTING -t nat -d $VIP -p tcp -j REDIRECT&lt;br /&gt;    fi&lt;br /&gt;    ;;  &lt;br /&gt;esac&lt;br /&gt;&lt;br /&gt;exit 0&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Configuration settings&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;基本上設置跟第一篇沒有什麼太大差別，&lt;br /&gt;首先只有第&lt;span style=&quot;color: red;&quot;&gt;26,27&lt;/span&gt;行，多了兩個指令，&lt;br /&gt;分別是當這檯機器進入master模式時，要把rule刪除&lt;br /&gt;以及進入backup時，要把rule加進去!&lt;br /&gt;&lt;br /&gt;以及增加了&lt;span style=&quot;color: red;&quot;&gt;31~60&lt;/span&gt;行的setting,&lt;br /&gt;記得第一檯和第二檯都要進行設定，但一樣要把state,priority, router_id改成符合該host的設定！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;global_defs {&lt;br /&gt;  notification_email {&lt;br /&gt;    kenyang@xxx.com&lt;br /&gt;  }&lt;br /&gt;  notification_email_from xxxx@example.com&lt;br /&gt;  smtp_server 127.0.0.1&lt;br /&gt;  smtp_connect_timeout 30&lt;br /&gt;  router_id host1      # 用來識別是哪檯機器，如果postfix有安裝，在寄信的時候，title就會跟你說是哪檯機器有問題&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;vrrp_instance VI_1 {   # VI_1 可以改成自己想要的string&lt;br /&gt;&lt;br /&gt;  state MASTER         # MASTER意思是這檯為主要的機器&lt;br /&gt;&lt;br /&gt;  interface eth0       # 把virtual ip binding在eht0上&lt;br /&gt;&lt;br /&gt;  virtual_router_id 1  # 0~255之間，用來識別是哪一個instance&lt;br /&gt;  priority 100         &lt;br /&gt;&lt;br /&gt;  virtual_ipaddress {&lt;br /&gt;    10.1.190.150/24&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  smtp_alert           # 當有問題時要發信通知&lt;br /&gt;&lt;br /&gt;  notify_master &quot;/etc/keepalived/handle_iptable.sh --del 10.1.190.150&quot; # 當這檯機器進入master模式時，要把rule刪除&lt;br /&gt;  notify_backup &quot;/etc/keepalived/handle_iptable.sh --add 10.1.190.150&quot; # 當這檯機器進入backup模式時，要把rule加入&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;# virtual web server&lt;br /&gt;virtual_server 10.1.190.150 80 {&lt;br /&gt;  delay_loop 10              # n秒確認底下的web一次&lt;br /&gt;  lb_algo rr                 # 使用Round Robin的演算法做load balancing (rr, wrr, al, wlc, ......etc)&lt;br /&gt;  lb_kind DR                 # Forwarding的方法 （dr, nat, tun)&lt;br /&gt;  persistence_timeout 5      # timeout for persistent connection&lt;br /&gt;  protocol TCP &lt;br /&gt;&lt;br /&gt;  real_server 10.1.190.142 80 {&lt;br /&gt;    HTTP_GET {  # 使用HTTP_GET的方式進行確認web活著&lt;br /&gt;      url {&lt;br /&gt;        path /index.html&lt;br /&gt;        digest 043e8a8eeaf59e7ef9c6b4cd6f71a7de   # 剛剛第一步驟gen的hash&lt;br /&gt;      }   &lt;br /&gt;      connect_timeout 3&lt;br /&gt;      nb_get_retry 3&lt;br /&gt;      delay_before_retry 2&lt;br /&gt;    }   &lt;br /&gt;  }&lt;br /&gt;  real_server 10.1.190.143 80 {&lt;br /&gt;    HTTP_GET { # 使用HTTP_GET的方式進行確認web活著&lt;br /&gt;      url {&lt;br /&gt;        path /index.html&lt;br /&gt;        digest 66d84fe2b7e20944dd5d077e768b2cfb   # 剛剛第一步驟gen的hash&lt;br /&gt;      }   &lt;br /&gt;      connect_timeout 3&lt;br /&gt;      nb_get_retry 3&lt;br /&gt;      delay_before_retry 2&lt;br /&gt;    }   &lt;br /&gt;  }&lt;br /&gt;}   &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Verify&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成上述設定以後，&lt;br /&gt;先把keepalived reload，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;service keepalived reload&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;reload完成以後，&lt;br /&gt;先在第一檯打下面的指令，&lt;br /&gt;為什麼是在第一檯打？因為現在第一檯是master，它搶到virtual ip，&lt;br /&gt;所以load balancing的工作是交由第一檯來做的！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;ipvsadm -ln&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打完應該會看到下面的內容，&lt;br /&gt;10.1.190.150這檯底下有兩檯主機，&lt;br /&gt;分別是142, 143，&lt;br /&gt;load balancer就是透過上述的HTTP_GET去確認web server是活著的，&lt;br /&gt;比較特別的有兩個參數，&lt;br /&gt;&amp;nbsp;&amp;nbsp;1. ActiveConn: 簡言之這檯機器目前有幾個人連上來&lt;br /&gt;&amp;nbsp;&amp;nbsp;2. InActConn: 有幾檯機器的tcp status不是established&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;Prot LocalAddress:Port Scheduler Flags&lt;br /&gt;  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn&lt;br /&gt;TCP  10.1.190.150:80 rr persistent 5&lt;br /&gt;  -&amp;gt; 10.1.190.142:80              Route   1      0          0         &lt;br /&gt;  -&amp;gt; 10.1.190.143:80              Route   1      0          0    &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這時候在電腦上的browser瀏覽10.1.190.150，&lt;br /&gt;然後在手機（或者其他檯電腦上）也瀏覽10.1.190.150&lt;br /&gt;然後再馬上在第一檯機器打下面的指令&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;ipvsadm -ln&lt;br /&gt;&lt;/pre&gt;應該會發現ActiveConn都變成1了！&lt;br /&gt;如果你有第三檯機器，你可以試試看再連線10.1.190.150!&lt;br /&gt;這時某一檯的ActiveConn會變成2！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/07/07/setting-up-load-balancing-with</link>
                <guid>http://blog.kenyang.net/2014/07/07/setting-up-load-balancing-with</guid>
                <pubDate>Mon, 07 Jul 2014 11:06:00 +0800</pubDate>
        </item>

        <item>
                <title>Setting up a High-Availability(HA) environment with Keepalived</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;Keepalived是一個routing software，&lt;br /&gt;它可以做到load balancing和high-availability，&lt;br /&gt;load balancing會倚靠lvs (linux virtual server, ipvsadm)來做到（但這篇只會做HA，下篇再講怎麼做load balancing），&lt;br /&gt;而high-availability是靠VRRP protocol來達成，&lt;br /&gt;那什麼是&lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol&quot; target=&quot;_blank&quot;&gt;VRRP&lt;/a&gt;（Virtual Router Redundancy Protocol ）？&lt;br /&gt;簡單的說，就是為了當某個router故障，然後可以快速的failover，&lt;br /&gt;Keepalivied就是利用這protocol來達到HA．&lt;br /&gt;&lt;br /&gt;假設我們有兩檯web server，&lt;br /&gt;IP分別為&lt;br /&gt;&amp;nbsp;&amp;nbsp;1. 10.1.190.142&lt;br /&gt;&amp;nbsp;&amp;nbsp;2. 10.1.190.143&lt;br /&gt;&lt;br /&gt;在兩檯都安裝好keepalived的情況下，&lt;br /&gt;被設定為&quot;MASTER&quot;的那檯機器，會去binding 一個我們所指定的virtual ip！&lt;br /&gt;這裡先假設virtual ip為10.1.190.150&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Install the packages &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先先ssh到第一檯和第二檯上，安裝等等會用到的幾個packages，&lt;br /&gt;&amp;nbsp;&amp;nbsp;1. keepalived&lt;br /&gt;&amp;nbsp;&amp;nbsp;2. nginx: 你也可以選擇你想要用的web server&lt;br /&gt;&amp;nbsp;&amp;nbsp;3. postfix: optional, 安裝postfix的目的在於，server壞掉時，會寄信通知你&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;apt-get install keepalived nginx postfix&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Set up environment &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝好以後，先確認你的nginx是有起來的，&lt;br /&gt;開browser去打一下web server就可以簡單確認！&lt;br /&gt;&lt;br /&gt;接著先到第一檯機器上去進行keepalived的config設定 &lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;vim /etc/keepalived/keepalived.conf&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;內容如下：&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;global_defs {&lt;br /&gt;  notification_email {&lt;br /&gt;    kenyang@xxx.com&lt;br /&gt;  }&lt;br /&gt;  notification_email_from xxxx@example.com&lt;br /&gt;  smtp_server 127.0.0.1&lt;br /&gt;  smtp_connect_timeout 30&lt;br /&gt;  router_id host1      # 用來識別是哪檯機器，如果postfix有安裝，在寄信的時候，title就會跟你說是哪檯機器有問題&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;vrrp_instance VI_1 {   # VI_1 可以改成自己想要的string&lt;br /&gt;&lt;br /&gt;  state MASTER         # MASTER意思是這檯為主要的機器&lt;br /&gt;&lt;br /&gt;  interface eth0       # 把virtual ip binding在eht0上&lt;br /&gt;&lt;br /&gt;  virtual_router_id 1  # 0~255之間，用來識別是哪一個instance&lt;br /&gt;  priority 100         &lt;br /&gt;&lt;br /&gt;  virtual_ipaddress {&lt;br /&gt;    10.1.190.150/24&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  smtp_alert           # 當有問題時要發信通知&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;接著就到第二檯上去進行設定，&lt;br /&gt;其實內容大致上和第一檯一模一樣，&lt;br /&gt;只有router_id, state, priority需要變動&lt;br /&gt;內容如下，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;global_defs {&lt;br /&gt;  ... same with host1 ...&lt;br /&gt;  router_id host2  &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;vrrp_instance VI_1 {   # VI_1 可以改成自己想要的string&lt;br /&gt;  ... same with host 1 ....&lt;br /&gt;  state BACKUP&lt;br /&gt;  priority 50         &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;完成設定以後，分別在兩檯機器上打開keepalived，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;service keepalived start&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Verify &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;最後就來驗證ha是work的，&lt;br /&gt;先到第一檯上去，因為第一檯設定為MASTER，&lt;br /&gt;因此理論上第一檯除了自己的IP (10.1.190.142)以外，&lt;br /&gt;還要拿到這個virtual ip (10.1.190.150)，&lt;br /&gt;打下面的指令可以驗證，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@host1:~$ ip a | grep eth0 | grep inet&lt;br /&gt;    inet 10.1.190.142/24 brd 10.1.190.255 scope global eth0&lt;br /&gt;    inet 10.1.190.150/24 scope global secondary eth0&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著打開web browser去連virtual ip (10.1.190.150)，&lt;br /&gt;都會導到第一檯的nginx去！&lt;br /&gt;這時候把第一檯關機！&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@host1:~$ shutdown now&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;此時第二檯應該要拿到virtual ip，&lt;br /&gt;一樣打下面的指令做驗證&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;root@host2:~$ ip a | grep eth0 | grep inet&lt;br /&gt;    inet 10.1.190.143/24 brd 10.1.190.255 scope global eth0&lt;br /&gt;    inet 10.1.190.150/24 scope global secondary eth0&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後再打開web browser去連virtual ip (10.1.190.150)，&lt;br /&gt;此時看到的內容會是第二檯nginx上的內容！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;除此之外，如果postfix有設定成功，&lt;br /&gt;應該是會收到mail跟你說host2進入了MASTER模式，&lt;br /&gt;標題是：[host2] VRRP Instance VI_1 - Entering MASTER state&lt;br /&gt;內容是：=&gt; VRRP Instance is now owning VRRP VIPs &lt;=   下一篇再教怎麼用keepalived做load balance.           &lt;/div&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/07/06/setting-up-high-availabilityha</link>
                <guid>http://blog.kenyang.net/2014/07/06/setting-up-high-availabilityha</guid>
                <pubDate>Sun, 06 Jul 2014 19:28:00 +0800</pubDate>
        </item>

        <item>
                <title>Getting started with Amazon EC2 API Tools</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/ec2/&quot; target=&quot;_blank&quot;&gt;Amazon EC2&lt;/a&gt;是什麼東西，這裡就不多做介紹了，&lt;br /&gt;這裡主要介紹 Amazon EC2 API Tools，這個tool讓developer用來管理EC2上的instances，&lt;br /&gt;不管是create, terminate, stop, create key等等之類的操作都可以透過API tool來完成，&lt;br /&gt;那什麼時候需要用到這個tool? 像是automation啊，或者如果你想要customize自己的AMI時，&lt;br /&gt;還是得先安裝 Amazon EC2 API Tools以及&lt;a href=&quot;http://aws.amazon.com/developertools/368&quot;&gt;AMI Tools&lt;/a&gt;，不過AMI就是另外一個課題了，有機會的話再開另一篇來講吧！&lt;br /&gt;這裡就focus在下面兩個主題：&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. how to &lt;span style=&quot;color: red;&quot;&gt;setup&lt;/span&gt; API tools?&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. how to &lt;span style=&quot;color: red;&quot;&gt;create&lt;/span&gt; EC2 instance using API command line?&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. how to &lt;span style=&quot;color: red;&quot;&gt;grant permissions&lt;/span&gt; to instance using API command line?&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. how to &lt;span style=&quot;color: red;&quot;&gt;terminate&lt;/span&gt; instance using API command line?&lt;br /&gt;&lt;br /&gt;在開始之前，記得先去註冊AWS的帳號啊！（有一張信用卡就可以註冊了）&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. Get certificate and Private key &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;因為tools需要先拿到cert and private key，才可以讓developer對自己的account做操作，&lt;br /&gt;所以得先拿到！&lt;br /&gt;怎麼拿呢？&lt;br /&gt;先到&lt;a href=&quot;https://console.aws.amazon.com/iam/home?#security_credential&quot;&gt;Security credentials&lt;/a&gt;的頁面，&lt;br /&gt;進去以後，請點選紅色框框中的按鈕『Create new certificate』（如下圖），&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-canxBzIKYD8/U2iwOCeE_SI/AAAAAAAAFK0/QT56bsjEeUc/s1600/Screen+Shot+2014-05-06+at+4.50.31+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-canxBzIKYD8/U2iwOCeE_SI/AAAAAAAAFK0/QT56bsjEeUc/s1600/Screen+Shot+2014-05-06+at+4.50.31+PM.png&quot; height=&quot;246&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;按下按鈕就建立好cert and private key了！就把cert and private key下載到『桌面』．&lt;br /&gt;記得！！！一定要先下載private key！因為只有一次的機會！錯過就無法重新下載了！&lt;br /&gt;cert也要一併下載下來．&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. Download the API tools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就去下載API tools，&lt;br /&gt;先在home目錄底下建立一個.ec2的folder，&lt;br /&gt;這folder會存放cert and private key，以及api tools，&lt;br /&gt;&lt;pre class=&quot;brush: bash&quot;&gt;cd &lt;br /&gt;mkdir .ec2  # create folder&lt;br /&gt;cd .ec2 &lt;br /&gt;wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip # download tools&lt;br /&gt;unzip ec2-api-tools.zip&lt;br /&gt;mv ~/Desktop/*.pem . # move cert and private key&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Environment setup&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要設定環境變數，&lt;br /&gt;打開你的.bash_profile&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;vim ~/.bash_profile&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;並且insert下列的內容，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;export EC2_HOME=~/.ec2    &lt;br /&gt;export PATH=$PATH:$EC2_HOME/bin&lt;br /&gt;export EC2_PRIVATE_KEY=$EC2_HOME/pk-xxxxxxxxxx.pem   # remember to replace xxxx to your file name&lt;br /&gt;export EC2_CERT=$EC2_HOME/cert-xxxxxxxxxxx.pem       # remember to replace xxxx to your file name&lt;br /&gt;export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home/    # because API tools are written in java&lt;br /&gt;export EC2_URL=https://ec2.us-west-2.amazonaws.com   &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;其實設定都還蠻淺顯易懂的，&lt;br /&gt;EC2_URL比較需要特別說明，&lt;br /&gt;這個超重要！為什麼呢？&lt;br /&gt;因為你不設的話，你待會下某些指令都會找不到東西！指令還得帶上--region option才行！&lt;br /&gt;為了省下麻煩，就在bash_profile設定吧！當然你可以把us-west-2改成你想要的region！&lt;br /&gt;&lt;br /&gt;最後記得要讓bash_profile生效！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;source ~/.bash_profile&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Gen key&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著先建立key，這key是等等用來ssh連線到你的instance的！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-add-keypair ec2-keypair&lt;br /&gt;&lt;/pre&gt;這指令會幫你gen key，gen完以後會顯示在console上，&lt;br /&gt;請把它複製起來！（從-----BEGIN RSA PRIVATE KEY-----開始複製，一直到-----END RSA PRIVATE KEY-----）&lt;br /&gt;然後建立一個ec2-keypair的檔案，把內容貼在裡面！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;cd ~/.ec2&lt;br /&gt;vim ec2-keypair&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Create instance&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;在create之前，你應該要知道你想要create哪一類型的instance！像是ubuntu, centos, amazon linux....etc.&lt;br /&gt;所以要透過下面的指令去查有哪些instance，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-describe-images -a --filter architecture=x86_64 &amp;gt;&amp;gt; ~/image_list&lt;br /&gt;&lt;/pre&gt;-a意思就是show all&lt;br /&gt;然後--filter出architecture是x86_64的image！&lt;br /&gt;因為其實資料蠻亂的，建議你還是output到一個file來看你想要create哪一種instance！&lt;br /&gt;這裡我選擇了ami-6ac2a85a，這個是ubuntu14.04的instance！&lt;br /&gt;&lt;br /&gt;接著就可以create了！下面的option應該就不用多作說明了，有玩ec2的應該都知道&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-run-instances  ami-6ac2a85a  --key ec2-keypair  --region us-west-2  --instance-type t1.micro&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. Connect to instance&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;一開始你想要ssh進去instance，一定是不行的！&lt;br /&gt;因為預設的group permission是沒有開22 port的！&lt;br /&gt;所以要用下面的指令去打開！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-authorize default -p 22&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;打開以後就可以ssh進去了！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ssh -i ec2-keypair ec2-xxx-xxx-xxx-xxx.us-west-2.compute.amazonaws.com&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;喔！對了！如果你忘記自己instance的ip或者相關資訊，&lt;br /&gt;可以透過下面指令來查！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-describe-instances&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Terminate instance&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;要terminate一個instance非常簡單！&lt;br /&gt;你只要知道自己的instance id就好了！（如果忘記id是什麼，一樣用ec2-describe-instances去查！）&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;ec2-terminate-instances i-xxxxxxx&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2014/05/06/getting-started-with-amazon-ec2-api</link>
                <guid>http://blog.kenyang.net/2014/05/06/getting-started-with-amazon-ec2-api</guid>
                <pubDate>Tue, 06 May 2014 17:48:00 +0800</pubDate>
        </item>

        <item>
                <title>Build a deb package from source</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;最近因為安全性的關係，&lt;br /&gt;我要在ubuntu 10.04上面將openssl從0.9.8k更新至1.0.1e，&lt;br /&gt;以及將openssh從5.3p1更新至6.2p2 &lt;br /&gt;但偏偏這兩個較新的版本都沒有給10.04用的package....&lt;br /&gt;所以這時候只好自己build了！&lt;br /&gt;有人可能會覺得奇怪，為什麼要包成package安裝？&lt;br /&gt;而不直接tar開source，然後make install就好？&lt;br /&gt;因為我需要重複的更新很多次，很多檯機器！&lt;br /&gt;如果在每一檯都去./configure, make, make install...那真的會很花時間！&lt;br /&gt;所以最快的方式就是先在一檯機器上build package，&lt;br /&gt;然後再把package拿到每一檯去安裝，&lt;br /&gt;會快上許多！&lt;br /&gt;&lt;br /&gt;喔！對了！這邊教你的是怎麼build出一包debian package！&lt;br /&gt;如果你想要把這包package撒出去給別人使用，建議你要加上sign key啦！&lt;br /&gt;甚至如果你想要撒到launchpad上的話，更要加上sign key！&lt;br /&gt;但這裡只會教怎麼build而已！&lt;br /&gt;&lt;br /&gt;恩，其實build還是很簡單！&lt;br /&gt;難的是環境的準備跟環境的設定啊.....&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;在這裡會介紹兩種build debian package的方法！&lt;br /&gt;&lt;ol&gt;&lt;li&gt;checkinstall&lt;/li&gt;&lt;li&gt;debuild&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;這兩種的方式差蠻多的，&lt;br /&gt;checkinstall它是用錄製的方式，&lt;br /&gt;透過make install，然後錄下整個安裝過程，&lt;br /&gt;再把打包成一個debian package！&lt;br /&gt;而debuild可以想像成就是動態的去build，把所需的檔案通通包進去package！&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. install tools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;先安裝所需的package，第一個是checkinstall，再來安裝ubuntu-dev-tools這個package，&lt;br /&gt;ubuntu-dev-tools裡面就包含了debuild等相關需要的tools．&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;apt-get install checkinstall&lt;br /&gt;apt-get install ubuntu-dev-tools  bzr-builddeb debhelper&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. download and decompress tarball&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;把source code下載下來和解壓縮開，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;cd ~&lt;br /&gt;wget http://www.openssl.org/source/openssl-1.0.1e.tar.gz  // download ssl&lt;br /&gt;tar xvzf openssl-1.0.1e.tar.gz&lt;br /&gt;&lt;br /&gt;wget http://openbsd.org.ar/pub/OpenBSD/OpenSSH/portable/openssh-6.2p2.tar.gz  // download ssh&lt;br /&gt;&lt;br /&gt;cd openssl-1.0.1e&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. Config and Compile source code&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;這一步蠻重要的，&lt;br /&gt;要進行config和make(compile)，&lt;br /&gt;但！！！只有checkintall需要“先”config and compile！&lt;br /&gt;先config，openssl的config還好，但openssh的config要稍微注意一點，&lt;br /&gt;openssh的config要特別帶一個--sysconfdir，&lt;br /&gt;這個參數是說明你將來的sshd_config, ssh_config, ssh_host_xxx_key要放在哪裡，&lt;br /&gt;如果你沒有帶這個參數，預設應該是會存在/usr/etc/底下，老實說蠻奇怪的！&lt;br /&gt;所以還是指定一下吧！&lt;br /&gt;那因為前面剛剛說了，只有openssl需要先config，所以等等會再說openssh怎麼去設定config，&lt;br /&gt;先設定openssl的config，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;./config&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;進行make，make就是compile，把你的source code compile成binary，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;make&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. Build package (checkinstall)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;前面說了build package，這裡會介紹兩種方法（其實蠻多種方法的），&lt;br /&gt;我會先用checkinstall build ssl，然後用debuild build ssh，&lt;br /&gt;首先是ssl，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;checkinstall make install&lt;br /&gt;&lt;/pre&gt;checkinstall的原理就是會去錄製接在它後面那個command所作的事情，&lt;br /&gt;所以我們後面接make install（就是安裝），&lt;br /&gt;make install下下去以後就會真的去安裝這個package，&lt;br /&gt;然後checkintall就會在旁邊錄起來！&lt;br /&gt;checkinstall這個指令按下enter以後，會出現幾個preconfig的訊息，&lt;br /&gt;你要先替這個package建立一些information，&lt;br /&gt;第一個是會問你doc，這個就是直接y下去！（如下圖）&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-YP1vCg_L8Ms/Ux14puERFgI/AAAAAAAAFJ0/j4W5Spb3314/s1600/Screen+Shot+2014-03-10+at+3.15.30+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-YP1vCg_L8Ms/Ux14puERFgI/AAAAAAAAFJ0/j4W5Spb3314/s1600/Screen+Shot+2014-03-10+at+3.15.30+PM.png&quot; height=&quot;148&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;接著是要你描述一下這個package是做什麼的（如下圖）&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-EMe13vp50Ps/Ux14ppgOv9I/AAAAAAAAFJg/p65kwREtHCc/s1600/Screen+Shot+2014-03-10+at+3.16.02+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-EMe13vp50Ps/Ux14ppgOv9I/AAAAAAAAFJg/p65kwREtHCc/s1600/Screen+Shot+2014-03-10+at+3.16.02+PM.png&quot; height=&quot;72&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;最後就是這package的相關資訊，你可以改掉maintainer是誰，&lt;br /&gt;改成自己email！（如下圖）&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-RzRww5SU91U/Ux14pvwqfLI/AAAAAAAAFJk/U1XMVtDKuog/s1600/Screen+Shot+2014-03-10+at+3.16.12+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-RzRww5SU91U/Ux14pvwqfLI/AAAAAAAAFJk/U1XMVtDKuog/s1600/Screen+Shot+2014-03-10+at+3.16.12+PM.png&quot; height=&quot;298&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;那怎麼看有沒有成功？&lt;br /&gt;因為你是下make install，&lt;br /&gt;所以最後build的流程會去幫你安裝，&lt;br /&gt;如果安裝失敗, 那你的package也不會存在！&lt;br /&gt;&lt;br /&gt;那有人可能只是單純想要build package，而不想要安裝這個package在這檯機器上，&lt;br /&gt;那該怎麼辦？&lt;br /&gt;checkinstall有額外的參數可以做這件事情，多帶一個--install就行！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;checkinstall --install=no make install&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5. Build package (debuild)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;上面介紹了checkinstall的方法，&lt;br /&gt;現在要介紹debuild的方式，&lt;br /&gt;那這裡我們以opennssh為範例，&lt;br /&gt;透過debuild比較算是debian的practice，&lt;br /&gt;首先要先有debian的資料夾，&lt;br /&gt;這資料夾下面有一堆林林種種的config file，甚至是init.d，&lt;br /&gt;那我們難道要一個一個的設定這些config？&lt;br /&gt;當然不用，可以透過dh_make去幫我們產生template，&lt;br /&gt;&lt;br /&gt;那可是透過dh_make也有點麻煩，就是要接一堆參數，&lt;br /&gt;那好險Canonical有提供另一個tool(bzr)去幫我們handle這件事情，&lt;br /&gt;透過bzr就可以幫我們產生debian/*底下的template，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;cd ~&lt;br /&gt;bzr dh-make openssh 6.2p2 openssh-6.2p2.tar.gz&lt;br /&gt;&lt;/pre&gt;bzr會問你這是一個single binary, indep binary, multiple binary, library, kernel module, kernel patch or cdbs?&lt;br /&gt;就選single binary（如下圖），&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-rh1jjH_Zflk/Ux14qAh2qfI/AAAAAAAAFJs/4DvHSRPFXIw/s1600/Screen+Shot+2014-03-10+at+3.58.04+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-rh1jjH_Zflk/Ux14qAh2qfI/AAAAAAAAFJs/4DvHSRPFXIw/s1600/Screen+Shot+2014-03-10+at+3.58.04+PM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;dh-make會先幫你建立一個opepssh的資料夾，裡面其實就是下載的那個tarball解開！&lt;br /&gt;進到openssh資料夾，你會發現裡面會有另外一個debian資料夾，&lt;br /&gt;這個資料夾裡面通通都是build debian package所需要的file，&lt;br /&gt;有幾個file蠻重要的，&lt;br /&gt;像是control, changelog, docs，&lt;br /&gt;這些就是dh_make幫我們建好的template，既然是template，&lt;br /&gt;所以就有些欄位要改掉！不過都是一些基本的information，所以這裡就不一一介紹！&lt;br /&gt;&lt;br /&gt;接著就要開始build，&lt;br /&gt;build其實是靠debian/rule來trigger，&lt;br /&gt;rule裡面要放一些dh_autoconfiguration, dh_install, dh_xxxx.....etc，&lt;br /&gt;一堆的command，&lt;br /&gt;不過template已經幫我們建立好了dh  $@，我們就不用一一處理！&lt;br /&gt;&lt;br /&gt;在開始build之前，&lt;br /&gt;有個比較dirty的事情要先做，&lt;br /&gt;前面不是有說要設定--sysconfdir嗎？&lt;br /&gt;debian的practice是透過override_dh_auto_configure去做，&lt;br /&gt;override_dh_auto_configure會幫我們把要帶的參數再帶給./configure，&lt;br /&gt;但偏偏我怎麼試都帶不過去，最後只好用dirty的方式，&lt;br /&gt;就是去找到source code，去硬改sysconfdir的位置，&lt;br /&gt;預設會是/etc，&lt;br /&gt;但我想要放在/etc/ssh底下，&lt;br /&gt;那個source code位置就在/usr/share/perl5/Debian/Debhelper/Buildsystem/autoconf.pm，&lt;br /&gt;找到下面這行，把/etc再改成我要的...&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;push @opts, &quot;--sysconfdir=/etc&quot;;&lt;br /&gt;&lt;/pre&gt;那因為這方法真的蠻dirty的，如果有哪位大大知道該怎麼正確的透過override_dh_auto_configure去設定，&lt;br /&gt;歡迎告訴我～&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;最後就可以用debuild  build了&lt;br /&gt;後面帶的參數意思就是不要sign source pacakge and .changes files，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;debuild -uc -us -B&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;最後說明一下另一個command，&lt;br /&gt;這command可以來看package裡面有些什麼！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;lesspipe openssh-6.2p2.deb&lt;br /&gt;&lt;/pre&gt;可以拿這command來簡單的驗證一下build有沒有成功！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/03/10/build-deb-package-from-source</link>
                <guid>http://blog.kenyang.net/2014/03/10/build-deb-package-from-source</guid>
                <pubDate>Mon, 10 Mar 2014 16:38:00 +0800</pubDate>
        </item>

        <item>
                <title>How to build Android image?</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;因緣際會下，剛好有機會可以練習如何build android source code，&lt;br /&gt;（是android source code！不是app！）&lt;br /&gt;&lt;br /&gt;不過練習完以後，發現其實build android真的很簡單！&lt;br /&gt;難的在於prepare build environment.....&lt;br /&gt;所以這篇會從頭做起，從一個完全乾淨的ubuntu 12.04開始做起！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. install ubuntu 12.04&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;第一步就是去下載&lt;a href=&quot;http://www.ubuntu.com/download&quot; target=&quot;_blank&quot;&gt;ubuntu 12.04 64 bits&lt;/a&gt;，&lt;br /&gt;要裝server版或者是desktop版都可以，&lt;br /&gt;安裝desktop版的好處就是你build好image的時候，&lt;br /&gt;要測試很簡單！&lt;br /&gt;像我是用server版build，因為沒有x-window，我也不想再裝！&lt;br /&gt;就只好把build好的image抓出來，抓到我自己的mac上，&lt;br /&gt;然後透過emulator來測試！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. install add-apt-repository&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;剛安裝完的ubuntu預設是沒有add-apt-repository這個package的，&lt;br /&gt;所以得手動安裝，請安裝下列兩項packages&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;sudo apt-get install software-properties-common&lt;br /&gt;sudo apt-get install python-software-properties&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. install sun-java6-sdk&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;那因為不能用openjdk build android，&lt;br /&gt;所以得換成sun(oracle)的版本，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;sudo add-apt-repository ppa:webupd8team/java&lt;br /&gt;sudo apt-get update&lt;br /&gt;sudo apt-get install oracle-java6-installer&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. install required packages&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝一些必要的packages，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;sudo apt-get install git gnupg flex bison gperf build-essential \&lt;br /&gt;  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \&lt;br /&gt;  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \&lt;br /&gt;  libgl1-mesa-dev g++-multilib mingw32 tofrodos \&lt;br /&gt;  python-markdown libxml2-utils xsltproc zlib1g-dev:i386&lt;br /&gt;sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;5.&amp;nbsp;Configuring USB Access&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;因為linux預設無法access到USB device，&lt;br /&gt;所以得加一些udev的rule，&lt;br /&gt;先在udev底下建立一個檔案,&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;sudo vim /etc/udev/rules.d/51-android.rules&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;然後貼入下列的內容！注意！！請把owner改成你自己的ubuntu user name！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;# adb protocol on passion (Nexus One)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e12&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on passion (Nexus One)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0bb4&quot;, ATTR{idProduct}==&quot;0fff&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on crespo/crespo4g (Nexus S)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e22&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on crespo/crespo4g (Nexus S)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e20&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on stingray/wingray (Xoom)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;22b8&quot;, ATTR{idProduct}==&quot;70a9&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on stingray/wingray (Xoom)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;708c&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on maguro/toro (Galaxy Nexus)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;04e8&quot;, ATTR{idProduct}==&quot;6860&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on maguro/toro (Galaxy Nexus)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e30&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on panda (PandaBoard)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0451&quot;, ATTR{idProduct}==&quot;d101&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on panda (PandaBoard ES)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;d002&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on panda (PandaBoard)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0451&quot;, ATTR{idProduct}==&quot;d022&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# usbboot protocol on panda (PandaBoard)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0451&quot;, ATTR{idProduct}==&quot;d00f&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# usbboot protocol on panda (PandaBoard ES)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0451&quot;, ATTR{idProduct}==&quot;d010&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on grouper/tilapia (Nexus 7)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e42&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on grouper/tilapia (Nexus 7)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4e40&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# adb protocol on manta (Nexus 10)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4ee2&quot;, MODE=&quot;0600&quot;, OWNER=&quot;ken&quot;&lt;br /&gt;# fastboot protocol on manta (Nexus 10)&lt;br /&gt;SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;18d1&quot;, ATTR{idProduct}==&quot;4ee0&quot;, MODE=&quot;0600&quot;, OWNER=“ken&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;6. install&amp;nbsp;Repo&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著要安裝Repo這個tool，&lt;br /&gt;Repo是一個讓你可以輕鬆使用git的tool，&lt;br /&gt;&lt;br /&gt;先在你的home目錄建立一個bin目錄，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mkdir ~/bin&lt;br /&gt;PATH=~/bin:$PATH&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;開始下載repo tool&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo&lt;br /&gt;chmod a+x ~/bin/repo&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;7. Initialize a Repo client and Download Android source&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;安裝好repo以後，就開始來設定他，&lt;br /&gt;首先先建立一個資料夾，這資料夾準備用來存android source code，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mkdir WORKING_DIRECTORY&lt;br /&gt;cd WORKING_DIRECTORY&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就init，其實就跟git差不多，&lt;br /&gt;最後-b的意思就是checkout哪個branch的意思，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.2_r2&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;設定完repo以後，就開始下載android source吧！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;repo sync&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;8.&amp;nbsp;change the default shell environment&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;完成下載以後，在開始build之前，還有一些要設定，&lt;br /&gt;ubuntu的預設的shell是dash，&lt;br /&gt;那據說用dash build會fail，&lt;br /&gt;所以要把它換成bash，就使用下面的指令，&lt;br /&gt;使用以後，就選No！就完成了！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;sudo dpkg-reconfigure dash&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;9.&amp;nbsp;Initialize build environment&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要initialize你的build environment,&lt;br /&gt;很簡單，靠下面一個script就可做到,&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;. build/envsetup.sh&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;10.&amp;nbsp;Choose a Target&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要選擇你要build的target，&lt;br /&gt;有很多種可以選，可以來這看（&lt;a href=&quot;http://source.android.com/source/building-devices.html&quot;&gt;點我&lt;/a&gt;）&lt;br /&gt;那因為我們等等是用emulator去做測試，&lt;br /&gt;所以我們是選擇aosp_arm-eng!&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;lunch aosp_arm-eng&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;11.&amp;nbsp;build code&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就可以開始build，&lt;br /&gt;直接下make就可以build，後面會帶一個參數是-jN，&lt;br /&gt;N是一個數字，通常取決於你的hardware thread的數量！&lt;br /&gt;build還蠻花時間的，我的機器在沒有做cache的情況下，build了差不多2小時..&lt;br /&gt;所以耐心等待吧！&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;make -j4&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;build成功以後，應該會看到下面的字樣，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;Install system fs image: out/target/product/generic/system.img &lt;br /&gt;out/target/product/generic/system.img+ maxsize=588791808 blocksize=2112 total=576716800 reserve=5947392&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;12. Test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;接著就要來測試剛剛build好的image是否可以使用，&lt;br /&gt;如果你是使用desktop的ubuntu，&lt;br /&gt;理論上你只要下下面的指令就可以測試，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;emulator&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;但剛好我是使用server版本去build...&lt;br /&gt;我又懶得裝ubuntu-desktop，&lt;br /&gt;我就只好抓回來我的mac環境來測試！&lt;br /&gt;注意！前提是你的mac環境已經有android-sdk，而且你也把system.img也抓回來了！&lt;br /&gt;&lt;br /&gt;首先請先建立一個avd，就是emulator，&lt;br /&gt;注意！emulator的api level要是19！&lt;br /&gt;為什麼呢？&lt;br /&gt;因為我們剛剛checkout branch的時候是4.4.2！&lt;br /&gt;你可以利用下面的指令來建立一個avd，&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;cd ~/your_android_sdk_dir/tools&lt;br /&gt;./android create avd -n test-emulator -t 15 -c 100M --abi armeabi-v7a&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;接著就把你的system.img複製到剛剛建立的avd資料夾下！&lt;br /&gt;只要搬到該資料夾下，等emluator啟動時，就會試著去load那個system.img!&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;cp system.img ~/.android/test-emulator&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;啟動emulator&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;./emulator -avd test-emulator&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;理論上看到android字樣的開機畫面，應該就代表build成功了！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/02/24/how-to-build-android-image</link>
                <guid>http://blog.kenyang.net/2014/02/24/how-to-build-android-image</guid>
                <pubDate>Mon, 24 Feb 2014 13:09:00 +0800</pubDate>
        </item>

        <item>
                <title>How to Backup and Restore your MongoDB database?</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;這篇要講如何Backup和Restore MongoDB，&lt;br /&gt;MongoDB本身提供了2種不同的backup/restore solutions，&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;mongoexport/mongoimport&lt;/li&gt;&lt;li&gt;mongodump/mongorestore&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;還有一些進階的，像是&lt;a href=&quot;https://mms.mongodb.com/?pk_campaign=MongoDB-Org&amp;amp;pk_kwd=Backup-Docs&quot; target=&quot;_blank&quot;&gt;MongoDB Management Service (MMS)&lt;/a&gt;，&lt;br /&gt;但這裡只介紹這2種比較基本的solutions，&lt;br /&gt;那麼這兩種的差異在哪呢？&lt;br /&gt;第一種的mongoexport/mongoimport其實不太算是backup/restore solution，&lt;br /&gt;因為它只能用來backup collection中的data（collection可以想成relational database的table），&lt;br /&gt;它無法backup整個db的狀態，&lt;br /&gt;在官網中也說明了，&lt;br /&gt;mongoexport/mongoimport在保存&lt;a href=&quot;http://docs.mongodb.org/v2.2/reference/glossary/#term-bson&quot; target=&quot;_blank&quot;&gt;BSON&lt;/a&gt;上是不可靠的，&lt;br /&gt;所以mongoexport/mongoimport比較適合用在保存簡單的data，&lt;br /&gt;但也可以勉強算是比較簡易型的backup/restore solution，&lt;br /&gt;但儘量別拿來作為backup/restore的方式．原因前面說過了，&lt;br /&gt;把它方法當作data的export和import就好．&lt;br /&gt;如果想要備份較完整的db，那麼就要靠第二種mongodump/mongorestore，&lt;br /&gt;下面分別是這兩種的使用方式．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. mongoexport/mongoimport&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 16px;&quot;&gt;1-1.Backup&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mongoexport -h &amp;lt;Host:Port&amp;gt; -d &amp;lt;DB_Name&amp;gt; -c &amp;lt;Collection_Name&amp;gt; -u &amp;lt;DB_User&amp;gt; -p &amp;lt;DB_Password&amp;gt; -o &amp;lt;Output_File_Name&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;-h：你的db uri和port number&lt;br /&gt;-d：你要備份的database名稱&lt;br /&gt;-c：要備份哪一個collection(table)&lt;br /&gt;-u：db帳號&lt;br /&gt;-p：db密碼&lt;br /&gt;-o：要備份出來的檔案名稱&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 16px;&quot;&gt;1-2. Restore&lt;/span&gt;&lt;br /&gt;備份成功以後，你可以試著drop那個collection，&lt;br /&gt;接著在輸入下面的command，應該就會recover成功．&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mongoimport -h &amp;lt;Host:Port&amp;gt; -d &amp;lt;DB_Name&amp;gt; -c &amp;lt;Collection_Name&amp;gt; -u &amp;lt;DB_User&amp;gt; -p &amp;lt;DB_Password&amp;gt; --file &amp;lt;File_Name&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;參數大部分和backup一樣，&lt;br /&gt;只有--file不同，&lt;br /&gt;--file要接的是剛剛備份出來的檔案名稱，&lt;br /&gt;輸入以後，看到下圖就代表recover成功了&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-c9hAXACpEJQ/UvOcUq3HNFI/AAAAAAAAFI4/YbP5amWS_7k/s1600/Screen+Shot+2014-02-06+at+10.29.31+PM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-c9hAXACpEJQ/UvOcUq3HNFI/AAAAAAAAFI4/YbP5amWS_7k/s1600/Screen+Shot+2014-02-06+at+10.29.31+PM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. mongodump/mongorestore&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 16px;&quot;&gt;2-1.Backup&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mongodump -h &amp;lt;Host:Port&amp;gt; -d &amp;lt;DB_Name&amp;gt; -c &amp;lt;Collection_Name&amp;gt; -u &amp;lt;DB_User&amp;gt; -p &amp;lt;DB_Password&amp;gt; -o &amp;lt;Directory&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;參數也和上面一樣，&lt;br /&gt;但-o是要接目錄位置，mongodump會在該目錄底下建立一個folder來存backup的檔案，&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 16px;&quot;&gt;2-2. Restore&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;mongorestore -h &amp;lt;Host:Port&amp;gt; -d &amp;lt;DB_Name&amp;gt; -c &amp;lt;Collection_Name&amp;gt; -u &amp;lt;DB_User&amp;gt; -p &amp;lt;DB_Password&amp;gt; &amp;lt;Directory&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;參數也一樣，&lt;br /&gt;但少了-o，&lt;br /&gt;請在後面直接接上存放backup db的directory．&lt;br /&gt;輸入以後，&lt;br /&gt;你會發現mongorestore不只會幫你recover data，連該collection原有的index也會幫你建好．&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;結論，&lt;br /&gt;第一種儘量別拿來做backup/restore，其實就連MongoDB官網也沒有把mongoimport/mongoexport歸類在backup/restore的類別下，&lt;br /&gt;就把第一種當作data的export吧！&lt;br /&gt;第二種就是完整的backup/restore solution，就像mysqldump一樣！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
                <link>http://blog.kenyang.net/2014/02/06/how-to-backup-and-restore-your-mongodb</link>
                <guid>http://blog.kenyang.net/2014/02/06/how-to-backup-and-restore-your-mongodb</guid>
                <pubDate>Thu, 06 Feb 2014 22:43:00 +0800</pubDate>
        </item>

        <item>
                <title>Handle long-running operations in Node.js</title>
                <description>&lt;div style=&quot;font-size: 15px; line-height: 22px;&quot;&gt;由於Node.js是Single thread的關係，&lt;br /&gt;所以並不適合用來處理&lt;span style=&quot;color: red;&quot;&gt;耗費CPU&lt;/span&gt;或者需要&lt;span style=&quot;color: red;&quot;&gt;長時間&lt;/span&gt;處理的操作，&lt;br /&gt;想要處理cpu-intensive或者long-running computation，&lt;br /&gt;還是要靠一些job server來解決會比較好（像是&lt;a href=&quot;http://gearman.org/&quot; target=&quot;_blank&quot;&gt;gearman&lt;/a&gt;），&lt;br /&gt;那如果你不想靠其他的job server來做，&lt;br /&gt;硬要用node.js本身來處理cpu-intensive或者long-running computation，&lt;br /&gt;就要靠worker來處理！&lt;br /&gt;這篇就要講怎麼使用worker．&lt;br /&gt;這裡我們要用的workder module是&lt;a href=&quot;https://github.com/audreyt/node-webworker-threads&quot;&gt;webworker-threads&lt;/a&gt;．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;1. install&lt;/span&gt;&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;npm install webworker-threads --save&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;2. implement a task.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;首先，我們要先建立一個javascript，&lt;br /&gt;而這隻javascript就是用來處理需要長時間的操作，&lt;br /&gt;這裡我們就以fibonacci來作為長時間處理的example，&lt;br /&gt;&lt;pre class=&quot;brush: js&quot;&gt;// fibonacci function&lt;br /&gt;function fibo (n){                                                                                                               &lt;br /&gt;    return n &amp;gt; 1 ? fibo(n - 1) + fibo(n - 2) : 1;                &lt;br /&gt;}                                                                &lt;br /&gt;                                                                 &lt;br /&gt;onmessage = function(event) {                                    &lt;br /&gt;    postMessage(&#39;Result is : &#39; + fibo(event.data));                  &lt;br /&gt;    self.close();                                                &lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這隻javascript有兩個function，&lt;br /&gt;一個是fibo function，&lt;br /&gt;另外一個就是onmessage，onmessage等等我們主程式會call到它，&lt;br /&gt;然後onmessage裡面就會去call fibo function．&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;3. integrate with your main.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;在這步就在你的main.js中使用&lt;a href=&quot;https://github.com/audreyt/node-webworker-threads&quot;&gt;webworker-threads&lt;/a&gt;，以及呼叫我們剛剛寫的那隻task.js，&lt;br /&gt;&lt;pre class=&quot;brush: js&quot;&gt;var express = require(&quot;express&quot;);&lt;br /&gt;var app = express();&lt;br /&gt;app.use(express.logger());&lt;br /&gt;&lt;br /&gt;// import the module &lt;br /&gt;var worker_thread = require(&#39;webworker-threads&#39;);&lt;br /&gt;var Worker = worker_thread.Worker;&lt;br /&gt;&lt;br /&gt;app.use(express.static(path.join(__dirname, &#39;view&#39;)));&lt;br /&gt;&lt;br /&gt;app.get(&#39;/fibo&#39;, function(req, resp) {&lt;br /&gt;&lt;br /&gt;    var worker = new Worker(&#39;task.js&#39;);&lt;br /&gt;&lt;br /&gt;    worker.onmessage = function(event) {&lt;br /&gt;        console.log(&quot;The task said : &quot; + event.data);&lt;br /&gt;    };                                                                                                                            &lt;br /&gt;    worker.postMessage(40);&lt;br /&gt;&lt;br /&gt;    resp.end(&#39;hello world &#39;);&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;var port = process.env.PORT || 5000;&lt;br /&gt;app.listen(port, function() {&lt;br /&gt;    console.log(&quot;Listening on &quot; + port);&lt;br /&gt;});&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;這個example，一樣有使用到express.js，&lt;br /&gt;不知道怎麼使用的人可以去看&lt;a href=&quot;http://blog.kenyang.net/2014/01/deploying-nodejs-application-to-heroku.html&quot; target=&quot;_blank&quot;&gt;這一篇：Deploying a Node.js application to Heroku&lt;/a&gt;&lt;br /&gt;webworker-threads的使用方式很簡單，&lt;br /&gt;只要先import這個module，&lt;br /&gt;然後再呼叫Worker這個instance，&lt;br /&gt;接著就可以去new一個worker出來，&lt;br /&gt;然後就可以指定要worker做什麼事情，&lt;br /&gt;這裡我們指定他去做task.js裡面的事情（new worker(&#39;task.js&#39;)）．&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #e06666; font-size: 18px;&quot;&gt;4. test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;那要怎麼測試呢？&lt;br /&gt;首先先把我們的main.js叫起來，&lt;br /&gt;&lt;pre class=&quot;brush: js&quot;&gt;node main.js&lt;br /&gt;&lt;/pre&gt;成功叫起來以後，應該會在你的terminal中看到下面的字樣，&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-giyBWmviB8I/UuU-smEDo0I/AAAAAAAAFIA/iSg3TL2-s_Q/s1600/Screen+Shot+2014-01-27+at+12.58.24+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-giyBWmviB8I/UuU-smEDo0I/AAAAAAAAFIA/iSg3TL2-s_Q/s320/Screen+Shot+2014-01-27+at+12.58.24+AM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;接著就打開我們的browser，&lt;br /&gt;然後輸入“http://0.0.0.0:5000/fibo”，&lt;br /&gt;這時候browser應該很快的就show出hello world的字樣，&lt;br /&gt;然後我們馬上回到terminal看，&lt;br /&gt;你應該只會先看到request的log（如下圖），&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-s6pGcxYS6lI/UuVAEOs3t4I/AAAAAAAAFIQ/AZ083AEaBL8/s1600/Screen+Shot+2014-01-27+at+1.03.09+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-s6pGcxYS6lI/UuVAEOs3t4I/AAAAAAAAFIQ/AZ083AEaBL8/s1600/Screen+Shot+2014-01-27+at+1.03.09+AM.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;接著過了幾秒鐘以後才會看到fibo的計算結果（如下圖），&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-lhxjfM4sVvg/UuVAEK-Eg9I/AAAAAAAAFIM/pSvMrKChzJM/s1600/Screen+Shot+2014-01-27+at+1.04.35+AM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-lhxjfM4sVvg/UuVAEK-Eg9I/AAAAAAAAFIM/pSvMrKChzJM/s1600/Screen+Shot+2014-01-27+at+1.04.35+AM.png&quot; height=&quot;41&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;如果這裡我們沒有使用worker的話，而是直接call hibo，&lt;br /&gt;你會發現很久才可以在browser中看到hello world的字樣！&lt;br /&gt;且甚至你可以試試看開兩個browser，然後都去打“http://0.0.0.0:5000/fibo”，&lt;br /&gt;你會發現第二個打的request會被hang住很久，因為是single thread的關係，&lt;br /&gt;所以thread都在處理第一個request的fibo，處理完才會去處理第二個request！&lt;br /&gt;因此想要在node.js中處理cpu-intensive或者long-running computation，&lt;br /&gt;就使用worker的概念吧！&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
                <link>http://blog.kenyang.net/2014/01/27/handle-long-running-operations-in-nodejs</link>
                <guid>http://blog.kenyang.net/2014/01/27/handle-long-running-operations-in-nodejs</guid>
                <pubDate>Mon, 27 Jan 2014 11:14:00 +0800</pubDate>
        </item>


</channel>
</rss>
